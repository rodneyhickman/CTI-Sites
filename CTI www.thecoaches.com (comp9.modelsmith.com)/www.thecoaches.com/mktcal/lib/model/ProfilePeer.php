<?php

require 'lib/model/om/BaseProfilePeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Apr 13 02:34:41 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ProfilePeer extends BaseProfilePeer {

  public static function GetProfileFromEmail( $email ){
    $c = new Criteria();
    $c->add(ProfilePeer::EMAIL1, $email);
    $profile = ProfilePeer::doSelectOne( $c );
    if(!isset($profile)){
      $profile = new Profile();
      $profile->setEmail1( $email );
      $profile->save();
    }
    return $profile;
  }

  public static function ParticipantsInTribe($tribe_id) {
    $c = new Criteria();
    $c->add(TribeParticipantPeer::TRIBE_ID, $tribe_id);
    $c->add(TribeParticipantPeer::ROLE, 'participant');
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);
    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }

  public static function AssistantsInTribe($tribe_id) {
    $c = new Criteria();
    $c->add(TribeParticipantPeer::TRIBE_ID, $tribe_id);
    $c->add(TribeParticipantPeer::ROLE, 'assistant');
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);
    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }

  public static function AllAnnualAssistants( ) {
    $c = new Criteria();
    $c->add(AnnualQuestionnairePeer::PROFILE_ID, 0, Criteria::GREATER_THAN);
    $c->addJoin(ProfilePeer::ID,AnnualQuestionnairePeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);
    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }

  public static function SearchAnnualAssistants( $q ) {
    $c = new Criteria();

    // $cton1 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'participant');
    // $cton2 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'assistant');
    // // combine them
    // $cton1->addOr($cton2);
    // $c->add($cton1);

$c->add(AnnualQuestionnairePeer::PROFILE_ID, 0, Criteria::GREATER_THAN);

    $cton3 = $c->getNewCriterion(ProfilePeer::FIRST_NAME, "%$q%", Criteria::LIKE);
    $cton4 = $c->getNewCriterion(ProfilePeer::LAST_NAME, "%$q%", Criteria::LIKE);
    // combine them
    $cton3->addOr($cton4);
    $c->add($cton3);

     $c->addJoin(ProfilePeer::ID,AnnualQuestionnairePeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }


  public static function LeadersInTribe($tribe_id) {
    $c = new Criteria();
    $c->add(TribeParticipantPeer::TRIBE_ID, $tribe_id);
    $c->add(TribeParticipantPeer::ROLE, 'leader');
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);
    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }

  public static function AllParticipants( $page = 1 ) {
    $c = new Criteria();

    // $cton1 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'participant');
    // $cton2 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'assistant');
    // // combine them
    // $cton1->addOr($cton2);
    // $c->add($cton1);

    $c->add(TribeParticipantPeer::ROLE, 'participant');
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    // $c->offset( ($page - 1) * $limit );
    // $c->limit( $limit );

    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }

  public static function AllParticipantsPager( $page = 1 ) {
    $c = new Criteria();

    // $cton1 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'participant');
    // $cton2 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'assistant');
    // // combine them
    // $cton1->addOr($cton2);
    // $c->add($cton1);

    $c->add(TribeParticipantPeer::ROLE, 'participant');
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    //$profiles = ProfilePeer::doSelect( $c );

    $pager = new sfPropelPager( 'Profile', sfConfig::get('app_pager_recs_max') ); // this is set in apps/frontend/config/app.yml (see below)
    $pager->setCriteria( $c );
    $pager->setPage( $page );
    $pager->init();
    return $pager;

  }

  public static function SearchParticipants( $q ) {
    $c = new Criteria();

    // $cton1 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'participant');
    // $cton2 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'assistant');
    // // combine them
    // $cton1->addOr($cton2);
    // $c->add($cton1);

    $c->add(TribeParticipantPeer::ROLE, 'participant');
    $cton3 = $c->getNewCriterion(ProfilePeer::FIRST_NAME, "%$q%", Criteria::LIKE);
    $cton4 = $c->getNewCriterion(ProfilePeer::LAST_NAME, "%$q%", Criteria::LIKE);
    // combine them
    $cton3->addOr($cton4);
    $c->add($cton3);

    
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }






  public static function AllAssistants( ) {
    $c = new Criteria();

    // $cton1 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'participant');
    // $cton2 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'assistant');
    // // combine them
    // $cton1->addOr($cton2);
    // $c->add($cton1);


    $c->add(TribeParticipantPeer::ROLE, 'assistant');
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }

  public static function SearchAssitants( $q ) {
    $c = new Criteria();

    // $cton1 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'participant');
    // $cton2 = $c->getNewCriterion(TribeParticipantPeer::ROLE, 'assistant');
    // // combine them
    // $cton1->addOr($cton2);
    // $c->add($cton1);


    $c->add(TribeParticipantPeer::ROLE, 'assistant');
    $cton3 = $c->getNewCriterion(ProfilePeer::FIRST_NAME, "%$q%", Criteria::LIKE);
    $cton4 = $c->getNewCriterion(ProfilePeer::LAST_NAME, "%$q%", Criteria::LIKE);
    // combine them
    $cton3->addOr($cton4);
    $c->add($cton3);

    
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }


  public static function AllLeaders( ) {
    $c = new Criteria();

    $c->add(TribeParticipantPeer::ROLE, 'leader');
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);
    $c->setDistinct(true);

    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }

  public static function RemoveOldParticipants() {
    // participants and assistants older than 4 weeks and not connected to tribe
    $c = new Criteria();
    $c->add(ProfilePeer::UPDATED_AT, date('Y-m-d', strtotime('4 weeks ago')), Criteria::LESS_THAN);
    // LEFT JOIN join with TribeParticipant
    $c->addJoin(ProfilePeer::ID, TribeParticipantPeer::PROFILE_ID, Criteria::LEFT_JOIN);
    // id is null
    $c->add(TribeParticipantPeer::PROFILE_ID, null, CRITERIA::ISNULL);
    $c->add(ProfilePeer::EXTRA1, 'leader', CRITERIA::NOT_EQUAL); // don't erase leaders
    $profiles = ProfilePeer::doSelect($c);

    foreach($profiles as $p){
      $p->delete(); // should cascade delete through related records
    }

    
    return;
  }


// Documentation for the above RemoveOldParticipants

// SELECT profile.ID, profile.FULL_NAME, profile.FIRST_NAME, profile.MIDDLE_NAME, profile.LAST_NAME, profile.ADDRESS1, profile.ADDRESS2, profile.CITY, profile.STATE_PROV, profile.ZIP_POSTCODE, profile.COUNTRY, profile.TELEPHONE1, profile.TELEPHONE2, profile.EMAIL1, profile.EMAIL2, profile.GENDER, profile.AGE, profile.SECRET, profile.CREATED_AT, profile.UPDATED_AT, profile.EXTRA1, profile.EXTRA2, profile.EXTRA3, profile.EXTRA4, profile.EXTRA5, profile.EXTRA6, profile.EXTRA7, profile.EXTRA8, profile.EXTRA9, profile.EXTRA10, profile.EXTRA11, profile.EXTRA12, profile.EXTRA13, profile.EXTRA14, profile.EXTRA15, profile.EXTRA16, profile.EXTRA17, profile.EXTRA18, profile.EXTRA19, profile.EXTRA20 FROM `profile` LEFT JOIN tribe_participant ON (profile.ID=tribe_participant.PROFILE_ID) WHERE profile.UPDATED_AT<'2011-04-05' AND tribe_participant.PROFILE_ID IS NULL AND profile.EXTRA1<>'leader'

// SELECT profile.ID, profile.FULL_NAME, profile.FIRST_NAME, profile.MIDDLE_NAME, profile.LAST_NAME, profile.ADDRESS1, profile.ADDRESS2, profile.CITY, profile.STATE_PROV, profile.ZIP_POSTCODE, profile.COUNTRY, profile.TELEPHONE1, profile.TELEPHONE2, profile.EMAIL1, profile.EMAIL2, profile.GENDER, profile.AGE, profile.SECRET, profile.CREATED_AT, profile.UPDATED_AT, profile.EXTRA1, profile.EXTRA2, profile.EXTRA3, profile.EXTRA4, profile.EXTRA5, profile.EXTRA6, profile.EXTRA7, profile.EXTRA8, profile.EXTRA9, profile.EXTRA10, profile.EXTRA11, profile.EXTRA12, profile.EXTRA13, profile.EXTRA14, profile.EXTRA15, profile.EXTRA16, profile.EXTRA17, profile.EXTRA18, profile.EXTRA19, profile.EXTRA20 FROM `profile` WHERE profile.ID=14

// DELETE FROM tribe_participant WHERE tribe_participant.PROFILE_ID=14

// DELETE FROM medical WHERE medical.PROFILE_ID=14

// DELETE FROM program_questionnaire WHERE program_questionnaire.PROFILE_ID=14

// DELETE FROM dietary WHERE dietary.PROFILE_ID=14

// DELETE FROM profile WHERE profile.ID=14


  public static function RemoveNullParticipants() {
    // participants and assistants older than 2 days and not connected to tribe
    $c = new Criteria();
    $c->add(ProfilePeer::CREATED_AT, date('Y-m-d', strtotime('2 days ago')), Criteria::LESS_THAN);
    $c->add(ProfilePeer::FIRST_NAME, null, CRITERIA::ISNULL);
    $c->add(ProfilePeer::LAST_NAME, null, CRITERIA::ISNULL);
    $c->add(ProfilePeer::EMAIL1, null, CRITERIA::ISNULL);
    $profiles = ProfilePeer::doSelect($c);

    foreach($profiles as $p){
      $p->delete(); // should cascade delete through related records
    }

    return;
  }

  public static function MergeDuplicates() {

    $c = new Criteria();
    $c->addJoin(ProfilePeer::ID,TribeParticipantPeer::PROFILE_ID);
    $c->add(TribeParticipantPeer::TRIBE_ID, 0, Criteria::GREATER_THAN);
    $c->add(TribeParticipantPeer::TRIBE_ID, 17, Criteria::NOT_EQUAL);

    $profiles = ProfilePeer::doSelect( $c );

    // foreach profile
    foreach($profiles as $profile){
      $profile->deDuplicate();
    }

  }




// ================ Certification PODs ================


// NOTE: no longer using pods. All participants are in "Unassigned" pod

  public static function AllPodParticipants( ) {
    $c = new Criteria();

    $c->addJoin(PodParticipantPeer::PROFILE_ID,ProfilePeer::ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles_selected = ProfilePeer::doSelect( $c );
    $profiles = array();
    foreach($profiles_selected as $p){
      $c = new Criteria();
      $c->add(CertificationPeer::PROFILE_ID, $p->getId() );
      $cert = CertificationPeer::doSelectOne( $c );
      if( isset($cert) && !$cert->isStartMonthDeclarationOnly() ){ // only add if there is a certification record and it is NOT just a start month declaration
        $profiles[] = $p;
      }
    }

    return $profiles;
  }

  public static function SearchPodParticipants( $q ) {
    $c = new Criteria();

    $cton3 = $c->getNewCriterion(ProfilePeer::FIRST_NAME, "%$q%", Criteria::LIKE);
    $cton4 = $c->getNewCriterion(ProfilePeer::LAST_NAME, "%$q%", Criteria::LIKE);
    // combine them
    $cton3->addOr($cton4);
    $c->add($cton3);

    $c->addJoin(ProfilePeer::ID,PodParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }


  public static function AllDeclareMonthParticipants( ) {
    $c = new Criteria();

    $c->addJoin(PodParticipantPeer::PROFILE_ID,ProfilePeer::ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);


    $profiles_selected = ProfilePeer::doSelect( $c );
    $profiles = array();
    foreach($profiles_selected as $p){
      $c = new Criteria();
      $c->add(CertificationPeer::PROFILE_ID, $p->getId() );
      $cert = CertificationPeer::doSelectOne( $c );
      if( isset($cert) && $cert->isStartMonthDeclarationOnly() ){  // only add if there is a certification record and it is just a start month declaration
        $profiles[] = $p;
      }
    }

    return $profiles;
  }

  public static function SearchDeclareMonthParticipants( $q ) {
    $c = new Criteria();

    $cton3 = $c->getNewCriterion(ProfilePeer::FIRST_NAME, "%$q%", Criteria::LIKE);
    $cton4 = $c->getNewCriterion(ProfilePeer::LAST_NAME, "%$q%", Criteria::LIKE);
    // combine them
    $cton3->addOr($cton4);
    $c->add($cton3);

    $c->addJoin(ProfilePeer::ID,PodParticipantPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles = ProfilePeer::doSelect( $c );
    return $profiles;
  }


  public static function ParticipantsInPod( $pod_id ){
    $c = new Criteria();
    $c->add(PodParticipantPeer::POD_ID, $pod_id);
    $c->addJoin(PodParticipantPeer::PROFILE_ID,ProfilePeer::ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles = ProfilePeer::doSelect( $c );    
    return $profiles;
  }

  public static function ParticipantsByDate( $date ){
    $c = new Criteria();
    $c->add(CertificationPeer::MONTH_TO_BEGIN, $date);
    $c->addJoin(ProfilePeer::ID, CertificationPeer::PROFILE_ID);
    $c->addAscendingOrderByColumn(ProfilePeer::FIRST_NAME);

    $profiles = ProfilePeer::doSelect( $c );    
    return $profiles;
  }


} // ProfilePeer
