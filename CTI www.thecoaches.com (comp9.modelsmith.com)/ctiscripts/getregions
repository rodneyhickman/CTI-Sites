#!/usr/bin/perl

use LWP::UserAgent qw(new get timeout env_proxy);
use XML::Simple;
use Data::Dumper;
use Date::Manip;
use DBI;
use lib '/usr/local/lib/sun4-solaris';
use strict;

$|++;
print "Subject: cron: getregions\n";

my $dbh = DBI->connect("DBI:mysql:CTIDATABASE",'cticoaches','');

my $query = 'FMPro?-db=Regions.fp5&-layout=webform&-format=-dso_xml&-max=50&-findall';
#my $server = 'webcom.thecoaches.com:591';
my $server = '71.130.102.11:591';

print "Getting Regions\n";
my $ua = LWP::UserAgent->new;
$ua->timeout(120);
$ua->env_proxy;
my $response = $ua->get("http://$server/$query");
my $xml;
if($response->is_success){
    $xml = $response->content;
} else {
    die $response->status_line;
}

print "Done.\n";

print "Size of XML: ",length($xml),"\n";

#open(CMD,"|/usr/local/bin/xmlpretty --PrettyWhiteNewline --PrettyWhiteIndent --CatchEmptyElement")
#    or die "Can't xmlpretty";
#print CMD $xml;

print "Hash-ifying";
my $hashref = XMLin($xml);
my @records = @{$hashref->{ROW}}; # Array of hashrefs (Yay!)
print \@records;
print " - Done.\n";
print "Number of records: ".scalar @records.".\n";


# The following maps FileMaker fields to MySql fields (ideally they would just be the same)
my %map = (
	   Region_Name => 'region_name',
	   Region_Code => 'region_code',
	   );

my %reverse_map = map { $map{$_} => $_ } keys %map;

my $table      = 'regions';
my @columns    = qw(region_code region_name);
my $pkey       = $columns[0];
my $insert_sql = "INSERT INTO $table (".join(',',@columns).") VALUES (". '?,' x $#columns."?)";
my $update_sql = "UPDATE $table SET ".join(',',map{"$_=?"}@columns[1..$#columns])." WHERE $pkey=?";


#print Dumper \@records;



my ($adds,$updates);
my %ids;
print "Adding and updating";
foreach my $record (@records){

    $ids{$record->{Region_Code}}++; # mark as 

    # Map a row from the record hash. If any value is ref type, make it undef
    my @row = map { ref $record->{$reverse_map{$_}} ? undef : $record->{$reverse_map{$_}} } @columns;

    # Is this event already in the DB? ...
    my $sth = $dbh->prepare("SELECT $pkey FROM $table WHERE $pkey=?");
    $sth->execute( $row[0] );
    my @fetchrow = $sth->fetchrow_array;

    # ... if not, insert it ...
    if($fetchrow[0] eq ''){
      $adds++;
      $sth = $dbh->prepare($insert_sql);
      $sth->execute( @row );

    # ... else update it
    } else {
      $updates++;
      $sth = $dbh->prepare($update_sql);
      $sth->execute( @row[1..$#row],$row[0] );
    }
}
print " - done.\n";
print "Adds: $adds\n";
print "Updates: $updates\n";



print Dumper \@records,\%ids;
exit;
__END__

print "Removing old records";
my $sth = $dbh->prepare("DELETE FROM $table WHERE CURDATE()>start_date");
$sth->execute();
print " - done.\n";

print "Removing events no longer in list.\n";
my $eventids = $dbh->selectall_arrayref(
	      "SELECT fmid FROM event_calendar");
foreach my $eventid (@$eventids){
    my $id = $eventid->[0];
    unless($ids{$id}){
	my $sth = $dbh->prepare("DELETE FROM $table WHERE fmid=?");
	$sth->execute($id);
	print "Event: $id\n";
    }
}

print "Done.\n";






