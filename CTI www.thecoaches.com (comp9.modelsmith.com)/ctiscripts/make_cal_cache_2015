#!/usr/bin/perl
# Usage: make_cal_cache
# By Thomas Beutel for Coaches Training Institute

use strict;

use DBI;
use Template;
use List::Util qw(sum min max reduce);
use Date::Manip;
use Smart::Comments;
use Data::Dumper;

#-------------------------- Setup -----------------------

# global variables (yes, globals are bad)
use vars qw( $dbh $index_template $grid_template $midweek_template $curriculum_grid_template $grid_template_old $subregion_grid_template $location_template $serial_number $series_not_stand_alone  $preferred_call_time $state_list);

# Database	    
$dbh = DBI->connect("DBI:mysql:CTIDATABASE",'cticoaches','');

# Get last serial number in course_series table
$serial_number = get_last_serial_number() + 1;

# States and regions (see region codes in event table). States and Regions are automatically sorted alphabetically 
$state_list = {
  'United States' => {
    states => {
      'California' => {
        'regions' => [ 'SC', 'SJ', 'SR', 'SD' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Carla Hamby at <a href="tel:+14155261645">1-415-526-1645</a> or <a href="mailto:Carla@coactive.com">Carla@coactive.com</a> ',
        'region_messages' => {
          'SCSD' => 'NEW CITY! Introductory Price $699USD',
        },
        'region_overrides' => {
          'CA' => {
            'contact' => '* Co-Active Coaching Fundamentals for Business Professionals is designed specifically for those who are currently working in a manager or leadership role inside an organization. For more information <b>and future dates</b>, contact Poorni: <a href="mailto:">poorni@coactive.com</a>, <a href="tel:+14155261617">415-526-1617</a>.',
            'region_name' => 'Palo Alto, CA - Co-Active Coaching Fundamentals for Business Professionals*',
          }
        }
      },
      'Colorado' => {
        'regions' => [ 'DVR' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Dana Fulenwider at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1608',
        'region_messages' => {
        }
      },
      'District Of Columbia' => {
        'regions' => [ 'DC' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Amy Anderson at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1612',
        'region_messages' => {
        }
      },
      'Florida' => {
        'regions' => [ 'FL', 'MIA', 'ORL', 'FLORL' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Tammy Hibler at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1613',
        'region_messages' => {
          'FLFL' => 'NEW CITY! Introductory Price $699USD',
		  'FLORL' => 'NEW CITY! Introductory Price $699USD'		  
        }
      },
      'Georgia' => {
        'regions' => [ 'ATL' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Tammy Hibler at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1613',
        'region_messages' => {
        }
      },
	   'Hawaii' => {
        'regions' => [ 'HI' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Jayson Krause at <a href="tel:+18006916008">1-800-691-6008</a>, etc. 1674 or contact <a href="mailto:admissions@coactive.com">Admissions@coactive.com</a>',
        'region_messages' => {         
        }
      },
      'Illinois' => {
        'regions' => [ 'CHI' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Dana Fulenwider at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1608',
        'region_messages' => {
        }
      },
      'Massachusetts' => {
        'regions' => [ 'BOS' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Amy Anderson at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1612',
        'region_messages' => {
        }
      },
      'Minnesota' => {
        'regions' => [ 'MN' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Dana Fulenwider at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1608',
        'region_messages' => {
        }
      },
#      'New Jersey' => {
#        'regions' => [ 'NJ' ],
#        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Amy Anderson at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1612',
#        'region_messages' => {
#          'NJ' => 'NEW CITY! Introductory Price $699USD'
#        }
#      },
      'New York' => {
        'regions' => [ 'NY' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Amy Anderson at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1612',
        'region_messages' => {
        }
      },
      'North Carolina' => {
        'regions' => [ 'NC' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Tammy Hibler at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1613',
        'region_messages' => {
          'NCCHA' => 'NEW CITY! Introductory Price $699USD',
		  'NCRA' => 'NEW CITY! Introductory Price $699USD'		 
        }
      },
#      'Pennsylvania' => {
#        'regions' => [ 'PA' ],
#        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Amy Anderson at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1612',
#        'region_messages' => {
#          'PA' => 'NEW CITY! Introductory Price $699USD'
#        }
#      },
      'Texas' => {
        'regions' => [ 'TX','DAL','DFW','AUS' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Tammy Hibler at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1613',
        'region_messages' => {
          'DFW' => 'NEW CITY! Introductory Price - $699USD*'
        }
      },
      'Washington' => {
        'regions' => [ 'WA' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Sue Jordon  at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1655',
        'region_messages' => {
          'WA' => 'NEW CITY! Introductory Price $699USD'
        }
      }
    }
  },
  'Canada' => {
    'states' => {
      'Alberta' => {
        'regions' => [ 'CAL', 'CGY', 'CLG', 'EDM' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Sue Jordon  at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1655',
        'region_messages' => {
          'EDM' => 'NEW CITY! Introductory Price $699USD'
        }
      },
      'British Columbia' => {
        'regions' => [ 'VAN' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Sue Jordon  at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1655'
      },
      'Nova Scotia' => {
        'regions' => [ 'HAL' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Debra Martin  at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1633',
        'region_messages' => {
          'HAL' => 'NEW CITY! Introductory Price $699USD'
        }
      },
      'Ontario' => {
        'regions' => [ 'LON', 'TOR', 'OTT', 'ON' ],
        'contact' => 'For more information <b>and future dates</b>, please contact your Regional Program Advisor, Debra Martin at <a href="tel:+18006916008">1-800-691-6008</a>, ext. 1633',
        'region_messages' => {
          'LON' => 'NEW CITY! Introductory Price $699USD',
          'ON' => 'NEW CITY! Introductory Price $699USD'

        }
      },
    }
  },
  'Singapore' => {
    'regions' =>  [ 'SG' ],
    'contact' => '',
    'region_messages' => {
      'SG' => '<a href="http://www.thecoaches.com/coach-training/pricing-registration-singapore">Click here for pricing information or to register</a>
. To schedule an appointment with a program advisor, email <a href="mailto:UKinfo@coactive.com">UKinfo@coactive.com</a> or call +44 845 299 8199.'
    },
    'region_overrides' => {   
      'SG' => {
        'region_name' => ''
      }
    }
  }
};

#-------------------------- Templates -----------------------

$index_template = q{
<div id="[% country_id %]" style="width:230px;margin-top:12px;">
  <h2>[% country %]</h2>
  <ul class="bulleted-arrowed">
[% FOREACH r = regions %] 
    <li><a href="/coach-training/dates-and-locations/#[% r.region_code %]" class="onpage">[% r.region_name %]</a></li>
[% END %]
  </ul>
</div>
};

# $index_template_old = q{
# <div id="[% country_id %]" style="width:230px;margin-top:12px;">
#   <h2>[% country %]</h2>
#   <ul class="bulleted-arrowed">
# [% FOREACH r = regions %] 
#     <li><a href="/coach-training/dates-and-locations/#[% r.region_code %]" class="onpage">[% r.region_name %]</a></li>
# [% END %]
#   </ul>
# </div>
# };


$grid_template = q{
<a name="[% region.region_code %]" id="[% region.region_code %]"></a>
            <h2>[% region.region_name %] [% region.region_weekend %] &nbsp;&nbsp;[% region.region_extra %]</h2>

            <p style="color: red; margin-bottom: 4px; font-size: 10px;">(mouse over each date for specific venue information)</p>

            <table class="new regiongrid" >
              <thead>
                <tr>
                  <th style="background: url(/res/img/table-head-arrows.gif) no-repeat 0 0;">1. Fundamentals</th>

                  <th style="background: url(/res/img/table-head-arrows.gif) no-repeat -10px 0;">2. Fulfillment</th>

                  <th style="background: url(/res/img/table-head-arrows.gif) no-repeat -18px 0;">3. Balance</th>

                  <th style="background: url(/res/img/table-head-arrows.gif) no-repeat -18px 0;">4. Process</th>

                  <th>5. Synergy</th>
                </tr>
              </thead>

              <tbody>
[% FOREACH item IN grid %]
                <tr>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.4.fmid %]">[% item.4.start_date_formatted %]</a>[% region.fund_star %]</td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.3.fmid %]">[% item.3.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.2.fmid %]">[% item.2.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.1.fmid %]">[% item.1.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.0.fmid %]">[% item.0.start_date_formatted %]</a></td>
                </tr>
[% END %]

                <tr>
                  <td colspan="5"><em>[% region.contact %]</em></td>
                </tr>
              </tbody>
            </table>

<script type="text/javascript">
//<![CDATA[
// execute your scripts when the DOM is ready. this is a good habit
$(function() {
[% FOREACH n = [ 0 .. 4 ] %]
[% FOREACH m = [ 0 .. 4 ] %]
[% IF grid.${n}.${m}.fmid %]
$('#[% grid.$n.$m.fmid %]').tooltip({tip:'#[% grid.$n.$m.location %]',offset:[45, 2],effect:'slide'});
[% END %]
[% END %]
[% END %]
});
//]]>
</script>

};


$midweek_template = q{

            <h3 style="margin-top:-40px;">[% region.region_name %] - Midweek Series</h3>

            <p style="color: red; margin-bottom: 4px; font-size: 10px;">(mouse over each date for specific venue information)</p>

            <table class="new regiongrid" >
              <thead>
                <tr>
                  <th style="background: url(/res/img/table-head-arrows.gif) no-repeat 0 0;">1. Fundamentals</th>

                  <th style="background: url(/res/img/table-head-arrows.gif) no-repeat -10px 0;">2. Fulfillment</th>

                  <th style="background: url(/res/img/table-head-arrows.gif) no-repeat -18px 0;">3. Balance</th>

                  <th style="background: url(/res/img/table-head-arrows.gif) no-repeat -18px 0;">4. Process</th>

                  <th>5. Synergy</th>
                </tr>
              </thead>

              <tbody>
[% FOREACH item IN grid %]
                <tr>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.4.fmid %]">[% item.4.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.3.fmid %]">[% item.3.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.2.fmid %]">[% item.2.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.1.fmid %]">[% item.1.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.0.fmid %]">[% item.0.start_date_formatted %]</a></td>
                </tr>
[% END %]

                <tr>
                  <td colspan="5"><em>[% region.contact %]</em></td>
                </tr>
              </tbody>
            </table>

<script type="text/javascript">
//<![CDATA[
// execute your scripts when the DOM is ready. this is a good habit
$(function() {
[% FOREACH n = [ 0 .. 4 ] %]
[% FOREACH m = [ 0 .. 4 ] %]
[% IF grid.${n}.${m}.fmid %]
$('#[% grid.$n.$m.fmid %]').tooltip({tip:'#[% grid.$n.$m.location %]',offset:[45, 2],effect:'slide'});
[% END %]
[% END %]
[% END %]
});
//]]>
</script>

};





$curriculum_grid_template = q{


            <p style="color: red; margin-bottom: 4px; font-size: 10px;margin-top:-40px;">(mouse over each date for specific venue information)</p>

            <table class="new regiongrid">
              <thead>
                <tr>
                  <th style="background: #EBE9DA;" colspan="5">Meet the New Co-Active Model Workshop&nbsp;&nbsp;&nbsp;&nbsp;</th>
                </tr>
              </thead>

              <tbody>
[% FOREACH item IN grid %]
                <tr>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.0.fmid %]">[% item.0.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.1.fmid %]">[% item.1.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.2.fmid %]">[% item.2.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.3.fmid %]">[% item.3.start_date_formatted %]</a></td>
                  <td><a target="_blank" href="javascript:void(0)" id="[% item.4.fmid %]">[% item.4.start_date_formatted %]</a></td>
                </tr>
[% END %]

                <tr>
                  <td colspan="5"><em>[% pricing %]</em><br /><a class="smallbtn" href="/coach-training/courses/register-curr-update.html?package=[% package %]">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </a></td>
                </tr>
              </tbody>
            </table>

<script type="text/javascript">
//<![CDATA[
// execute your scripts when the DOM is ready. this is a good habit
$(function() {
[% FOREACH n = [ 0 .. 4 ] %]
[% FOREACH m = [ 0 .. 4 ] %]
[% IF grid.${n}.${m}.fmid %]
$('#[% grid.$n.$m.fmid %]').tooltip({tip:'#[% grid.$n.$m.location %]',offset:[45, 2],effect:'slide'});
[% END %]
[% END %]
[% END %]
});
//]]>
</script>

};






$location_template = q{
            <div id="[% site.site_code %]" class="tooltip">
              <p><strong>[% site.site_name %]</strong><br />
               [% site.city %], [% site.state %]</p><a href="[% site.site_url %]" class="pdf" target="_blank">Detailed venue info</a>
            </div>
};

#-------------------------- Create HTML -----------------------


# create the HTML for the given countries

my @countries = ( 'United States', 'Canada', 'Singapore' );

my $index_html    = reduce { $a . $b } map { make_index_html($_) } @countries;
my $grid_html     = reduce { $a . $b } map { make_grid_html($_)  } @countries;
my $location_html = reduce { $a . $b } map { make_location_html($_) } @countries;

# store the INDEX and GRID HTML's
#$dbh->do('UPDATE calendar_cache set idx=?, html=?, location=?, created=now() where id=9',undef,$index_html,$grid_html,$location_html);
$dbh->do('UPDATE calendar_cache set idx=?, html=?, location=?, created=now() where id=9',undef,$index_html,$grid_html,$location_html);

remove_old_course_series($serial_number); # clean up course_series table

open(OUT,">/www/www.thecoaches.com/calendar_cache/9-cache.html")
 or die "Can't open cache file";
print OUT $grid_html;
close(OUT);

exit;

#-------------------------- Iteration subroutines -------------------

sub Iterator (&) { return $_[0] }  # syntactic sugar for iterators


# make_index_html creates an index per the index template above. This style of index is obsolete. The index is now 
# created by www.thecoaches.com/data/us_calendar.js script. However, that script still uses this
# index to create the new index.

sub make_index_html {
  my ($country) = @_;
  my $html = '';
  my $states = [ ];
  my $regions = [ ];
  my $parent_regions_seen = { };

  # Get states for this region
  my $state_iterator = make_state_iterator($country,
                                           sub { }
                                         );

  # ### $country

  while ( my $state_data = $state_iterator->() ) {
    # ### $state_data
 
    # get regions for this country, with course count > 0
    my $region_it = make_region_iterator($country, $state_data,
                                         sub { region_course_count($_[0]) > 0 }
                                       );

    while ( my $region = $region_it->() ) {
      # skip if fast track, do not list in index
      next if ($region->{region_code} =~ m/ FT /xms); 

      $region->{region_name} = 'Singapore' if ($region->{region_code} eq 'SG');

      if (exists $region->{parent_region}) {
        # skip if parent region was already seen
        next if(exists $parent_regions_seen->{$region->{parent_region}} && $parent_regions_seen->{$region->{parent_region}} > 0);
        $parent_regions_seen->{$region->{parent_region}}++;
      }
      
      push(@$regions, $region);
    }

    # ### $regions
  }

  # sort regions by name alphabetically
  @$regions = sort { $a->{region_name} cmp $b->{region_name} } @$regions;

  # make country_id as lower case and subsitute spaces with dashes
  my $country_id = lc $country;
  $country_id =~ s/ [ ] /-/gxms;

  my $template = Template->new();

  my $vars = {
    country    => $country,
    country_id => $country_id,
    regions    => $regions,
  };

  $template->process(\$index_template,$vars,\$html);

  ### $html

  return $html;
}

sub make_state_iterator {
  my ($country,$filter) = @_;
  my @state_keys;

  # get alphabetized list of states from state list
  if (exists $state_list->{$country} && exists $state_list->{$country}->{states}) {
    @state_keys = sort keys %{$state_list->{$country}->{states}};
  } elsif (exists $state_list->{$country} && exists $state_list->{$country}->{regions}) {
    @state_keys = $country;     # there are no states (ie. Singapore)
  }

### @state_keys;

  return Iterator {
    my $state = shift @state_keys;
    if (exists $state_list->{$country}->{states} && $state_list->{$country}->{states}->{$state} ) {
      return { $state => $state_list->{$country}->{states}->{$state} };
    }
    if (exists $state_list->{$state}->{regions}) {
      # for countries without states, like Singapore
      return { $country => $state_list->{$country} };
    } 
    return undef;
  };
}


sub make_region_iterator {
  my ($country,$state_data,$filter) = @_;

  my ($state) = keys %$state_data;


  # get regions for this state
  my $region_codes     = $state_data->{$state}->{regions};          #array_ref
  my $region_messages  = $state_data->{$state}->{region_messages};  #array_ref
  my $region_overrides = $state_data->{$state}->{region_overrides}; #array_ref
  my $contact          = $state_data->{$state}->{contact};          #string

  my $region_code_string = "'".join("','",@$region_codes)."'";

  # ### $region_code_string

  # select all regions for this state
  my $regions = $dbh->selectall_arrayref('SELECT region_code,region_name FROM regions WHERE region_code IN ('.$region_code_string.')',{Columns=>{}});

  # filter out unwanted regions (usually we filter out those regions with no courses)
  my @regions = grep { $filter->($_) } @$regions;


  # BUSINESS RULE EXCEPTION: add SF fast track
  # These rules are needed because some cities and series do not have their own region code (example, LA nd San Diego are both 'SC')

  # ### doing business rule exceptions

  if ( grep { $_->{region_code} eq 'SR'} @regions ) {
    # ### adding SRFT
    push(@regions,{ 
    region_code => 'SRFT',
     region_name => 'San Rafael, CA ',
    });
  }
  if ( grep { $_->{region_code} eq 'DC'} @regions ) {
     # ### adding DCFT
     push(@regions,{ 
       region_code => 'DCFT',
       region_name => 'Washington, DC Metro ',
     });
  }
  if ( grep { $_->{region_code} eq 'SC'} @regions ) {
    # ### removing SC and adding SCLA and SCSD
    @regions = grep { $_->{region_code} ne 'SC'} @regions;
    push(@regions,{ 
      region_code => 'SCLA',
      region_name => 'Los Angeles, CA',
    });
    push(@regions,{ 
      region_code => 'SCSD',
      region_name => 'San Diego, CA',
    });
  }
  if ( grep { $_->{region_code} eq 'FL'} @regions ) {
    # ### removing FL and adding FLMIA and FLFL etc.
    @regions = grep { $_->{region_code} ne 'FL'} @regions;
    # push(@regions,{ 
    #   region_code => 'FLMIA',
    #   region_name => 'Miami, FL',
    # });
    #push(@regions,{ 
    #  region_code => 'FLFL',
    #  region_name => 'Fort Lauderdale, FL',
    #});  
    push(@regions,{ 
       region_code => 'FLORL',
       region_name => '<span style="font-size:92%">Orlando, FL</span>',
    });
  }
  if ( grep { $_->{region_code} eq 'NC'} @regions ) {
    # ### removing NC and adding NCCHA and NCRA
    @regions = grep { $_->{region_code} ne 'NC'} @regions;
     push(@regions,{ 
      region_code => 'NCCHA',
      region_name => 'Charlotte, NC',
     });  
     push(@regions,{ 
       region_code => 'NCRA',
       region_name => 'North Carolina<br>&nbsp&nbsp;<span style="font-size:92%">Raleigh, NC</span>',
     });
  }
    # ### done with business rules

  # add messages and contact info to regions
  foreach my $region(@regions) {
    $region->{contact} = $contact;
    if ( exists $region_messages->{$region->{region_code}} ) {
      $region->{region_extra} = $region_messages->{$region->{region_code}};
    }
    if ( exists $region_overrides->{$region->{region_code}} ) {
      my $overrides = $region_overrides->{$region->{region_code}};
      if ( exists $overrides->{region_name} ) {
        $region->{region_name} = $overrides->{region_name};
      }
      if ( exists $overrides->{contact} ){
        $region->{contact} = $overrides->{contact};
      }
    } 
    if ($region->{region_code} eq 'DFW' ) {
      $region->{fund_star} = '*';
    }
  }

  # BUSINESS RULE EXCEPTION: make Esalen sort after San Rafael
  @regions = map { 
    $_->{region_name}  = 'San Francisco Bay Area<br />&nbsp;&nbsp;Esalen Institute, Big Sur, CA' if $_->{region_code} eq 'Esalen';
    $_->{region_extra} = '<em>English Speaking Courses, English Material, and French Speaking Coaching Assistants</em>' if $_->{region_code} eq 'MON';

    $_ } @regions;
  

  # sort by region name: compare region_name (or region_code if names equal)
  @regions = sort { $a->{region_name} eq $b->{region_name} 
                      ? $a->{region_code} cmp $b->{region_code}
                      : $a->{region_name} cmp $b->{region_name} } @regions;

  return Iterator {
    return shift @regions;
  };
}


sub make_grid_html {
  my ($country) = @_;
  my $html = "<h1 class=\"calendar_country\">$country</h1>\n";
  my $parent_regions_seen = { };


  # Get states for this region
  my $state_iterator = make_state_iterator($country,
                                           sub { }
                                         );

  # ### $country

  while ( my $state_data = $state_iterator->() ) {
    # ### $state_data
 
    my ($state) = keys %$state_data;

    $html .= "<h2 class=\"calendar_state\">$state</h2>\n"
      unless $state eq 'Singapore';

    # get regions for this country, with course count > 0
    my $region_it = make_region_iterator($country, $state_data,
                                         sub { region_course_count($_[0]) > 0 }
                                       );

  
    my $template = Template->new();
  
    while ( my $region = $region_it->() ) {
      my $series_it = make_series_iterator($region);
      my @grid;
      while ( my $series = $series_it->() ) {
        push(@grid,$series);
      }

      my @grid_temp    = sort by_series_dates @grid;


      # @grid_sorted represents weekend series
      my @grid_sorted;
      @grid_sorted  = grep { $_->[0]->{midweek} != 1 and $_->[4]->{midweek} != 1 } @grid_temp;


      # @grid_midweek represents midweek series
      my @grid_midweek = grep { $_->[0]->{midweek} == 1 or  $_->[4]->{midweek} == 1 } @grid_temp;


    # BUSINESS RULE EXCEPTION: rename for orlando or any fast track
	  if ($region->{region_code} eq 'DCFT'
            and $region->{region_code} =~ m/ FT \z /xms
          ) {
        $region->{region_name} .= '&nbsp;&nbsp;&nbsp;<b style="font-size:80%;color:#a00;">FAST TRACK Series</b>';
        $region->{region_weekend} = '';
      } 
	  elsif ($region->{region_code} eq 'SRFT'
            and $region->{region_code} =~ m/ FT \z /xms
          ) {
        $region->{region_name} .= '&nbsp;&nbsp;&nbsp;<b style="font-size:80%;color:#a00;">FAST TRACK Series</b>';
        $region->{region_weekend} = '';
      } 
      #elsif ($region->{region_code} eq 'ORL'
      #      or $region->{region_code} =~ m/ FT \z /xms
      #    ) {
      #  $region->{region_name} .= '&nbsp;&nbsp;&nbsp;<b style="font-size:80%;color:#a00;">FAST TRACK Cohort Series</b>';
      #  $region->{region_weekend} = '';
      #} 
      elsif ( $region->{region_code} eq 'CA') { # don't display weekend for Palo Alto
        $region->{region_weekend} = '';
      }
      elsif ( $region->{region_code} eq 'SG') { # no dash for Singapore
        $region->{region_weekend} = 'Weekend Courses';
      }
      else {
        $region->{region_weekend} = '- Weekend Courses';
      }
   
      if (exists $region->{parent_region}) {
        my $parent = $region->{parent_region};
        # skip if parent region was already seen
        if (exists $parent_regions_seen->{$parent} && $parent_regions_seen->{$parent} > 0) {
          $region->{region_name} =~ s/$parent<br.*?>//ms; # remove parent region name up to and including the break
        }
        $parent_regions_seen->{$region->{parent_region}}++;
      }


    ### @grid_sorted
    # store grid in database in course_series table
      store_course_series($serial_number,@grid_temp);

      #print Dumper  @grid_sorted;

      my $vars = {
        region => $region,
        grid   => \@grid_sorted,
      };


      # ### $vars

      $template->process(\$grid_template,$vars,\$html);


    # #################### iterator for Midweek Series ####################
    #
    #

      if (scalar @grid_midweek > 0) {
    
        my $vars1 = {
          region => $region,
          grid   => \@grid_midweek,
        };


        $template->process(\$midweek_template,$vars1,\$html);

      }


    # #################### iterator for Curriculum Update Workshop ####################
    #
    #

      my $curr_update_it = make_curr_update_it($region);

      my @upd_grid;  
      # structure: [ 
      #               [ { course }, { course }, { course }, { course }, { course } ], 
      #               [ { course }, { course }, { course }, { course }, { course } ], 
      #               ...
      #            ]

      my @row ;
      #my $pricing = 'Early Bird Ticket $125 through December 9, 2011.  Full price of $175 from December 10, 2011 through workshop date.';
      my $pricing = 'Ticket price is $175';
      my $package = 11;
      my $i = 0;
      while ( my $course = $curr_update_it->() ) {
        push(@row,$course);
        if ($course->{start_date} =~ m/2011/) {
          $pricing = 'Workshop price is $175.';
          $package = 10;
        }
        $i++;
        if ($i > 4) {
          $i = 0;
          push(@upd_grid,[@row]);
          @row = ( );
        }
      }

      if (@row) {
        push(@upd_grid,[@row]);
      }

      if (@upd_grid) {
    
        #print Dumper @upd_grid;

        my $vars = {
          region  => $region,
          grid    => \@upd_grid,
          pricing => $pricing,
          package => $package,
        };
      
        $template->process(\$curriculum_grid_template,$vars,\$html);
      }
    
    }


  } # state_data

# ### $html


  
  return $html;
}

sub make_location_html {
  my ($country) = @_;
  my $html = '';

  my $site_it = make_site_iterator(  );

  my $template = Template->new();
  
  while( my $site = $site_it->() ){
    my $vars = {
      site => $site,
    };

    $template->process(\$location_template,$vars,\$html);
  }

  return $html;
}

sub make_site_iterator {
  my $sites = $dbh->selectall_arrayref('SELECT site_code,site_name,city,state,site_url FROM site_data',{Columns=>{}});

  # Exception for Singapore
  push(@$sites,{site_code=>'Singapore',site_name=>'Singapore',city=>'Singapore',state=>'',site_url=>''});

  return Iterator {
    my $site = shift @$sites;
    last unless $site;
    next if $site->{site_url} eq '';
    #next if $site->{site_url} !~ m/\.pdf/i;
    if($site->{city} eq ''){
	$site->{city} = '--city missing--';
    }
    if($site->{state} eq ''){
	$site->{state} = '--state/prov missing--';
    }
    next if $site->{city} eq '';
    if($site->{site_url} !~ m/\/docs/){
	$site->{site_url} =~ s/thecoaches\.com/thecoaches.com\/docs/ms; # add /docs into URL
    }
    return $site;
  };
}

sub make_curr_update_it {
  my ($region) = @_;

  my $region_code = $region->{region_code};
  my $courses;

  # exceptions

  if($region_code eq 'xxxSCOC') {
    #$region_code = 'SC';
    $courses =  $dbh->selectall_arrayref("SELECT * from event_calendar where region=? AND location LIKE 'OC%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and course_type_id=149 ORDER BY start_date DESC",{Columns=>{}},'SC');
  }
  elsif($region_code eq 'SCLA') {
    #$region_code = 'SC';
    $courses =  $dbh->selectall_arrayref("SELECT * from event_calendar where region=? AND location LIKE 'LA%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and course_type_id=149 ORDER BY start_date DESC",{Columns=>{}},'SC');
  }
  else {
    $courses =  $dbh->selectall_arrayref('SELECT * from event_calendar where region=? and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and course_type_id=149 ORDER BY start_date DESC',{Columns=>{}},$region_code);
  }

  if ($region->{region_code} eq 'xxxSR') {
    push(@$courses,
         {
           assistant_count => '0',
           assistant_wait_count => '0',
           booking_link => 'http://www.thecoaches.com/pdfs/SR-CTI.pdf',
           call_time => '',
           course_type_id => 149,
           date => '11/20/2011',
           day_of_week => 'Friday',
           end_date => undef,
           end_date_formatted => undef,
           event => 'Curriculum Update Workshop',
           fmid => '1',
           id => '3641',
           location => 'SR-TBA',
           pod_name => '0',
           region => 'SR',
           series_id => '0',
           start_date => '2011-11-20 00:00:00',
           start_date_formatted => 'Nov 20, 2011',
           student_count => '0',
           total => '0'
         }
       );
  }


  return Iterator {
    return shift @$courses;
  };
}



sub make_series_iterator {
  my ($region) = @_;

  ### series_iterator: $region

  # BUSINESS RULE EXCEPTION: return SF fast track dates if '0SR'
  # (change this to 0SRxxx to turn off)
  if ($region->{region_code} eq 'SRFTxxx') {
    my $series = [
  # the following was retrieved by turning smart comments on
           {
             assistant_count => '0',
             assistant_wait_count => '0',
             booking_link => 'http://www.thecoaches.com/pdfs/SR-CTI.pdf',
             call_time => 'Fast Track',
             course_type_id => 7,
             date => '05/14/2010',
             day_of_week => 'Friday',
             end_date => undef,
             end_date_formatted => undef,
             event => 'In The Bones',
             fmid => '14681',
             id => '3641',
             location => 'SR-TBA',
             pod_name => '0',
             region => 'SR',
             series_id => '0',
             start_date => '2010-05-14 00:00:00',
             start_date_formatted => 'May 14, 2010',
             student_count => '0',
             total => '0'
           },
           {
             assistant_count => '0',
             assistant_wait_count => '0',
             booking_link => 'http://www.thecoaches.com/pdfs/SR-CTI.pdf',
             call_time => 'MIDWEEK/Fast Track',
             course_type_id => 6,
             date => '04/13/2010',
             day_of_week => 'Tuesday',
             end_date => undef,
             end_date_formatted => undef,
             event => 'Process',
             fmid => '14705',
             id => '3643',
             location => 'SR-TBA',
             pod_name => '0',
             region => 'SR',
             series_id => '0',
             start_date => '2010-04-13 00:00:00',
             start_date_formatted => 'April 13, 2010',
             student_count => '0',
             total => '0'
           },
           {
             assistant_count => '0',
             assistant_wait_count => '0',
             booking_link => 'http://www.thecoaches.com/pdfs/SR-BW.pdf',
             call_time => 'Fast Track',
             course_type_id => 5,
             date => '04/09/2010',
             day_of_week => 'Friday',
             end_date => undef,
             end_date_formatted => undef,
             event => 'Balance',
             fmid => '14706',
             id => '3644',
             location => 'SR-TBA',
             pod_name => '0',
             region => 'SR',
             series_id => '0',
             start_date => '2010-04-09 00:00:00',
             start_date_formatted => 'April  9, 2010',
             student_count => '0',
             total => '0'
           },

    ];
    my @array = ( $series ); 
    return Iterator {
      return shift @array;
    }
  }

  my $course_it = make_course_iterator($region);  
  return Iterator {
    return undef if $course_it->('exhausted?');
    my $series = [
      $course_it->('itb'),
      $course_it->('pro'),
      $course_it->('bal'),
      $course_it->('ful'),
      $course_it->('fun'),
    ];
    my $updated_series = update_completed_dates($series);
### series: $series
    return $updated_series;
  };
}


sub update_completed_dates {
  my ($series) = @_;

  # $series order is itb, pro, bal, ful, fun

  # if series does not have synergy (itb), then don't bother
  if ($series->[0]->{'date'} eq ''){
    return $series;
  }
  
  my $itb_fmid = $series->[0]->{'fmid'};


  my $itb_date = $series->[0]->{'start_date_formatted'};
  my $pro_date = $series->[1]->{'start_date_formatted'};
  my $bal_date = $series->[2]->{'start_date_formatted'};
  my $ful_date = $series->[3]->{'start_date_formatted'};
  my $fun_date = $series->[4]->{'start_date_formatted'};


  my $list_of_series =  $dbh->selectall_arrayref('SELECT * FROM course_series_archive WHERE itb_fmid=? LIMIT 1',{Columns=>{}},$itb_fmid);

  my $archived_series = { };
  if (scalar @$list_of_series > 0) {
    $archived_series = $list_of_series->[0];
  }

  if ($pro_date =~ m/Completed/) {
    $pro_date = $archived_series->{'pro_date'} || 'Completed';
    $series->[1]->{'start_date_formatted'} = '<span style="text-decoration:line-through;">'.$pro_date.'</span>';
  }

  if ($bal_date =~ m/Completed/) {
    $bal_date = $archived_series->{'bal_date'} || 'Completed';
    $series->[2]->{'start_date_formatted'} = '<span style="text-decoration:line-through;">'.$bal_date.'</span>';
  }
  
  if ($ful_date =~ m/Completed/) {
    $ful_date = $archived_series->{'ful_date'} || 'Completed';
    $series->[3]->{'start_date_formatted'} = '<span style="text-decoration:line-through;">'.$ful_date.'</span>';
  }
  
  if ($fun_date =~ m/Completed/) {
    $fun_date = $archived_series->{'fun_date'} || 'Completed';
    $series->[4]->{'start_date_formatted'} = '<span style="text-decoration:line-through;">'.$fun_date.'</span>';
  }
    
  # save the series if it isn't already
  if (scalar @$list_of_series < 1) {
    $dbh->do('INSERT INTO course_series_archive (itb_fmid,fun_date,ful_date,bal_date,pro_date,itb_date,updated_at) value (?,?,?,?,?,?,NOW())',undef,
             $itb_fmid,$fun_date,$ful_date,$bal_date,$pro_date,$itb_date);
  }

  return $series;
}

sub make_course_iterator {
  my ($region) = @_;
  # courses for this region in reverse start_date order
  # also account for "stand-alone" fundamentals courses

  my $region_code = $region->{region_code}; 

  # exceptions
  if($region_code eq 'SRFT') { # add fast track locations here and in make_region_iterator
    $region_code = 'SR';
  }
  if($region_code eq 'DCFT') {
    $region_code = 'DC';
  }

  my $courses1 =  $dbh->selectall_arrayref('SELECT * from event_calendar where fmid!=15745 AND region=? and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC',{Columns=>{}},$region_code);


  # exceptions

  if($region_code eq 'xxxSCOC') {
    #$region_code = 'SC';
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where fmid!=15745 AND region=? AND location LIKE 'OC%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC",{Columns=>{}},'SC');
  }
  elsif($region_code eq 'SCLA') {
    #$region_code = 'SC';
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where fmid!=15745 AND region=? AND location LIKE 'LA%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC",{Columns=>{}},'SC');
  }
  elsif($region_code eq 'SCSD') {
    #$region_code = 'SC';
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where fmid!=15745 AND region=? AND location LIKE 'SD%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC",{Columns=>{}},'SC');
  }
  elsif($region_code eq 'FLMIA') {
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where region=? AND city LIKE 'miami%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC",{Columns=>{}},'FL');
  }
  elsif($region_code eq 'FLFL') {
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where region=? AND location LIKE 'FTL%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC",{Columns=>{}},'FL');
  }
  elsif($region_code eq 'FLORL') {
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where region=? AND location LIKE 'ORL%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC",{Columns=>{}},'FL');
  }
  elsif($region_code eq 'NCCHA') {
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where region=? AND location LIKE 'CHAR%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC",{Columns=>{}},'NC');
  }
  elsif($region_code eq 'NCRA') {
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where region=? AND location LIKE 'RAL%' and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7) ORDER BY start_date DESC",{Columns=>{}},'NC');
  }

  elsif($region_code eq 'SG') { # Singapore
    $courses1 =  $dbh->selectall_arrayref("SELECT * from event_calendar where region='sg' AND TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=139 OR course_type_id=140 OR course_type_id=141 OR course_type_id=142 OR course_type_id=143) ORDER BY start_date DESC",{Columns=>{}});
    foreach my $course (@$courses1) {
      $course->{course_type_id} = $course->{course_type_id} - 136;
    }
  }


  my $courses = [ ];

  # fill course array with fast track courses if this is a fast track region code
  if ($region->{region_code} =~ m/FT$/) {  # i.e. 'SRFT' or 'DCFT'
    #allow only fasttrack courses
    foreach my $course (@$courses1) {
      if ($course->{call_time} =~ m/fast/i) {
        push(@$courses,$course);
      }
    }
  }

  # else fill with non fast-track courses
  else {
    #allow only non-fasttrack courses
    foreach my $course (@$courses1) {
      if ($course->{call_time} !~ m/fast/i) {
        push(@$courses,$course);
      }
    }
  }

  # iterator returns courses in order of itb, pro, bal, ful, fun, 
  # in reverse date order

  my %types = (
    fun => 3,
    ful => 4,
    bal => 5,
    pro => 6,
    itb => 7,
  );

  my $date                   = '2040-01-01 00:00:00'; # a date far in the future

  

  return Iterator { # return the farthest course of type "$type"
    my $type        = shift;  # $type will be one of fun, ful, bal, pro, itb  (synergy = itb)

    # if we are starting with 'itb', clear series flag
    if ($type eq 'itb'){
      $series_not_stand_alone = 0; # '1' indicates that this is not a standalone series. We determine this below when we have a course
      $preferred_call_time = '';   # 'weekend' or 'midweek'. This is determined below for certain regions like 'SR' and 'NY'
    }

    # exhausted test
    if ($type eq 'exhausted?') {
      if (@$courses){
        my @temp = map { [$_->{event},$_->{date}] } @$courses;
        ### courses not exhausted: @temp
        $date = '2040-01-01 00:00:00';
        return 0; # not empty
      }
      return 1; # empty
    }


    my $course;

### $type
### $series_not_stand_alone

    # match only non-standalone courses
    if ($series_not_stand_alone == 1) {

      if ($preferred_call_time eq 'weekend') {
        $course = extract($courses,
                          sub { # match type and make sure date is earlier
                          $_[0]->{course_type_id} == $types{$type}
                          and
                          ($_[0]->{call_time} =~ m/weekend/i || $_[0]->{call_time} !~ m/midweek/i)
                          and
                          $_[0]->{call_time} !~ m/alone/i
                          and
                          Date_Cmp( ParseDate($date),ParseDate($_[0]->{start_date}) )>0
                          }
                        );
        ### Found next weekend course
        ### $course
      } elsif ($preferred_call_time eq 'midweek') {
        $course = extract($courses,
                          sub { # match type and make sure date is earlier
                          $_[0]->{course_type_id} == $types{$type}
                          and
                          $_[0]->{call_time} =~ m/midweek/i
                          and
                          $_[0]->{call_time} !~ m/alone/i
                          and
                          Date_Cmp( ParseDate($date),ParseDate($_[0]->{start_date}) )>0
                          }
                        );
        ### Found next midweek course
        ### $course
      } else {
        $course = extract($courses,
                          sub { # match type and make sure date is earlier
                          $_[0]->{course_type_id} == $types{$type}
                          and
                          $_[0]->{call_time} !~ m/alone/i
                          and
                          Date_Cmp( ParseDate($date),ParseDate($_[0]->{start_date}) )>0
                          }
                        );
        ### non-standalone
      }
    } 

    # match any course
    else {
            $course = extract($courses,
                sub { # match type and make sure date is earlier
                  $_[0]->{course_type_id} == $types{$type}
                  and
                  Date_Cmp( ParseDate($date),ParseDate($_[0]->{start_date}) )>0
                }
              );
      ### any course found
    }


    if($course){

      # ### $course
      
      # mark this series as NOT stand alone
      if ($course->{call_time} !~ m/alone/msi) {
        $series_not_stand_alone = 1;
      }

      ### $series_not_stand_alone

      # BUSINESS RULE EXCEPTION = mark 'midweek' or 'weekend' for certain regions, but do not mark for fast track because
      # fast-track series usually have both midweek and weekend courses
      if ( $course->{call_time} !~ /fast/i && ( $course->{region} eq 'VAN' || $course->{region} eq 'SR' || $course->{region} eq 'DC' ||$course->{region} eq 'NY' || $course->{region} eq 'CGY' || $course->{region} eq 'MN' || $course->{region} eq 'TOR') ) {
        if ( $course->{day_of_week} eq 'Friday' || $course->{call_time} =~ m/weekend/i || $course->{call_time} eq '0'){
          $course->{weekend} = 1;
          $preferred_call_time = 'weekend'; 
        }
        else {
          $course->{midweek} = 1;
          $preferred_call_time = 'midweek';
        }
      }
      
      #$course->{start_date_formatted} =~ s/(...)([^ ]+)([ ].*)/$1$3/
       # if $course->{start_date_formatted} !~ m/May/i; # shorten January to Jan, etc.

      $date = $course->{start_date};

      

      # if course starts today and it is past 2PM Pacific time, then show completed
      my $pst_hour = UnixDate( Date_ConvTZ(ParseDate("now"), "", "PST"), "%H");
      if ( Date_Cmp( ParseDate($course->{start_date}), ParseDate("today") ) == 0 and $pst_hour >= 14) {
        $course->{start_date_formatted} = '<span style="text-decoration:line-through;">Completed</span>';
      }
      return $course;
    }
    elsif ($series_not_stand_alone) { # course is empty, most likely because it was in the past
      my $empty_course = { start_date_formatted => '<span style="text-decoration:line-through;">Completed</span>' };
      return $empty_course;
      # search archive table for previous dates that are now completed
      # get dates associated with Synergy (ITB) course
    }
    return undef;
  };
}

sub extract {
  my ($arrayref,$match) = @_;
  foreach (0..$#$arrayref) {
    #my $exclude = 0;
    #foreach my $fmid (@$excludes) {
    #  $exclude = 1 if ($arrayref->[$_]->{fmid} == $fmid); 
    #}
    if ( $match->($arrayref->[$_])) {
      return splice (@$arrayref,$_,1);
    }
  }
  return undef;
}

sub by_series_dates { # series sorter
  Date_Cmp(ParseDate($a->[4]->{start_date}),ParseDate($b->[4]->{start_date}))
  || Date_Cmp(ParseDate($a->[3]->{start_date}),ParseDate($b->[3]->{start_date}))
  || Date_Cmp(ParseDate($a->[2]->{start_date}),ParseDate($b->[2]->{start_date}))
  || Date_Cmp(ParseDate($a->[1]->{start_date}),ParseDate($b->[1]->{start_date}))
  || Date_Cmp(ParseDate($a->[0]->{start_date}),ParseDate($b->[0]->{start_date}))
}


sub region_course_count {
  my ($region) = @_;
  my ($count) = $dbh->selectrow_array('SELECT count(id) from event_calendar where region=? and TO_DAYS(start_date)-TO_DAYS(now())>= 0 and (course_type_id=3 OR course_type_id=4 OR course_type_id=5 OR course_type_id=6 OR course_type_id=7 OR course_type_id=139 OR course_type_id=140 OR course_type_id=141 OR course_type_id=142 OR course_type_id=143) ORDER BY start_date DESC',{Columns=>{}},$region->{region_code});
  ### region: $region
  ### count: $count
  return $count;
}


# course_series table functions

sub store_course_series {
  my($serial_number,@grid) = @_;

  # @grid is an array of array_refs

  foreach my $series (@grid) {
    my $series_is_fast_track = 0;
    my $series_region = '';
    my @course_id = ( );

    foreach my $course (@$series) {
      $series_region ||= $course->{region}; # if region blank, fill it
      if ( !$series_is_fast_track && $course->{event} =~ m/fast/i) { # if event name matches fast track, flag series
        $series_is_fast_track = 1;
      }
      $course_id[ $course->{course_type_id} ] = $course->{id}; # @course_id array is indexed by course_type_id, which is 3 through 7 for Fun through ITB
    }

    # create new course_series record
    $dbh->do('INSERT INTO course_series (serial_number,region,course1_id,course2_id,course3_id,course4_id,course5_id,is_fast_track,created) values (?,?,?,?,?,?,?,?,NOW())',undef,$serial_number,$series_region,$course_id[3],$course_id[4],$course_id[5],$course_id[6],$course_id[7],$series_is_fast_track)
  }

}

sub get_last_serial_number {
  my ($serial_number) = $dbh->selectrow_array('SELECT serial_number FROM course_series ORDER BY serial_number DESC',undef);
  return $serial_number || 555;
}

sub remove_old_course_series {
  my ($serial_number) = @_;
  if ($serial_number > 1) {
    $dbh->do('DELETE FROM course_series WHERE serial_number < ?',undef,$serial_number);
  }
}
__DATA__
