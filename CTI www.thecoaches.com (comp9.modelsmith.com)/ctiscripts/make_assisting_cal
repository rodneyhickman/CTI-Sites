#!/usr/bin/perl
# T. Beutel 12/23/2003
# Added Calgary U stuff 7/30/04

use Date::Manip;
use DBI;
use Data::Dumper;
use Sys::Hostname;
use strict;
use vars qw(%region_names);

print "Subject: cron: make_assisting_cal\n";

# The result of this 
my $HTML;
my $INDEX;

my $dbh;
$dbh = DBI->connect("DBI:mysql:CTIDATABASE",'cticoaches','');

# Get all Fun, Ful, Bal, Pro, and ITB events


my $sql = <<EOT ;
SELECT id,fmid,event,course_type_id,region,location,date,start_date,assistant_count,assistant_wait_count FROM event_calendar WHERE
  DATE_ADD(CURDATE(),INTERVAL 91 DAY) > `start_date`
  AND (
  course_type_id='3' OR
  course_type_id='4' OR
  course_type_id='5' OR
  course_type_id='6' OR
  course_type_id='7'
  )
EOT

my $events = $dbh->selectall_arrayref($sql, { Columns => {} });

# Special exception for Calgary U.

foreach my $event (@$events) {
  $event->{region} = 'CGY' if($event->{location} eq 'Calgary U');
  $event->{region} = 'LUWO' if($event->{location} eq 'UnivWOnt');
  $event->{region} = 'UCD' if($event->{location} eq 'UC Davis');
  $event->{region} = 'HIHN' if($event->{location} eq 'HON-HYATT');
  $event->{region} = 'HIKI' if($event->{location} =~ m/Kihei/i);
  $event->{region} = 'HIKO' if($event->{location} eq 'KON-SHER');
}

# Get all the regions being used in events

my %all_regions;
map { $all_regions{$_->{region}}++ } @$events;

# Get the region names by country

foreach my $country ('United States','Canada') {
  print "Country: $country\n";

  $INDEX .=<<EOT ;
<dl>
<dt>$country</dt>
EOT


  my $names = $dbh->selectall_arrayref('SELECT region_code,region_name from regions where country=?',{ Columns => {} },$country);
  if ($country eq 'United States') {
    push(@$names,{ region_code=>'HIHN', region_name=>'Honolulu, Hawaii' });
    push(@$names,{ region_code=>'HIKI', region_name=>'Kihei-Wailea, Hawaii' });
    push(@$names,{ region_code=>'HIKO', region_name=>'Kona, Hawaii' });
  }

  %region_names = map { $_->{region_code},$_->{region_name} } @$names;

  print Dumper \%region_names;

  # Get only this country's regions from the events' regions

  my %regions = map { $_,1 } grep { exists $region_names{$_} } keys %all_regions;

  print Dumper \%regions;

  # Do each region in sort order
  foreach my $region (sort by_name keys %regions) {

    print "Region: $region\n";

    # Get only this region's events using grep
    my @region_events =
      grep { $_->{region} eq $region } @$events;

    # skip region if unless it has events
    next unless @region_events;

    # Initial counts
    my $total_events  = scalar @region_events;
    my $placed_events = 0;

    print "Total events: $total_events\n";

    # $placed_events is the number of events 'placed' into the calendar. Once $placed_events == $total_events,
    # the calendar is complete for this region

    # map dates to delta days from jan 1, 2000
    foreach my $event (@region_events) {
      my $err;
      my $values = DateCalc(ParseDate('1/1/2000'),ParseDate($event->{date}),\$err);
      my ($weeks,$days) = $values =~ m/0:0:(\d+):(\d+)/;
      $event->{delta} = $weeks*7+$days;
      #print "$event->{date} $event->{course_type_id} $event->{delta}\n";
    }


    my @region_events_sorted = sort { $a->{delta} <=> $b->{delta} } @region_events;

    #  print Dumper @region_events_sorted if $region eq 'DC';


    my @region_series;
    while ($placed_events < $total_events) {

      # start a new series (i.e. a line in the calendar
      my $series = { };
      my $delta  = 9999;

      # fill the series starting from the right (i.e. In The Bones)
      foreach my $type (7,6,5,4,3) {
	my @events = grep { $_->{course_type_id} == $type and not $_->{placed} } @region_events_sorted;

	# Get the closest earlier event
	my ($closest_earlier_event) =
	  reverse
	    sort { $a->{delta} <=> $b->{delta} }
	      grep { $_->{delta} < $delta } @events;



	# if there was one, put the date in the series
	if ($closest_earlier_event) {
	  $series->{$type} = { date  => $closest_earlier_event->{date},
			       delta => $closest_earlier_event->{delta},
			       # mark the color red if the location says -HOLD
			       decoration => 
			       ( $closest_earlier_event->{assistant_count} > 1 
				 and $closest_earlier_event->{assistant_wait_count} > 3 ) ? 'line-through' : 'none',
			     };
	  $delta = $closest_earlier_event->{delta};
	  $closest_earlier_event->{placed}++;
	  $placed_events++;
	}
      }

      push(@region_series,$series);

    }

    #print Dumper \@region_series  if($region eq 'SR');
    # create some HTML


    $INDEX .=<<EOT ;
<dd><a href="#$region">$region_names{$region}</a></dd>
EOT

    # Now store the calendar for this city code.
    $HTML .=<<EOT ;
<!------------------------------------------------------>
<p><a name="$region"></a></p>
<h3>$region_names{$region}</h3>
EOT

    # Make an exception for certain sites like Calgary University

    # if($region eq 'CLG'){
    #   $HTML .=<<EOT ;
    # <br><br>CTI Courses in Calgary are offered by the University of Calgary.  If you are interested in registering, please call the university directly at 403-220-2877 or <a href="http://www.cted.ucalgary.ca/professionaldesignations/programs/coaching.html">click here to enroll</a> through the University's website.   Pricing is in Canadian dollars and may vary from CTI prices.
    # EOT
    # } 

    # elsif($region eq 'LUWO'){
    #   $HTML .= q{
    # <br><br>The following CTI Courses are offered by the University of Western Ontario.  If you are interested in registering, please call the university directly at (519) 661-3658 or <a href="http://www.uwo.ca/cstudies/">click here to enroll</a> through the University's website.   Pricing is in Canadian dollars and may vary from CTI prices.
    # };
    # } 

    # elsif($region eq 'UCD'){
    #   $HTML .= q{
    # <br><br>
    # The following CTI Courses are offered by the University of California, Davis.  If you are interested in registering, please call the university directly at 1-800-752-0881 or <a href="http://www.extension.ucdavis.edu/courses/courselisting.asp?unit=BM2&prgList=COA&coursearea=Coaching">click here to enroll</a> through the University's website.   Pricing may vary from CTI prices.
    # };
    #'
    # }

    #else { 
    #  $HTML .=<<EOT ;
    #<a href="/info/assisting-form.html" class="text">Register to Assist</a>
    #EOT
    #}

    $HTML .=<<EOT ;
<table width="525" class="course">
<tr class="color">
<td width="19%" valign="top" >
<center>
<b>Fundamentals</b><br>
</center>
</td>
<td width="20%" valign="top" >
<center>
<b>Fulfillment</b><br>
</center>
</td>
<td width="20%" valign="top" >
<center>
<b>Balance</b><br>
</center>
</td>
<td width="20%" valign="top" >
<center>
<b>Process</b><br>
</center>
</td>
<td width="20%" valign="top" >
<center>
<b>Synergy</b><br>
</center>
  </td>
  </tr>
EOT

    foreach my $series (sort using_special_magic @region_series) {
      $HTML .= "<tr>\n";
      foreach my $cell (3,4,5,6,7) {
        $series->{$cell}{decoration} ||= 'none';
        $HTML .=<<EOT ;
<td valign="top" width="19%" align="center"><span style="text-decoration:$series->{$cell}{decoration}">$series->{$cell}{date}</span></td>
EOT
      }
      $HTML .= "</tr>\n";
    }
    $HTML .= "</table>\n\n\n";
  }
$INDEX .= "</dl>\n";
}

  print "Saving HTML code in calendar_cache...\n";

# store the INDEX and HTML
my $sth = $dbh->prepare('UPDATE calendar_cache set idx=?, html=?, created=now() where id=3');
$sth->execute($INDEX,$HTML);

print "Done.\n";

exit;

# the using_special_magic subroutine sorts series by looking at all the dates in the series
sub using_special_magic {
  $a->{3}{delta} <=> $b->{3}{delta} ||
    $a->{4}{delta} <=> $b->{4}{delta} ||
      $a->{5}{delta} <=> $b->{5}{delta} ||
	$a->{6}{delta} <=> $b->{6}{delta} ||
	  $a->{7}{delta} <=> $b->{7}{delta}
	}


# by_name sorts by region name
sub by_name { $region_names{$a} cmp $region_names{$b} }
