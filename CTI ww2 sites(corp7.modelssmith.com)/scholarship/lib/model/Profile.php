<?php

require 'lib/model/om/BaseProfile.php';


/**
 * Skeleton subclass for representing a row from the 'profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Mar  7 23:14:52 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Profile extends BaseProfile {

  public function getName(){
    return $this->getFirstName() . ' ' . $this->getLastName();
  }

  public function getIdentifier(){
    return $this->getId() . '-' . $this->getFirstName() . '-' . $this->getLastName();
  }

// ======================== Password Change ========================

  public function newResetKey(){
    $key = commonTools::randomKey();
    $this->setSecret( $key );
    $this->save();
    return $key;
  }

  public function resetKeyMatches( $key ){
    if( $this->getSecret() != '' && $key == $this->getSecret() ){
      $this->setSecret(''); // key is only allowed to be used once, so erase it
      $this->save();
      return true;
    }
    else {
      return false;
    }
  }



  public function setNewPassword( $password ){

    // URL encode password
    $password = urlencode( $password );

    // curl to webcomp (timeout 10 secs)
    $ch = curl_init();

    $baseurl  = sfConfig::get('app_webcomp_baseurl');
    $postkey  = sfConfig::get('app_webcomp_postkey2');
    $endpoint = sfConfig::get('app_webcomp_newpw');

    $url = $baseurl.'/'.$endpoint.'?postkey='.$postkey.'&em='.$this->getEmail1().'&pw='.$password;

    //set the url, number of POST vars, POST data
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);  // timeout after 10 seconds

    //execute post
    $result   = curl_exec($ch);    
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); 
    
    if($httpCode == 200){
      // $result is JSON
      // if result = ok, then update transaction status in org record 
     
      if($result == 'ok'){
        // transaction status = "complete"
        //$msg = 'ok';
        $this->newCommlogEntry("Changed password via Executive Coach Form");
      }
      else {
        //$msg = 'failed';
      }
    }
    
    //close connection
    curl_close($ch);

  }

  // ======= COMMLOG =======

  public function newCommlogEntry( $message ){

    // URL encode message
    $message = urlencode( $message." at ".date("H:i:s")." ET" );

    // curl to webcomp (timeout 10 secs)
    $ch = curl_init();

    $baseurl  = sfConfig::get('app_webcomp_baseurl');
    $postkey  = sfConfig::get('app_webcomp_postkey');
    $endpoint = sfConfig::get('app_webcomp_commlog');

    $url = $baseurl.'/'.$endpoint.'?postkey='.$postkey.'&em='.$this->getEmail1().'&m='.$message;

    //set the url, number of POST vars, POST data
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_TIMEOUT, 10);  // timeout after 10 seconds

    //execute post
    $json     = curl_exec($ch);    
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); 
    
    if($httpCode == 200){
      // $result is JSON
      // if result = ok, then update transaction status in org record 
      $result = json_decode( $json );
      if(isset($result->{'result'}) && $result->{'result'} == 'ok'){
        // transaction status = "complete"
        //$msg = 'ok';
      }
      else {
        //$msg = 'failed';
      }
    }
    
    //close connection
    curl_close($ch);


  }


// ======================== Leader Selection Stuff ========================

public function getLeaderSelectionArray() {
    // create an associate array that maps table fields to diet fields
    $fields = array (
      'Last Name'     => 'Profile:LastName',
      'First Name'    => 'Profile:FirstName',
      'Address1'      => 'Profile:PermAddress1',
      'Address2'      => 'Profile:PermAddress2',
      'City/Town'          => 'Profile:PermCity',
      'State/Prov'         => 'Profile:PermStateProv',
      'Zip Code'      => 'Profile:PermZipPostcode',
      'Country'       => 'Profile:PermCountry',
      'Email Address' => 'Profile:Email1',
      'Home Phone'    => 'Profile:Telephone1',
      'Mobile'        => 'Profile:Telephone2',

      'Office Phone' => 'Leaders:PhoneOffice',
      'Time zone' => 'Leaders:TimeZone',
      'Skype' => 'Leaders:Skype',
      'Education history – both traditional and non-traditional' => 'Leaders:EducationHistory',
      'Credentials - coaching, education, ICF, etc.' => 'Leaders:Credentials',
      'Attach an editable resume' => 'Leaders:Resume',
      'Attach a current photo - must be less than 1MB (1 megabyte) in size' => 'Leaders:Photo',
      'Language fluency (fluency only)' => 'Leaders:LanguageFluency',
      'CTI Leadership Tribe name and year completed' => 'Leaders:LeadershipTribe',
      'Assisted a CTI Leadership Tribe' => 'Leaders:AssistedInTribe',
      'If yes, tribe name' => 'Leaders:TribeName',
      'Leading experience' => 'Leaders:LeadingExperience',
      'Sales/enrollment skill/experience – (we want charismatic leaders with evocative leadership skills)' => 'Leaders:EnrollmentExperience',
      'Leadership leader recommendation letter' => 'Leaders:LeaderRecommendation',
      'Why do you want to lead leadership for CTI?' => 'Leaders:WhyWantToLead',
      'What is your life purpose and how are you expressing that in the world?' => 'Leaders:LifePurpose',
      'On a related note, write about a recent Quest that you have been involved with and its impact in the world' => 'Leaders:Quest',
      'I have read and understand this application and all information and attachments are true and correct. (please insert your initials).' => 'Leaders:Initials'

    );

    $array = $this->arrayFromFieldArray( $fields );
    return $array;
}




// ======================== Exec Coach Stuff ========================

  public function getExeccoachArray() {
    // create an associate array that maps table fields to diet fields
    $fields = array (
      'Last Name'     => 'Profile:LastName',
      'First Name'    => 'Profile:FirstName',
      'Address1'      => 'Profile:PermAddress1',
      'Address2'      => 'Profile:PermAddress2',
      'City/Town'          => 'Profile:PermCity',
      'State/Prov'         => 'Profile:PermStateProv',
      'Zip Code'      => 'Profile:PermZipPostcode',
      'Country'       => 'Profile:PermCountry',
      'Email Address' => 'Profile:Email1',
      'Home Phone'    => 'Profile:Telephone1',
      'Office Phone'  => 'Execcoach:PhoneOffice',
      'Mobile'        => 'Profile:Telephone2',
      'Skype'         => 'Execcoach:Skype',

      'Bio^Resume, ask for latest bio^resume, Include brief personal summary, professional background (company, years worked, title, brief description of role and accomplishments)' => 'Execcoach:BioResume',
      'Photo- ask for latest photo, preferably color, corporate head shot' => 'Execcoach:Photo',
      'Faculty only: Year began working with CTI'                           => 'Execcoach:HomeCountry',
      'Time zone'                                        => 'Execcoach:TimeZone',
      'Native Language'                  => 'Execcoach:LanguageFluency',
      'Other Language Fluency'                  => 'Execcoach:OtherLanguageFluency',
      'Education'                                        => 'Execcoach:Education',
      'Certifications- ICF, CTI, assessment tools, etc.' => 'Execcoach:Certifications',
      'Certification Expectations' => 'Execcoach:ExpectedCertification',
      'Authorized to work in which countries'            => 'Execcoach:AuthorizedToWork',
      'Number of years working with CTI'                 => 'Execcoach:YearsCti',
      'In what capacity'                                 => 'Execcoach:WhatCapacity',
      'Other brokering'                                 => 'Execcoach:OtherBrokering',
      'Corporate clients (company name only, up to 10)'  => 'Execcoach:CorporateClients',
      'Coaching^Training style, philosophy'              => 'Execcoach:TrainingStyle',
      'Publications? Articles? White papers? Workshops developed? Speaking engagements? Awards?' => 'Execcoach:PublicationEngagements ',
      'Areas of expertise^specialty'                                => 'Execcoach:Expertise',
      'Preferred industry sectors and industry sector experience'  => 'Execcoach:Industries',
      'Been a corporate employee'  => 'Execcoach:CorporateEmployee',
      'Types of coaching and training engagements^sample projects'  => 'Execcoach:TypesOfCoaching',
      'Number of executives coached (VP & up). Any C-suite?'        => 'Execcoach:NumberOfExecutives',
      'Have you actually been an executive in a company at the SVP, EVP, C-suite or Board level?' => 'Execcoach:BeenAnExecutive',
      'Measurable outcomes tracked?'                                => 'Execcoach:OutcomesTracked',
      'Work visa (which countries)'                                 => 'Execcoach:WorkVisa',
      'Travel visa (which countries)'                               => 'Execcoach:TravelVisa',
      'Media exposure (tv, radio, on-camera training videos, etc.)' => 'Execcoach:MediaExposure',
      'Size of group comfortable presenting to: (under 30, 31-75, 76-150, 151-300, 300plus)' => 'Execcoach:SizeOfGroup',
      'Endorsements (from senior-level coachees, from speaking engagements, from corporate clients re their ability as a corporate FORL)' => 'Execcoach:Endorsements',
      'Provide a half page written critique' => 'Execcoach:Critique',
      'Where the person would best be utilized? 1. Corporate FORL' => 'Execcoach:UtilizationCorpForl',
      '2. Corporate Coach' => 'Execcoach:UtilizationCorpCoach',
      '3. Corporate Executive Coach' => 'Execcoach:UtilizationExecCoach'

    );

    $array = $this->arrayFromFieldArray( $fields );
    $array['Size of group comfortable presenting to: (under 30, 31-75, 76-150, 151-300, 300plus)'] 
      = "Range: ".$array['Size of group comfortable presenting to: (under 30, 31-75, 76-150, 151-300, 300plus)'];
    return $array;
}





public function getLeadershipArray() {
    // create an associate array that maps table fields to diet fields
    $fields = array (
      'First Name' => 'Profile:FirstName',
      'Last Name' => 'Profile:LastName',
      'Perm Address1'      => 'Profile:PermAddress1',
      'Perm Address2'      => 'Profile:PermAddress2',
      'Perm City'          => 'Profile:PermCity',
      'Perm State'         => 'Profile:PermStateProv',
      'Perm Zip Code'      => 'Profile:PermZipPostcode',
      'Perm Country'       => 'Profile:PermCountry',
      'Other Address1'      => 'Profile:OtherAddress1',
      'Other Address2'      => 'Profile:OtherAddress2',
      'Other City'          => 'Profile:OtherCity',
      'Other State'         => 'Profile:OtherStateProv',
      'Other Zip Code'      => 'Profile:OtherZipPostcode',
      'Other Country'       => 'Profile:OtherCountry',
      'Email Address' => 'Profile:Email1',
      'Phone' => 'Profile:Telephone1',
      'Mobile' => 'Profile:Telephone2',
      'I was referred to the scholarship program by' => 'Profile:ReferredBy',

      'Program Preference' => 'Leadership:ProgramPreference',

      'Preferred Program Date, 1st Choice' => 'Leadership:PreferredDate1',
      'Preferred Program Date, 2nd Choice' => 'Leadership:PreferredDate2',
      'Preferred Program Date, 3rd Choice' => 'Leadership:PreferredDate3',
      'How did you get started with CTI?  What inspired you to take CTI programs?' => 'Leadership:HowStarted',
      'What impact has your training with CTI had on you?' => 'Leadership:WhatImpact',
      'Why do you want to take the leadership program?' => 'Leadership:WhyTake',
      'Whats your desired impact in the world? What would you do in the world with the training you received?' => 'Leadership:DesiredImpact',
      'How will you be accountable for your impact in the world after you complete the program?  How will you report that back to CTI?' => 'Leadership:HowAccountable',
      'What will you bring to the program?' => 'Leadership:WhatBring',
      'Why are you applying for the scholarship?' => 'Leadership:WhyApplying',
      'We want you to have some investment in the program. What size scholarship do you need to make this program possible for you or what percentage discount do you need?' => 'Leadership:WhatSize',
      'Please tell us about your background and-or attach a resume with your application.' => 'Leadership:Background',
      'I have read and understood the Agreements (please insert your initials).' => 'Leadership:UnderstoodAgreements'

      
    );

    $array = $this->arrayFromFieldArray( $fields );
    return $array;
}


public function getCoachTrainingArray() {
    // create an associate array that maps table fields to diet fields
    $fields = array (
      'First Name'    => 'Profile:FirstName',
      'Last Name'     => 'Profile:LastName',
      'Perm Address1'      => 'Profile:PermAddress1',
      'Perm Address2'      => 'Profile:PermAddress2',
      'Perm City'          => 'Profile:PermCity',
      'Perm State'         => 'Profile:PermStateProv',
      'Perm Zip Code'      => 'Profile:PermZipPostcode',
      'Perm Country'       => 'Profile:PermCountry',
      'Other Address1'      => 'Profile:OtherAddress1',
      'Other Address2'      => 'Profile:OtherAddress2',
      'Other City'          => 'Profile:OtherCity',
      'Other State'         => 'Profile:OtherStateProv',
      'Other Zip Code'      => 'Profile:OtherZipPostcode',
      'Other Country'       => 'Profile:OtherCountry',
      'Email Address' => 'Profile:Email1',
      'Phone'         => 'Profile:Telephone1',
      'Mobile'        => 'Profile:Telephone2',
      'I was referred to the scholarship program by' => 'Profile:ReferredBy',

      'Program Preference' => 'Coachtraining:ProgramPreference',

      'Core Curriculum course location and date, 1st Choice' => 'Coachtraining:CorePreferredDate1',
      'Core Curriculum course location and date, 2nd Choice' => 'Coachtraining:CorePreferredDate2',
      'Core Curriculum course location and date, 3rd Choice' => 'Coachtraining:CorePreferredDate3',
      'Certification Program start month, 1st Choice' => 'Coachtraining:CertPreferredDate1',
      'Certification Program start month, 2nd Choice' => 'Coachtraining:CertPreferredDate2',
      'Certification Program start month, 3rd Choice' => 'Coachtraining:CertPreferredDate3',
      'What had you choose CTI\'s Coach Training Program?' => 'Coachtraining:WhatChoose',
      'Tell us about your Co-Active Coaching Fundamentals course experience.' => 'Coachtraining:FundamentalsExp',
      'What\'s your vision for becoming a Co-Active Coach? What\'s the impact you want to have in the world?' => 'Coachtraining:YourVision',
      'How will CTI training support you in creating your vision?' => 'Coachtraining:HowSupport',
      'Why are you applying for the scholarship?' => 'Coachtraining:WhyApplying',
      'We want you to have some investment in the program. What size scholarship do you need to make this program possible for you or what percentage discount do you need?' => 'Coachtraining:WhatSize',
      'Please tell us about your background and' => 'Coachtraining:Background',
      'Is there anything else you want us to know about you?' => 'Coachtraining:AnythingElse',
      'I have read and understood the Agreements (please insert your initials)' => 'Coachtraining:UnderstoodAgreements'

    );

    $array = $this->arrayFromFieldArray( $fields );
    return $array;
}




 public function arrayFromFieldArray( $fields ){
    $array = array( );

    // open related records
    $c = new Criteria();
    $c->add(LeadershipPeer::PROFILE_ID, $this->getId());
    $lead = LeadershipPeer::doSelectOne( $c );

    $c = new Criteria();
    $c->add(CoachtrainingPeer::PROFILE_ID, $this->getId());
    $coach = CoachtrainingPeer::doSelectOne( $c );

    $c = new Criteria();
    $c->add(ExeccoachPeer::PROFILE_ID, $this->getId());
    $exec = ExeccoachPeer::doSelectOne( $c );

    $c = new Criteria();
    $c->add(LeadersPeer::PROFILE_ID, $this->getId());
    $leaders = LeadersPeer::doSelectOne( $c );


    foreach($fields as $field => $value){
      $text = '';
      preg_match('/(.*?):(.*)/',$value,$matches);
      $table = $matches[1];
      $table_field = $matches[2];
      if($table == 'text'){
        $text = $table_field;
      }
      if($table == 'Profile'){
        eval("\$text = \$this->get".$table_field."();");
      }
      if($table == 'Leadership'){
        if(isset($lead)){
          eval("\$text = \$lead->get".$table_field."();");
        }
      }
      if($table == 'Coachtraining'){
        if(isset($coach)){
          eval("\$text = \$coach->get".$table_field."();");
        }
      }
      if($table == 'Execcoach'){
        if(isset($exec)){
          eval("\$text = \$exec->get".$table_field."();");
        }
      }
      if($table == 'Leaders'){
        if(isset($leaders)){
          eval("\$text = \$leaders->get".$table_field."();");
        }
      }
      $text = preg_replace('/\"/','""',$text); // escape double quote ( " --> "" )
      $text = preg_replace("/[\n\r]/",' ',$text); // convert newlines to spaces
      $text = preg_replace('/[^(\x20-\x7F)]*/','', $text); // remove all non-ascii chars
      $array[$field] = $text;
    }
    return $array;
  }


 public function getAnnualQuestionnaireArray() {
    // create an associate array that maps table fields to diet fields
    $fields = array (
      'Last Name' => 'Profile:LastName',
      'First Name' => 'Profile:FirstName',
      'Tribe First Choice' => 'AnnualQuestionnaire:TribeFirstChoice',
      'Tribe Second Choice' => 'AnnualQuestionnaire:TribeSecondChoice',
      'I AM Type' => 'AnnualQuestionnaire:IAmType', 
      'Your Tribe Name' => 'AnnualQuestionnaire:YourTribeName',
      'Your Tribe Leader 1' => 'AnnualQuestionnaire:YourTribeLeader1',
      'Your Tribe Leader 2' => 'AnnualQuestionnaire:YourTribeLeader2',
      'Anything else you\'d like us to know?' => 'AnnualQuestionnaire:AnythingElse',
      'Contact Telephone' => 'AnnualQuestionnaire:ContactTelephone',
      'Contact Email' => 'AnnualQuestionnaire:ContactEmail',
    );

    $array = $this->arrayFromFieldArray( $fields );
    return $array;
  }

 public function getFORLArray( $mode = '' ) {
   $flexform_submission = FlexformSubmissionPeer::getMostRecentFORL( $this->getId() );
   $array =  $flexform_submission->exportAnswerArray( $mode );
   return $array;
 }

 public function getProfileId() { // courtesy method
   return $this->getId();
 }

 public function hasLeadershipApp(){
   $c = new Criteria();
   $c->add(LeadershipPeer::PROFILE_ID, $this->getId() );
   $app = LeadershipPeer::doSelectOne( $c );
   
   if(isset($app)){
     return true;
   }
   return false;
 }
 
 public function getLeadershipApp(){
   $c = new Criteria();
   $c->add(LeadershipPeer::PROFILE_ID, $this->getId() );
   $app = LeadershipPeer::doSelectOne( $c );

   return $app;
 }

 public function hasCoachTrainingApp(){
   $c = new Criteria();
   $c->add(CoachtrainingPeer::PROFILE_ID, $this->getId() );
   $app = CoachtrainingPeer::doSelectOne( $c );
   
   if(isset($app)){
     return true;
   }
   return false;
 }
 
 public function getCoachTrainingApp(){
   $c = new Criteria();
   $c->add(CoachtrainingPeer::PROFILE_ID, $this->getId() );
   $app = CoachtrainingPeer::doSelectOne( $c );

   return $app;
 }
 
 public function hasExeccoachApp(){
   $c = new Criteria();
   $c->add(ExeccoachPeer::PROFILE_ID, $this->getId() );
   $app = ExeccoachPeer::doSelectOne( $c );
   
   if(isset($app)){
     return true;
   }
   return false;

 }


public function getFORLResume(){
   $flexform_submission = FlexformSubmissionPeer::getMostRecentFORL( $this->getId() );
   if(isset($flexform_submission)){
     return $flexform_submission->getBioResume(); // returns filename
   }
   return '';
 }

 public function getFORLPhoto() {
   $flexform_submission = FlexformSubmissionPeer::getMostRecentFORL( $this->getId() );
   if(isset($flexform_submission)){
     return $flexform_submission->getPhoto(); 
   }
   return '';
 }


 public function getResume(){
   $c = new Criteria();
   $c->add(ExeccoachPeer::PROFILE_ID, $this->getId() );
   $app = ExeccoachPeer::doSelectOne( $c );
   if(isset($app)){
     return $app->getBioResume(); // returns either text or filename
   }
   return '';
 }

 public function getExecPhoto() {
   $c = new Criteria();
   $c->add(ExeccoachPeer::PROFILE_ID, $this->getId() );
   $app = ExeccoachPeer::doSelectOne( $c );
   if(isset($app)){
     return $app->getPhoto(); 
   }
   return '';
 }
 public function getExecPhotoUrl() {
   $c = new Criteria();
   $c->add(ExeccoachPeer::PROFILE_ID, $this->getId() );
   $app = ExeccoachPeer::doSelectOne( $c );
   if(isset($app)){
     return '/exec/uploads/'.$app->getPhoto(); 
   }
   return '';
 }

 public function getSelectionPhotoUrl() {
   $c = new Criteria();
   $c->add(LeadersPeer::PROFILE_ID, $this->getId() );
   $app = LeadersPeer::doSelectOne( $c );
   if(isset($app)){
     return '/exec/uploads/'.$app->getPhoto(); 
   }
   return '';
 }



 public function hasLeadershipResume() {

   $c = new Criteria();
   $c->add(LeadershipPeer::PROFILE_ID, $this->getId() );
   $app = LeadershipPeer::doSelectOne( $c );
   
   if(isset($app)){
     if($app->getBioResume() != ''){
       return true;
     }
   }
   return false;
 }

 public function getLeadershipResume(){
   $c = new Criteria();
   $c->add(LeadershipPeer::PROFILE_ID, $this->getId() );
   $app = LeadershipPeer::doSelectOne( $c );
   if(isset($app)){
     return $app->getBioResume(); // returns  filename
   }
   return '';
 }

 public function hasCoachTrainingResume() {

   $c = new Criteria();
   $c->add(CoachtrainingPeer::PROFILE_ID, $this->getId() );
   $app = CoachtrainingPeer::doSelectOne( $c );
   
   if(isset($app)){
     if($app->getBioResume() != ''){
       return true;
     }
   }
   return false;
 }
 public function getCoachTrainingResume(){
   $c = new Criteria();
   $c->add(CoachtrainingPeer::PROFILE_ID, $this->getId() );
   $app = CoachtrainingPeer::doSelectOne( $c );
   if(isset($app)){
     return $app->getBioResume(); // returns  filename
   }
   return '';
 }

 public function getLeaderSelectionResume(){
   $c = new Criteria();
   $c->add(LeadersPeer::PROFILE_ID, $this->getId() );
   $app = LeadersPeer::doSelectOne( $c );
   if(isset($app)){
     return $app->getResume(); // returns  filename
   }
   return '';
 }

 public function getLeaderSelectionRecommendation(){
   $c = new Criteria();
   $c->add(LeadersPeer::PROFILE_ID, $this->getId() );
   $app = LeadersPeer::doSelectOne( $c );
   if(isset($app)){
     return $app->getLeaderRecommendation(); // returns  filename
   }
   return '';
 }



 public function hasLeaderSelectionApp(){
   $c = new Criteria();
   $c->add(LeadersPeer::PROFILE_ID, $this->getId() );
   $app = LeadersPeer::doSelectOne( $c );
   
   if(isset($app)){
     return true;
   }
   return false;
 }

 public function hasLeaderSelectionResume(){
   $c = new Criteria();
   $c->add(LeadersPeer::PROFILE_ID, $this->getId() );
   $app = LeadersPeer::doSelectOne( $c );
   
   if(isset($app)){
     if($app->getResume() != ''){
       return true;
     }
   }
   return false;
 }

 public function hasLeaderSelectionRecommendation(){
   $c = new Criteria();
   $c->add(LeadersPeer::PROFILE_ID, $this->getId() );
   $app = LeadersPeer::doSelectOne( $c );
   
   if(isset($app)){
     if($app->getLeaderRecommendation() != ''){
       return true;
     }
   }
   return false;
 }





} // Profile
