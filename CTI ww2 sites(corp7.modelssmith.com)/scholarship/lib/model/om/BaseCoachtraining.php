<?php

/**
 * Base class that represents a row from the 'coachtraining' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu May 23 17:45:37 2013
 *
 * @package    lib.model.om
 */
abstract class BaseCoachtraining extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CoachtrainingPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the profile_id field.
	 * @var        int
	 */
	protected $profile_id;

	/**
	 * The value for the program_preference field.
	 * @var        string
	 */
	protected $program_preference;

	/**
	 * The value for the core_preferred_date1 field.
	 * @var        string
	 */
	protected $core_preferred_date1;

	/**
	 * The value for the core_preferred_date2 field.
	 * @var        string
	 */
	protected $core_preferred_date2;

	/**
	 * The value for the core_preferred_date3 field.
	 * @var        string
	 */
	protected $core_preferred_date3;

	/**
	 * The value for the cert_preferred_date1 field.
	 * @var        string
	 */
	protected $cert_preferred_date1;

	/**
	 * The value for the cert_preferred_date2 field.
	 * @var        string
	 */
	protected $cert_preferred_date2;

	/**
	 * The value for the cert_preferred_date3 field.
	 * @var        string
	 */
	protected $cert_preferred_date3;

	/**
	 * The value for the what_choose field.
	 * @var        string
	 */
	protected $what_choose;

	/**
	 * The value for the fundamentals_exp field.
	 * @var        string
	 */
	protected $fundamentals_exp;

	/**
	 * The value for the your_vision field.
	 * @var        string
	 */
	protected $your_vision;

	/**
	 * The value for the how_support field.
	 * @var        string
	 */
	protected $how_support;

	/**
	 * The value for the why_applying field.
	 * @var        string
	 */
	protected $why_applying;

	/**
	 * The value for the what_size field.
	 * @var        string
	 */
	protected $what_size;

	/**
	 * The value for the background field.
	 * @var        string
	 */
	protected $background;

	/**
	 * The value for the anything_else field.
	 * @var        string
	 */
	protected $anything_else;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the extra1 field.
	 * @var        string
	 */
	protected $extra1;

	/**
	 * The value for the extra2 field.
	 * @var        string
	 */
	protected $extra2;

	/**
	 * The value for the extra3 field.
	 * @var        string
	 */
	protected $extra3;

	/**
	 * The value for the extra4 field.
	 * @var        string
	 */
	protected $extra4;

	/**
	 * The value for the extra5 field.
	 * @var        string
	 */
	protected $extra5;

	/**
	 * The value for the extra6 field.
	 * @var        string
	 */
	protected $extra6;

	/**
	 * The value for the extra7 field.
	 * @var        string
	 */
	protected $extra7;

	/**
	 * The value for the extra8 field.
	 * @var        string
	 */
	protected $extra8;

	/**
	 * The value for the extra9 field.
	 * @var        string
	 */
	protected $extra9;

	/**
	 * The value for the extra10 field.
	 * @var        string
	 */
	protected $extra10;

	/**
	 * The value for the extra11 field.
	 * @var        string
	 */
	protected $extra11;

	/**
	 * The value for the extra12 field.
	 * @var        string
	 */
	protected $extra12;

	/**
	 * The value for the extra13 field.
	 * @var        string
	 */
	protected $extra13;

	/**
	 * The value for the extra14 field.
	 * @var        string
	 */
	protected $extra14;

	/**
	 * The value for the extra15 field.
	 * @var        string
	 */
	protected $extra15;

	/**
	 * The value for the extra16 field.
	 * @var        string
	 */
	protected $extra16;

	/**
	 * The value for the extra17 field.
	 * @var        string
	 */
	protected $extra17;

	/**
	 * The value for the extra18 field.
	 * @var        string
	 */
	protected $extra18;

	/**
	 * The value for the extra19 field.
	 * @var        string
	 */
	protected $extra19;

	/**
	 * The value for the extra20 field.
	 * @var        string
	 */
	protected $extra20;

	/**
	 * @var        Profile
	 */
	protected $aProfile;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CoachtrainingPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [profile_id] column value.
	 * 
	 * @return     int
	 */
	public function getProfileId()
	{
		return $this->profile_id;
	}

	/**
	 * Get the [program_preference] column value.
	 * 
	 * @return     string
	 */
	public function getProgramPreference()
	{
		return $this->program_preference;
	}

	/**
	 * Get the [core_preferred_date1] column value.
	 * 
	 * @return     string
	 */
	public function getCorePreferredDate1()
	{
		return $this->core_preferred_date1;
	}

	/**
	 * Get the [core_preferred_date2] column value.
	 * 
	 * @return     string
	 */
	public function getCorePreferredDate2()
	{
		return $this->core_preferred_date2;
	}

	/**
	 * Get the [core_preferred_date3] column value.
	 * 
	 * @return     string
	 */
	public function getCorePreferredDate3()
	{
		return $this->core_preferred_date3;
	}

	/**
	 * Get the [cert_preferred_date1] column value.
	 * 
	 * @return     string
	 */
	public function getCertPreferredDate1()
	{
		return $this->cert_preferred_date1;
	}

	/**
	 * Get the [cert_preferred_date2] column value.
	 * 
	 * @return     string
	 */
	public function getCertPreferredDate2()
	{
		return $this->cert_preferred_date2;
	}

	/**
	 * Get the [cert_preferred_date3] column value.
	 * 
	 * @return     string
	 */
	public function getCertPreferredDate3()
	{
		return $this->cert_preferred_date3;
	}

	/**
	 * Get the [what_choose] column value.
	 * 
	 * @return     string
	 */
	public function getWhatChoose()
	{
		return $this->what_choose;
	}

	/**
	 * Get the [fundamentals_exp] column value.
	 * 
	 * @return     string
	 */
	public function getFundamentalsExp()
	{
		return $this->fundamentals_exp;
	}

	/**
	 * Get the [your_vision] column value.
	 * 
	 * @return     string
	 */
	public function getYourVision()
	{
		return $this->your_vision;
	}

	/**
	 * Get the [how_support] column value.
	 * 
	 * @return     string
	 */
	public function getHowSupport()
	{
		return $this->how_support;
	}

	/**
	 * Get the [why_applying] column value.
	 * 
	 * @return     string
	 */
	public function getWhyApplying()
	{
		return $this->why_applying;
	}

	/**
	 * Get the [what_size] column value.
	 * 
	 * @return     string
	 */
	public function getWhatSize()
	{
		return $this->what_size;
	}

	/**
	 * Get the [background] column value.
	 * 
	 * @return     string
	 */
	public function getBackground()
	{
		return $this->background;
	}

	/**
	 * Get the [anything_else] column value.
	 * 
	 * @return     string
	 */
	public function getAnythingElse()
	{
		return $this->anything_else;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [extra1] column value.
	 * 
	 * @return     string
	 */
	public function getExtra1()
	{
		return $this->extra1;
	}

	/**
	 * Get the [extra2] column value.
	 * 
	 * @return     string
	 */
	public function getExtra2()
	{
		return $this->extra2;
	}

	/**
	 * Get the [extra3] column value.
	 * 
	 * @return     string
	 */
	public function getExtra3()
	{
		return $this->extra3;
	}

	/**
	 * Get the [extra4] column value.
	 * 
	 * @return     string
	 */
	public function getExtra4()
	{
		return $this->extra4;
	}

	/**
	 * Get the [extra5] column value.
	 * 
	 * @return     string
	 */
	public function getExtra5()
	{
		return $this->extra5;
	}

	/**
	 * Get the [extra6] column value.
	 * 
	 * @return     string
	 */
	public function getExtra6()
	{
		return $this->extra6;
	}

	/**
	 * Get the [extra7] column value.
	 * 
	 * @return     string
	 */
	public function getExtra7()
	{
		return $this->extra7;
	}

	/**
	 * Get the [extra8] column value.
	 * 
	 * @return     string
	 */
	public function getExtra8()
	{
		return $this->extra8;
	}

	/**
	 * Get the [extra9] column value.
	 * 
	 * @return     string
	 */
	public function getExtra9()
	{
		return $this->extra9;
	}

	/**
	 * Get the [extra10] column value.
	 * 
	 * @return     string
	 */
	public function getExtra10()
	{
		return $this->extra10;
	}

	/**
	 * Get the [extra11] column value.
	 * 
	 * @return     string
	 */
	public function getExtra11()
	{
		return $this->extra11;
	}

	/**
	 * Get the [extra12] column value.
	 * 
	 * @return     string
	 */
	public function getExtra12()
	{
		return $this->extra12;
	}

	/**
	 * Get the [extra13] column value.
	 * 
	 * @return     string
	 */
	public function getExtra13()
	{
		return $this->extra13;
	}

	/**
	 * Get the [extra14] column value.
	 * 
	 * @return     string
	 */
	public function getExtra14()
	{
		return $this->extra14;
	}

	/**
	 * Get the [extra15] column value.
	 * 
	 * @return     string
	 */
	public function getExtra15()
	{
		return $this->extra15;
	}

	/**
	 * Get the [extra16] column value.
	 * 
	 * @return     string
	 */
	public function getExtra16()
	{
		return $this->extra16;
	}

	/**
	 * Get the [extra17] column value.
	 * 
	 * @return     string
	 */
	public function getExtra17()
	{
		return $this->extra17;
	}

	/**
	 * Get the [extra18] column value.
	 * 
	 * @return     string
	 */
	public function getExtra18()
	{
		return $this->extra18;
	}

	/**
	 * Get the [extra19] column value.
	 * 
	 * @return     string
	 */
	public function getExtra19()
	{
		return $this->extra19;
	}

	/**
	 * Get the [extra20] column value.
	 * 
	 * @return     string
	 */
	public function getExtra20()
	{
		return $this->extra20;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [profile_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setProfileId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profile_id !== $v) {
			$this->profile_id = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::PROFILE_ID;
		}

		if ($this->aProfile !== null && $this->aProfile->getId() !== $v) {
			$this->aProfile = null;
		}

		return $this;
	} // setProfileId()

	/**
	 * Set the value of [program_preference] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setProgramPreference($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->program_preference !== $v) {
			$this->program_preference = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::PROGRAM_PREFERENCE;
		}

		return $this;
	} // setProgramPreference()

	/**
	 * Set the value of [core_preferred_date1] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setCorePreferredDate1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->core_preferred_date1 !== $v) {
			$this->core_preferred_date1 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::CORE_PREFERRED_DATE1;
		}

		return $this;
	} // setCorePreferredDate1()

	/**
	 * Set the value of [core_preferred_date2] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setCorePreferredDate2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->core_preferred_date2 !== $v) {
			$this->core_preferred_date2 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::CORE_PREFERRED_DATE2;
		}

		return $this;
	} // setCorePreferredDate2()

	/**
	 * Set the value of [core_preferred_date3] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setCorePreferredDate3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->core_preferred_date3 !== $v) {
			$this->core_preferred_date3 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::CORE_PREFERRED_DATE3;
		}

		return $this;
	} // setCorePreferredDate3()

	/**
	 * Set the value of [cert_preferred_date1] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setCertPreferredDate1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cert_preferred_date1 !== $v) {
			$this->cert_preferred_date1 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::CERT_PREFERRED_DATE1;
		}

		return $this;
	} // setCertPreferredDate1()

	/**
	 * Set the value of [cert_preferred_date2] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setCertPreferredDate2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cert_preferred_date2 !== $v) {
			$this->cert_preferred_date2 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::CERT_PREFERRED_DATE2;
		}

		return $this;
	} // setCertPreferredDate2()

	/**
	 * Set the value of [cert_preferred_date3] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setCertPreferredDate3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cert_preferred_date3 !== $v) {
			$this->cert_preferred_date3 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::CERT_PREFERRED_DATE3;
		}

		return $this;
	} // setCertPreferredDate3()

	/**
	 * Set the value of [what_choose] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setWhatChoose($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->what_choose !== $v) {
			$this->what_choose = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::WHAT_CHOOSE;
		}

		return $this;
	} // setWhatChoose()

	/**
	 * Set the value of [fundamentals_exp] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setFundamentalsExp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fundamentals_exp !== $v) {
			$this->fundamentals_exp = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::FUNDAMENTALS_EXP;
		}

		return $this;
	} // setFundamentalsExp()

	/**
	 * Set the value of [your_vision] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setYourVision($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->your_vision !== $v) {
			$this->your_vision = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::YOUR_VISION;
		}

		return $this;
	} // setYourVision()

	/**
	 * Set the value of [how_support] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setHowSupport($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->how_support !== $v) {
			$this->how_support = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::HOW_SUPPORT;
		}

		return $this;
	} // setHowSupport()

	/**
	 * Set the value of [why_applying] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setWhyApplying($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->why_applying !== $v) {
			$this->why_applying = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::WHY_APPLYING;
		}

		return $this;
	} // setWhyApplying()

	/**
	 * Set the value of [what_size] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setWhatSize($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->what_size !== $v) {
			$this->what_size = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::WHAT_SIZE;
		}

		return $this;
	} // setWhatSize()

	/**
	 * Set the value of [background] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setBackground($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->background !== $v) {
			$this->background = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::BACKGROUND;
		}

		return $this;
	} // setBackground()

	/**
	 * Set the value of [anything_else] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setAnythingElse($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->anything_else !== $v) {
			$this->anything_else = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::ANYTHING_ELSE;
		}

		return $this;
	} // setAnythingElse()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CoachtrainingPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CoachtrainingPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [extra1] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra1 !== $v) {
			$this->extra1 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA1;
		}

		return $this;
	} // setExtra1()

	/**
	 * Set the value of [extra2] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra2 !== $v) {
			$this->extra2 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA2;
		}

		return $this;
	} // setExtra2()

	/**
	 * Set the value of [extra3] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra3 !== $v) {
			$this->extra3 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA3;
		}

		return $this;
	} // setExtra3()

	/**
	 * Set the value of [extra4] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra4 !== $v) {
			$this->extra4 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA4;
		}

		return $this;
	} // setExtra4()

	/**
	 * Set the value of [extra5] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra5 !== $v) {
			$this->extra5 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA5;
		}

		return $this;
	} // setExtra5()

	/**
	 * Set the value of [extra6] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra6 !== $v) {
			$this->extra6 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA6;
		}

		return $this;
	} // setExtra6()

	/**
	 * Set the value of [extra7] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra7 !== $v) {
			$this->extra7 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA7;
		}

		return $this;
	} // setExtra7()

	/**
	 * Set the value of [extra8] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra8 !== $v) {
			$this->extra8 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA8;
		}

		return $this;
	} // setExtra8()

	/**
	 * Set the value of [extra9] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra9($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra9 !== $v) {
			$this->extra9 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA9;
		}

		return $this;
	} // setExtra9()

	/**
	 * Set the value of [extra10] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra10($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra10 !== $v) {
			$this->extra10 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA10;
		}

		return $this;
	} // setExtra10()

	/**
	 * Set the value of [extra11] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra11($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra11 !== $v) {
			$this->extra11 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA11;
		}

		return $this;
	} // setExtra11()

	/**
	 * Set the value of [extra12] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra12($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra12 !== $v) {
			$this->extra12 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA12;
		}

		return $this;
	} // setExtra12()

	/**
	 * Set the value of [extra13] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra13($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra13 !== $v) {
			$this->extra13 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA13;
		}

		return $this;
	} // setExtra13()

	/**
	 * Set the value of [extra14] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra14($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra14 !== $v) {
			$this->extra14 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA14;
		}

		return $this;
	} // setExtra14()

	/**
	 * Set the value of [extra15] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra15($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra15 !== $v) {
			$this->extra15 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA15;
		}

		return $this;
	} // setExtra15()

	/**
	 * Set the value of [extra16] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra16($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra16 !== $v) {
			$this->extra16 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA16;
		}

		return $this;
	} // setExtra16()

	/**
	 * Set the value of [extra17] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra17($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra17 !== $v) {
			$this->extra17 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA17;
		}

		return $this;
	} // setExtra17()

	/**
	 * Set the value of [extra18] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra18($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra18 !== $v) {
			$this->extra18 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA18;
		}

		return $this;
	} // setExtra18()

	/**
	 * Set the value of [extra19] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra19($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra19 !== $v) {
			$this->extra19 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA19;
		}

		return $this;
	} // setExtra19()

	/**
	 * Set the value of [extra20] column.
	 * 
	 * @param      string $v new value
	 * @return     Coachtraining The current object (for fluent API support)
	 */
	public function setExtra20($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra20 !== $v) {
			$this->extra20 = $v;
			$this->modifiedColumns[] = CoachtrainingPeer::EXTRA20;
		}

		return $this;
	} // setExtra20()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->profile_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->program_preference = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->core_preferred_date1 = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->core_preferred_date2 = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->core_preferred_date3 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->cert_preferred_date1 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->cert_preferred_date2 = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->cert_preferred_date3 = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->what_choose = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->fundamentals_exp = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->your_vision = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->how_support = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->why_applying = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->what_size = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->background = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->anything_else = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->created_at = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->updated_at = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->extra1 = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->extra2 = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->extra3 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->extra4 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->extra5 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->extra6 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->extra7 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->extra8 = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->extra9 = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->extra10 = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->extra11 = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->extra12 = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->extra13 = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->extra14 = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->extra15 = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->extra16 = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->extra17 = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->extra18 = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->extra19 = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->extra20 = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 39; // 39 = CoachtrainingPeer::NUM_COLUMNS - CoachtrainingPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Coachtraining object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProfile !== null && $this->profile_id !== $this->aProfile->getId()) {
			$this->aProfile = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CoachtrainingPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CoachtrainingPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProfile = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CoachtrainingPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCoachtraining:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				CoachtrainingPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCoachtraining:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CoachtrainingPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCoachtraining:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(CoachtrainingPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(CoachtrainingPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCoachtraining:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CoachtrainingPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfile !== null) {
				if ($this->aProfile->isModified() || $this->aProfile->isNew()) {
					$affectedRows += $this->aProfile->save($con);
				}
				$this->setProfile($this->aProfile);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CoachtrainingPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CoachtrainingPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CoachtrainingPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfile !== null) {
				if (!$this->aProfile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProfile->getValidationFailures());
				}
			}


			if (($retval = CoachtrainingPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CoachtrainingPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getProfileId();
				break;
			case 2:
				return $this->getProgramPreference();
				break;
			case 3:
				return $this->getCorePreferredDate1();
				break;
			case 4:
				return $this->getCorePreferredDate2();
				break;
			case 5:
				return $this->getCorePreferredDate3();
				break;
			case 6:
				return $this->getCertPreferredDate1();
				break;
			case 7:
				return $this->getCertPreferredDate2();
				break;
			case 8:
				return $this->getCertPreferredDate3();
				break;
			case 9:
				return $this->getWhatChoose();
				break;
			case 10:
				return $this->getFundamentalsExp();
				break;
			case 11:
				return $this->getYourVision();
				break;
			case 12:
				return $this->getHowSupport();
				break;
			case 13:
				return $this->getWhyApplying();
				break;
			case 14:
				return $this->getWhatSize();
				break;
			case 15:
				return $this->getBackground();
				break;
			case 16:
				return $this->getAnythingElse();
				break;
			case 17:
				return $this->getCreatedAt();
				break;
			case 18:
				return $this->getUpdatedAt();
				break;
			case 19:
				return $this->getExtra1();
				break;
			case 20:
				return $this->getExtra2();
				break;
			case 21:
				return $this->getExtra3();
				break;
			case 22:
				return $this->getExtra4();
				break;
			case 23:
				return $this->getExtra5();
				break;
			case 24:
				return $this->getExtra6();
				break;
			case 25:
				return $this->getExtra7();
				break;
			case 26:
				return $this->getExtra8();
				break;
			case 27:
				return $this->getExtra9();
				break;
			case 28:
				return $this->getExtra10();
				break;
			case 29:
				return $this->getExtra11();
				break;
			case 30:
				return $this->getExtra12();
				break;
			case 31:
				return $this->getExtra13();
				break;
			case 32:
				return $this->getExtra14();
				break;
			case 33:
				return $this->getExtra15();
				break;
			case 34:
				return $this->getExtra16();
				break;
			case 35:
				return $this->getExtra17();
				break;
			case 36:
				return $this->getExtra18();
				break;
			case 37:
				return $this->getExtra19();
				break;
			case 38:
				return $this->getExtra20();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CoachtrainingPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getProfileId(),
			$keys[2] => $this->getProgramPreference(),
			$keys[3] => $this->getCorePreferredDate1(),
			$keys[4] => $this->getCorePreferredDate2(),
			$keys[5] => $this->getCorePreferredDate3(),
			$keys[6] => $this->getCertPreferredDate1(),
			$keys[7] => $this->getCertPreferredDate2(),
			$keys[8] => $this->getCertPreferredDate3(),
			$keys[9] => $this->getWhatChoose(),
			$keys[10] => $this->getFundamentalsExp(),
			$keys[11] => $this->getYourVision(),
			$keys[12] => $this->getHowSupport(),
			$keys[13] => $this->getWhyApplying(),
			$keys[14] => $this->getWhatSize(),
			$keys[15] => $this->getBackground(),
			$keys[16] => $this->getAnythingElse(),
			$keys[17] => $this->getCreatedAt(),
			$keys[18] => $this->getUpdatedAt(),
			$keys[19] => $this->getExtra1(),
			$keys[20] => $this->getExtra2(),
			$keys[21] => $this->getExtra3(),
			$keys[22] => $this->getExtra4(),
			$keys[23] => $this->getExtra5(),
			$keys[24] => $this->getExtra6(),
			$keys[25] => $this->getExtra7(),
			$keys[26] => $this->getExtra8(),
			$keys[27] => $this->getExtra9(),
			$keys[28] => $this->getExtra10(),
			$keys[29] => $this->getExtra11(),
			$keys[30] => $this->getExtra12(),
			$keys[31] => $this->getExtra13(),
			$keys[32] => $this->getExtra14(),
			$keys[33] => $this->getExtra15(),
			$keys[34] => $this->getExtra16(),
			$keys[35] => $this->getExtra17(),
			$keys[36] => $this->getExtra18(),
			$keys[37] => $this->getExtra19(),
			$keys[38] => $this->getExtra20(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CoachtrainingPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setProfileId($value);
				break;
			case 2:
				$this->setProgramPreference($value);
				break;
			case 3:
				$this->setCorePreferredDate1($value);
				break;
			case 4:
				$this->setCorePreferredDate2($value);
				break;
			case 5:
				$this->setCorePreferredDate3($value);
				break;
			case 6:
				$this->setCertPreferredDate1($value);
				break;
			case 7:
				$this->setCertPreferredDate2($value);
				break;
			case 8:
				$this->setCertPreferredDate3($value);
				break;
			case 9:
				$this->setWhatChoose($value);
				break;
			case 10:
				$this->setFundamentalsExp($value);
				break;
			case 11:
				$this->setYourVision($value);
				break;
			case 12:
				$this->setHowSupport($value);
				break;
			case 13:
				$this->setWhyApplying($value);
				break;
			case 14:
				$this->setWhatSize($value);
				break;
			case 15:
				$this->setBackground($value);
				break;
			case 16:
				$this->setAnythingElse($value);
				break;
			case 17:
				$this->setCreatedAt($value);
				break;
			case 18:
				$this->setUpdatedAt($value);
				break;
			case 19:
				$this->setExtra1($value);
				break;
			case 20:
				$this->setExtra2($value);
				break;
			case 21:
				$this->setExtra3($value);
				break;
			case 22:
				$this->setExtra4($value);
				break;
			case 23:
				$this->setExtra5($value);
				break;
			case 24:
				$this->setExtra6($value);
				break;
			case 25:
				$this->setExtra7($value);
				break;
			case 26:
				$this->setExtra8($value);
				break;
			case 27:
				$this->setExtra9($value);
				break;
			case 28:
				$this->setExtra10($value);
				break;
			case 29:
				$this->setExtra11($value);
				break;
			case 30:
				$this->setExtra12($value);
				break;
			case 31:
				$this->setExtra13($value);
				break;
			case 32:
				$this->setExtra14($value);
				break;
			case 33:
				$this->setExtra15($value);
				break;
			case 34:
				$this->setExtra16($value);
				break;
			case 35:
				$this->setExtra17($value);
				break;
			case 36:
				$this->setExtra18($value);
				break;
			case 37:
				$this->setExtra19($value);
				break;
			case 38:
				$this->setExtra20($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CoachtrainingPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProfileId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setProgramPreference($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCorePreferredDate1($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCorePreferredDate2($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCorePreferredDate3($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCertPreferredDate1($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCertPreferredDate2($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCertPreferredDate3($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setWhatChoose($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFundamentalsExp($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setYourVision($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setHowSupport($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setWhyApplying($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setWhatSize($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setBackground($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setAnythingElse($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCreatedAt($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setUpdatedAt($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setExtra1($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setExtra2($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setExtra3($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setExtra4($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setExtra5($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setExtra6($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setExtra7($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setExtra8($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setExtra9($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setExtra10($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setExtra11($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setExtra12($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setExtra13($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setExtra14($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setExtra15($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setExtra16($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setExtra17($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setExtra18($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setExtra19($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setExtra20($arr[$keys[38]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CoachtrainingPeer::DATABASE_NAME);

		if ($this->isColumnModified(CoachtrainingPeer::ID)) $criteria->add(CoachtrainingPeer::ID, $this->id);
		if ($this->isColumnModified(CoachtrainingPeer::PROFILE_ID)) $criteria->add(CoachtrainingPeer::PROFILE_ID, $this->profile_id);
		if ($this->isColumnModified(CoachtrainingPeer::PROGRAM_PREFERENCE)) $criteria->add(CoachtrainingPeer::PROGRAM_PREFERENCE, $this->program_preference);
		if ($this->isColumnModified(CoachtrainingPeer::CORE_PREFERRED_DATE1)) $criteria->add(CoachtrainingPeer::CORE_PREFERRED_DATE1, $this->core_preferred_date1);
		if ($this->isColumnModified(CoachtrainingPeer::CORE_PREFERRED_DATE2)) $criteria->add(CoachtrainingPeer::CORE_PREFERRED_DATE2, $this->core_preferred_date2);
		if ($this->isColumnModified(CoachtrainingPeer::CORE_PREFERRED_DATE3)) $criteria->add(CoachtrainingPeer::CORE_PREFERRED_DATE3, $this->core_preferred_date3);
		if ($this->isColumnModified(CoachtrainingPeer::CERT_PREFERRED_DATE1)) $criteria->add(CoachtrainingPeer::CERT_PREFERRED_DATE1, $this->cert_preferred_date1);
		if ($this->isColumnModified(CoachtrainingPeer::CERT_PREFERRED_DATE2)) $criteria->add(CoachtrainingPeer::CERT_PREFERRED_DATE2, $this->cert_preferred_date2);
		if ($this->isColumnModified(CoachtrainingPeer::CERT_PREFERRED_DATE3)) $criteria->add(CoachtrainingPeer::CERT_PREFERRED_DATE3, $this->cert_preferred_date3);
		if ($this->isColumnModified(CoachtrainingPeer::WHAT_CHOOSE)) $criteria->add(CoachtrainingPeer::WHAT_CHOOSE, $this->what_choose);
		if ($this->isColumnModified(CoachtrainingPeer::FUNDAMENTALS_EXP)) $criteria->add(CoachtrainingPeer::FUNDAMENTALS_EXP, $this->fundamentals_exp);
		if ($this->isColumnModified(CoachtrainingPeer::YOUR_VISION)) $criteria->add(CoachtrainingPeer::YOUR_VISION, $this->your_vision);
		if ($this->isColumnModified(CoachtrainingPeer::HOW_SUPPORT)) $criteria->add(CoachtrainingPeer::HOW_SUPPORT, $this->how_support);
		if ($this->isColumnModified(CoachtrainingPeer::WHY_APPLYING)) $criteria->add(CoachtrainingPeer::WHY_APPLYING, $this->why_applying);
		if ($this->isColumnModified(CoachtrainingPeer::WHAT_SIZE)) $criteria->add(CoachtrainingPeer::WHAT_SIZE, $this->what_size);
		if ($this->isColumnModified(CoachtrainingPeer::BACKGROUND)) $criteria->add(CoachtrainingPeer::BACKGROUND, $this->background);
		if ($this->isColumnModified(CoachtrainingPeer::ANYTHING_ELSE)) $criteria->add(CoachtrainingPeer::ANYTHING_ELSE, $this->anything_else);
		if ($this->isColumnModified(CoachtrainingPeer::CREATED_AT)) $criteria->add(CoachtrainingPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CoachtrainingPeer::UPDATED_AT)) $criteria->add(CoachtrainingPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA1)) $criteria->add(CoachtrainingPeer::EXTRA1, $this->extra1);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA2)) $criteria->add(CoachtrainingPeer::EXTRA2, $this->extra2);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA3)) $criteria->add(CoachtrainingPeer::EXTRA3, $this->extra3);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA4)) $criteria->add(CoachtrainingPeer::EXTRA4, $this->extra4);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA5)) $criteria->add(CoachtrainingPeer::EXTRA5, $this->extra5);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA6)) $criteria->add(CoachtrainingPeer::EXTRA6, $this->extra6);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA7)) $criteria->add(CoachtrainingPeer::EXTRA7, $this->extra7);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA8)) $criteria->add(CoachtrainingPeer::EXTRA8, $this->extra8);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA9)) $criteria->add(CoachtrainingPeer::EXTRA9, $this->extra9);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA10)) $criteria->add(CoachtrainingPeer::EXTRA10, $this->extra10);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA11)) $criteria->add(CoachtrainingPeer::EXTRA11, $this->extra11);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA12)) $criteria->add(CoachtrainingPeer::EXTRA12, $this->extra12);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA13)) $criteria->add(CoachtrainingPeer::EXTRA13, $this->extra13);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA14)) $criteria->add(CoachtrainingPeer::EXTRA14, $this->extra14);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA15)) $criteria->add(CoachtrainingPeer::EXTRA15, $this->extra15);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA16)) $criteria->add(CoachtrainingPeer::EXTRA16, $this->extra16);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA17)) $criteria->add(CoachtrainingPeer::EXTRA17, $this->extra17);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA18)) $criteria->add(CoachtrainingPeer::EXTRA18, $this->extra18);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA19)) $criteria->add(CoachtrainingPeer::EXTRA19, $this->extra19);
		if ($this->isColumnModified(CoachtrainingPeer::EXTRA20)) $criteria->add(CoachtrainingPeer::EXTRA20, $this->extra20);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CoachtrainingPeer::DATABASE_NAME);

		$criteria->add(CoachtrainingPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Coachtraining (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProfileId($this->profile_id);

		$copyObj->setProgramPreference($this->program_preference);

		$copyObj->setCorePreferredDate1($this->core_preferred_date1);

		$copyObj->setCorePreferredDate2($this->core_preferred_date2);

		$copyObj->setCorePreferredDate3($this->core_preferred_date3);

		$copyObj->setCertPreferredDate1($this->cert_preferred_date1);

		$copyObj->setCertPreferredDate2($this->cert_preferred_date2);

		$copyObj->setCertPreferredDate3($this->cert_preferred_date3);

		$copyObj->setWhatChoose($this->what_choose);

		$copyObj->setFundamentalsExp($this->fundamentals_exp);

		$copyObj->setYourVision($this->your_vision);

		$copyObj->setHowSupport($this->how_support);

		$copyObj->setWhyApplying($this->why_applying);

		$copyObj->setWhatSize($this->what_size);

		$copyObj->setBackground($this->background);

		$copyObj->setAnythingElse($this->anything_else);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setExtra1($this->extra1);

		$copyObj->setExtra2($this->extra2);

		$copyObj->setExtra3($this->extra3);

		$copyObj->setExtra4($this->extra4);

		$copyObj->setExtra5($this->extra5);

		$copyObj->setExtra6($this->extra6);

		$copyObj->setExtra7($this->extra7);

		$copyObj->setExtra8($this->extra8);

		$copyObj->setExtra9($this->extra9);

		$copyObj->setExtra10($this->extra10);

		$copyObj->setExtra11($this->extra11);

		$copyObj->setExtra12($this->extra12);

		$copyObj->setExtra13($this->extra13);

		$copyObj->setExtra14($this->extra14);

		$copyObj->setExtra15($this->extra15);

		$copyObj->setExtra16($this->extra16);

		$copyObj->setExtra17($this->extra17);

		$copyObj->setExtra18($this->extra18);

		$copyObj->setExtra19($this->extra19);

		$copyObj->setExtra20($this->extra20);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Coachtraining Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CoachtrainingPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CoachtrainingPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Profile object.
	 *
	 * @param      Profile $v
	 * @return     Coachtraining The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProfile(Profile $v = null)
	{
		if ($v === null) {
			$this->setProfileId(NULL);
		} else {
			$this->setProfileId($v->getId());
		}

		$this->aProfile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Profile object, it will not be re-added.
		if ($v !== null) {
			$v->addCoachtraining($this);
		}

		return $this;
	}


	/**
	 * Get the associated Profile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Profile The associated Profile object.
	 * @throws     PropelException
	 */
	public function getProfile(PropelPDO $con = null)
	{
		if ($this->aProfile === null && ($this->profile_id !== null)) {
			$this->aProfile = ProfilePeer::retrieveByPk($this->profile_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProfile->addCoachtrainings($this);
			 */
		}
		return $this->aProfile;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aProfile = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCoachtraining:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCoachtraining::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCoachtraining
