<?php

/**
 * Base class that represents a row from the 'leaders' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu May 23 17:45:40 2013
 *
 * @package    lib.model.om
 */
abstract class BaseLeaders extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        LeadersPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the profile_id field.
	 * @var        int
	 */
	protected $profile_id;

	/**
	 * The value for the phone_office field.
	 * @var        string
	 */
	protected $phone_office;

	/**
	 * The value for the time_zone field.
	 * @var        string
	 */
	protected $time_zone;

	/**
	 * The value for the skype field.
	 * @var        string
	 */
	protected $skype;

	/**
	 * The value for the education_history field.
	 * @var        string
	 */
	protected $education_history;

	/**
	 * The value for the credentials field.
	 * @var        string
	 */
	protected $credentials;

	/**
	 * The value for the resume field.
	 * @var        string
	 */
	protected $resume;

	/**
	 * The value for the photo field.
	 * @var        string
	 */
	protected $photo;

	/**
	 * The value for the language_fluency field.
	 * @var        string
	 */
	protected $language_fluency;

	/**
	 * The value for the leadership_tribe field.
	 * @var        string
	 */
	protected $leadership_tribe;

	/**
	 * The value for the assisted_in_tribe field.
	 * @var        string
	 */
	protected $assisted_in_tribe;

	/**
	 * The value for the tribe_name field.
	 * @var        string
	 */
	protected $tribe_name;

	/**
	 * The value for the leading_experience field.
	 * @var        string
	 */
	protected $leading_experience;

	/**
	 * The value for the enrollment_experience field.
	 * @var        string
	 */
	protected $enrollment_experience;

	/**
	 * The value for the leader_recommendation field.
	 * @var        string
	 */
	protected $leader_recommendation;

	/**
	 * The value for the why_want_to_lead field.
	 * @var        string
	 */
	protected $why_want_to_lead;

	/**
	 * The value for the life_purpose field.
	 * @var        string
	 */
	protected $life_purpose;

	/**
	 * The value for the quest field.
	 * @var        string
	 */
	protected $quest;

	/**
	 * The value for the initials field.
	 * @var        string
	 */
	protected $initials;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        Profile
	 */
	protected $aProfile;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'LeadersPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [profile_id] column value.
	 * 
	 * @return     int
	 */
	public function getProfileId()
	{
		return $this->profile_id;
	}

	/**
	 * Get the [phone_office] column value.
	 * 
	 * @return     string
	 */
	public function getPhoneOffice()
	{
		return $this->phone_office;
	}

	/**
	 * Get the [time_zone] column value.
	 * 
	 * @return     string
	 */
	public function getTimeZone()
	{
		return $this->time_zone;
	}

	/**
	 * Get the [skype] column value.
	 * 
	 * @return     string
	 */
	public function getSkype()
	{
		return $this->skype;
	}

	/**
	 * Get the [education_history] column value.
	 * 
	 * @return     string
	 */
	public function getEducationHistory()
	{
		return $this->education_history;
	}

	/**
	 * Get the [credentials] column value.
	 * 
	 * @return     string
	 */
	public function getCredentials()
	{
		return $this->credentials;
	}

	/**
	 * Get the [resume] column value.
	 * 
	 * @return     string
	 */
	public function getResume()
	{
		return $this->resume;
	}

	/**
	 * Get the [photo] column value.
	 * 
	 * @return     string
	 */
	public function getPhoto()
	{
		return $this->photo;
	}

	/**
	 * Get the [language_fluency] column value.
	 * 
	 * @return     string
	 */
	public function getLanguageFluency()
	{
		return $this->language_fluency;
	}

	/**
	 * Get the [leadership_tribe] column value.
	 * 
	 * @return     string
	 */
	public function getLeadershipTribe()
	{
		return $this->leadership_tribe;
	}

	/**
	 * Get the [assisted_in_tribe] column value.
	 * 
	 * @return     string
	 */
	public function getAssistedInTribe()
	{
		return $this->assisted_in_tribe;
	}

	/**
	 * Get the [tribe_name] column value.
	 * 
	 * @return     string
	 */
	public function getTribeName()
	{
		return $this->tribe_name;
	}

	/**
	 * Get the [leading_experience] column value.
	 * 
	 * @return     string
	 */
	public function getLeadingExperience()
	{
		return $this->leading_experience;
	}

	/**
	 * Get the [enrollment_experience] column value.
	 * 
	 * @return     string
	 */
	public function getEnrollmentExperience()
	{
		return $this->enrollment_experience;
	}

	/**
	 * Get the [leader_recommendation] column value.
	 * 
	 * @return     string
	 */
	public function getLeaderRecommendation()
	{
		return $this->leader_recommendation;
	}

	/**
	 * Get the [why_want_to_lead] column value.
	 * 
	 * @return     string
	 */
	public function getWhyWantToLead()
	{
		return $this->why_want_to_lead;
	}

	/**
	 * Get the [life_purpose] column value.
	 * 
	 * @return     string
	 */
	public function getLifePurpose()
	{
		return $this->life_purpose;
	}

	/**
	 * Get the [quest] column value.
	 * 
	 * @return     string
	 */
	public function getQuest()
	{
		return $this->quest;
	}

	/**
	 * Get the [initials] column value.
	 * 
	 * @return     string
	 */
	public function getInitials()
	{
		return $this->initials;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = LeadersPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [profile_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setProfileId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profile_id !== $v) {
			$this->profile_id = $v;
			$this->modifiedColumns[] = LeadersPeer::PROFILE_ID;
		}

		if ($this->aProfile !== null && $this->aProfile->getId() !== $v) {
			$this->aProfile = null;
		}

		return $this;
	} // setProfileId()

	/**
	 * Set the value of [phone_office] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setPhoneOffice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone_office !== $v) {
			$this->phone_office = $v;
			$this->modifiedColumns[] = LeadersPeer::PHONE_OFFICE;
		}

		return $this;
	} // setPhoneOffice()

	/**
	 * Set the value of [time_zone] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setTimeZone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->time_zone !== $v) {
			$this->time_zone = $v;
			$this->modifiedColumns[] = LeadersPeer::TIME_ZONE;
		}

		return $this;
	} // setTimeZone()

	/**
	 * Set the value of [skype] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setSkype($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->skype !== $v) {
			$this->skype = $v;
			$this->modifiedColumns[] = LeadersPeer::SKYPE;
		}

		return $this;
	} // setSkype()

	/**
	 * Set the value of [education_history] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setEducationHistory($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->education_history !== $v) {
			$this->education_history = $v;
			$this->modifiedColumns[] = LeadersPeer::EDUCATION_HISTORY;
		}

		return $this;
	} // setEducationHistory()

	/**
	 * Set the value of [credentials] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setCredentials($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->credentials !== $v) {
			$this->credentials = $v;
			$this->modifiedColumns[] = LeadersPeer::CREDENTIALS;
		}

		return $this;
	} // setCredentials()

	/**
	 * Set the value of [resume] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setResume($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->resume !== $v) {
			$this->resume = $v;
			$this->modifiedColumns[] = LeadersPeer::RESUME;
		}

		return $this;
	} // setResume()

	/**
	 * Set the value of [photo] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setPhoto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->photo !== $v) {
			$this->photo = $v;
			$this->modifiedColumns[] = LeadersPeer::PHOTO;
		}

		return $this;
	} // setPhoto()

	/**
	 * Set the value of [language_fluency] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setLanguageFluency($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->language_fluency !== $v) {
			$this->language_fluency = $v;
			$this->modifiedColumns[] = LeadersPeer::LANGUAGE_FLUENCY;
		}

		return $this;
	} // setLanguageFluency()

	/**
	 * Set the value of [leadership_tribe] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setLeadershipTribe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->leadership_tribe !== $v) {
			$this->leadership_tribe = $v;
			$this->modifiedColumns[] = LeadersPeer::LEADERSHIP_TRIBE;
		}

		return $this;
	} // setLeadershipTribe()

	/**
	 * Set the value of [assisted_in_tribe] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setAssistedInTribe($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->assisted_in_tribe !== $v) {
			$this->assisted_in_tribe = $v;
			$this->modifiedColumns[] = LeadersPeer::ASSISTED_IN_TRIBE;
		}

		return $this;
	} // setAssistedInTribe()

	/**
	 * Set the value of [tribe_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setTribeName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tribe_name !== $v) {
			$this->tribe_name = $v;
			$this->modifiedColumns[] = LeadersPeer::TRIBE_NAME;
		}

		return $this;
	} // setTribeName()

	/**
	 * Set the value of [leading_experience] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setLeadingExperience($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->leading_experience !== $v) {
			$this->leading_experience = $v;
			$this->modifiedColumns[] = LeadersPeer::LEADING_EXPERIENCE;
		}

		return $this;
	} // setLeadingExperience()

	/**
	 * Set the value of [enrollment_experience] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setEnrollmentExperience($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->enrollment_experience !== $v) {
			$this->enrollment_experience = $v;
			$this->modifiedColumns[] = LeadersPeer::ENROLLMENT_EXPERIENCE;
		}

		return $this;
	} // setEnrollmentExperience()

	/**
	 * Set the value of [leader_recommendation] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setLeaderRecommendation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->leader_recommendation !== $v) {
			$this->leader_recommendation = $v;
			$this->modifiedColumns[] = LeadersPeer::LEADER_RECOMMENDATION;
		}

		return $this;
	} // setLeaderRecommendation()

	/**
	 * Set the value of [why_want_to_lead] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setWhyWantToLead($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->why_want_to_lead !== $v) {
			$this->why_want_to_lead = $v;
			$this->modifiedColumns[] = LeadersPeer::WHY_WANT_TO_LEAD;
		}

		return $this;
	} // setWhyWantToLead()

	/**
	 * Set the value of [life_purpose] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setLifePurpose($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->life_purpose !== $v) {
			$this->life_purpose = $v;
			$this->modifiedColumns[] = LeadersPeer::LIFE_PURPOSE;
		}

		return $this;
	} // setLifePurpose()

	/**
	 * Set the value of [quest] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setQuest($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->quest !== $v) {
			$this->quest = $v;
			$this->modifiedColumns[] = LeadersPeer::QUEST;
		}

		return $this;
	} // setQuest()

	/**
	 * Set the value of [initials] column.
	 * 
	 * @param      string $v new value
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setInitials($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->initials !== $v) {
			$this->initials = $v;
			$this->modifiedColumns[] = LeadersPeer::INITIALS;
		}

		return $this;
	} // setInitials()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LeadersPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Leaders The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = LeadersPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->profile_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->phone_office = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->time_zone = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->skype = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->education_history = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->credentials = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->resume = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->photo = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->language_fluency = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->leadership_tribe = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->assisted_in_tribe = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->tribe_name = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->leading_experience = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->enrollment_experience = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->leader_recommendation = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->why_want_to_lead = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->life_purpose = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->quest = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->initials = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->created_at = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->updated_at = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 22; // 22 = LeadersPeer::NUM_COLUMNS - LeadersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Leaders object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProfile !== null && $this->profile_id !== $this->aProfile->getId()) {
			$this->aProfile = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LeadersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = LeadersPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProfile = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LeadersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseLeaders:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				LeadersPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseLeaders:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(LeadersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseLeaders:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(LeadersPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(LeadersPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseLeaders:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				LeadersPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfile !== null) {
				if ($this->aProfile->isModified() || $this->aProfile->isNew()) {
					$affectedRows += $this->aProfile->save($con);
				}
				$this->setProfile($this->aProfile);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = LeadersPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = LeadersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += LeadersPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfile !== null) {
				if (!$this->aProfile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProfile->getValidationFailures());
				}
			}


			if (($retval = LeadersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LeadersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getProfileId();
				break;
			case 2:
				return $this->getPhoneOffice();
				break;
			case 3:
				return $this->getTimeZone();
				break;
			case 4:
				return $this->getSkype();
				break;
			case 5:
				return $this->getEducationHistory();
				break;
			case 6:
				return $this->getCredentials();
				break;
			case 7:
				return $this->getResume();
				break;
			case 8:
				return $this->getPhoto();
				break;
			case 9:
				return $this->getLanguageFluency();
				break;
			case 10:
				return $this->getLeadershipTribe();
				break;
			case 11:
				return $this->getAssistedInTribe();
				break;
			case 12:
				return $this->getTribeName();
				break;
			case 13:
				return $this->getLeadingExperience();
				break;
			case 14:
				return $this->getEnrollmentExperience();
				break;
			case 15:
				return $this->getLeaderRecommendation();
				break;
			case 16:
				return $this->getWhyWantToLead();
				break;
			case 17:
				return $this->getLifePurpose();
				break;
			case 18:
				return $this->getQuest();
				break;
			case 19:
				return $this->getInitials();
				break;
			case 20:
				return $this->getCreatedAt();
				break;
			case 21:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = LeadersPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getProfileId(),
			$keys[2] => $this->getPhoneOffice(),
			$keys[3] => $this->getTimeZone(),
			$keys[4] => $this->getSkype(),
			$keys[5] => $this->getEducationHistory(),
			$keys[6] => $this->getCredentials(),
			$keys[7] => $this->getResume(),
			$keys[8] => $this->getPhoto(),
			$keys[9] => $this->getLanguageFluency(),
			$keys[10] => $this->getLeadershipTribe(),
			$keys[11] => $this->getAssistedInTribe(),
			$keys[12] => $this->getTribeName(),
			$keys[13] => $this->getLeadingExperience(),
			$keys[14] => $this->getEnrollmentExperience(),
			$keys[15] => $this->getLeaderRecommendation(),
			$keys[16] => $this->getWhyWantToLead(),
			$keys[17] => $this->getLifePurpose(),
			$keys[18] => $this->getQuest(),
			$keys[19] => $this->getInitials(),
			$keys[20] => $this->getCreatedAt(),
			$keys[21] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = LeadersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setProfileId($value);
				break;
			case 2:
				$this->setPhoneOffice($value);
				break;
			case 3:
				$this->setTimeZone($value);
				break;
			case 4:
				$this->setSkype($value);
				break;
			case 5:
				$this->setEducationHistory($value);
				break;
			case 6:
				$this->setCredentials($value);
				break;
			case 7:
				$this->setResume($value);
				break;
			case 8:
				$this->setPhoto($value);
				break;
			case 9:
				$this->setLanguageFluency($value);
				break;
			case 10:
				$this->setLeadershipTribe($value);
				break;
			case 11:
				$this->setAssistedInTribe($value);
				break;
			case 12:
				$this->setTribeName($value);
				break;
			case 13:
				$this->setLeadingExperience($value);
				break;
			case 14:
				$this->setEnrollmentExperience($value);
				break;
			case 15:
				$this->setLeaderRecommendation($value);
				break;
			case 16:
				$this->setWhyWantToLead($value);
				break;
			case 17:
				$this->setLifePurpose($value);
				break;
			case 18:
				$this->setQuest($value);
				break;
			case 19:
				$this->setInitials($value);
				break;
			case 20:
				$this->setCreatedAt($value);
				break;
			case 21:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = LeadersPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProfileId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPhoneOffice($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTimeZone($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSkype($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setEducationHistory($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCredentials($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setResume($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPhoto($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setLanguageFluency($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setLeadershipTribe($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAssistedInTribe($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTribeName($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setLeadingExperience($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setEnrollmentExperience($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setLeaderRecommendation($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setWhyWantToLead($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setLifePurpose($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setQuest($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setInitials($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCreatedAt($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setUpdatedAt($arr[$keys[21]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(LeadersPeer::DATABASE_NAME);

		if ($this->isColumnModified(LeadersPeer::ID)) $criteria->add(LeadersPeer::ID, $this->id);
		if ($this->isColumnModified(LeadersPeer::PROFILE_ID)) $criteria->add(LeadersPeer::PROFILE_ID, $this->profile_id);
		if ($this->isColumnModified(LeadersPeer::PHONE_OFFICE)) $criteria->add(LeadersPeer::PHONE_OFFICE, $this->phone_office);
		if ($this->isColumnModified(LeadersPeer::TIME_ZONE)) $criteria->add(LeadersPeer::TIME_ZONE, $this->time_zone);
		if ($this->isColumnModified(LeadersPeer::SKYPE)) $criteria->add(LeadersPeer::SKYPE, $this->skype);
		if ($this->isColumnModified(LeadersPeer::EDUCATION_HISTORY)) $criteria->add(LeadersPeer::EDUCATION_HISTORY, $this->education_history);
		if ($this->isColumnModified(LeadersPeer::CREDENTIALS)) $criteria->add(LeadersPeer::CREDENTIALS, $this->credentials);
		if ($this->isColumnModified(LeadersPeer::RESUME)) $criteria->add(LeadersPeer::RESUME, $this->resume);
		if ($this->isColumnModified(LeadersPeer::PHOTO)) $criteria->add(LeadersPeer::PHOTO, $this->photo);
		if ($this->isColumnModified(LeadersPeer::LANGUAGE_FLUENCY)) $criteria->add(LeadersPeer::LANGUAGE_FLUENCY, $this->language_fluency);
		if ($this->isColumnModified(LeadersPeer::LEADERSHIP_TRIBE)) $criteria->add(LeadersPeer::LEADERSHIP_TRIBE, $this->leadership_tribe);
		if ($this->isColumnModified(LeadersPeer::ASSISTED_IN_TRIBE)) $criteria->add(LeadersPeer::ASSISTED_IN_TRIBE, $this->assisted_in_tribe);
		if ($this->isColumnModified(LeadersPeer::TRIBE_NAME)) $criteria->add(LeadersPeer::TRIBE_NAME, $this->tribe_name);
		if ($this->isColumnModified(LeadersPeer::LEADING_EXPERIENCE)) $criteria->add(LeadersPeer::LEADING_EXPERIENCE, $this->leading_experience);
		if ($this->isColumnModified(LeadersPeer::ENROLLMENT_EXPERIENCE)) $criteria->add(LeadersPeer::ENROLLMENT_EXPERIENCE, $this->enrollment_experience);
		if ($this->isColumnModified(LeadersPeer::LEADER_RECOMMENDATION)) $criteria->add(LeadersPeer::LEADER_RECOMMENDATION, $this->leader_recommendation);
		if ($this->isColumnModified(LeadersPeer::WHY_WANT_TO_LEAD)) $criteria->add(LeadersPeer::WHY_WANT_TO_LEAD, $this->why_want_to_lead);
		if ($this->isColumnModified(LeadersPeer::LIFE_PURPOSE)) $criteria->add(LeadersPeer::LIFE_PURPOSE, $this->life_purpose);
		if ($this->isColumnModified(LeadersPeer::QUEST)) $criteria->add(LeadersPeer::QUEST, $this->quest);
		if ($this->isColumnModified(LeadersPeer::INITIALS)) $criteria->add(LeadersPeer::INITIALS, $this->initials);
		if ($this->isColumnModified(LeadersPeer::CREATED_AT)) $criteria->add(LeadersPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(LeadersPeer::UPDATED_AT)) $criteria->add(LeadersPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(LeadersPeer::DATABASE_NAME);

		$criteria->add(LeadersPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Leaders (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProfileId($this->profile_id);

		$copyObj->setPhoneOffice($this->phone_office);

		$copyObj->setTimeZone($this->time_zone);

		$copyObj->setSkype($this->skype);

		$copyObj->setEducationHistory($this->education_history);

		$copyObj->setCredentials($this->credentials);

		$copyObj->setResume($this->resume);

		$copyObj->setPhoto($this->photo);

		$copyObj->setLanguageFluency($this->language_fluency);

		$copyObj->setLeadershipTribe($this->leadership_tribe);

		$copyObj->setAssistedInTribe($this->assisted_in_tribe);

		$copyObj->setTribeName($this->tribe_name);

		$copyObj->setLeadingExperience($this->leading_experience);

		$copyObj->setEnrollmentExperience($this->enrollment_experience);

		$copyObj->setLeaderRecommendation($this->leader_recommendation);

		$copyObj->setWhyWantToLead($this->why_want_to_lead);

		$copyObj->setLifePurpose($this->life_purpose);

		$copyObj->setQuest($this->quest);

		$copyObj->setInitials($this->initials);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Leaders Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     LeadersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new LeadersPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Profile object.
	 *
	 * @param      Profile $v
	 * @return     Leaders The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProfile(Profile $v = null)
	{
		if ($v === null) {
			$this->setProfileId(NULL);
		} else {
			$this->setProfileId($v->getId());
		}

		$this->aProfile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Profile object, it will not be re-added.
		if ($v !== null) {
			$v->addLeaders($this);
		}

		return $this;
	}


	/**
	 * Get the associated Profile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Profile The associated Profile object.
	 * @throws     PropelException
	 */
	public function getProfile(PropelPDO $con = null)
	{
		if ($this->aProfile === null && ($this->profile_id !== null)) {
			$this->aProfile = ProfilePeer::retrieveByPk($this->profile_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProfile->addLeaderss($this);
			 */
		}
		return $this->aProfile;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aProfile = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseLeaders:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseLeaders::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseLeaders
