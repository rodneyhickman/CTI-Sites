<?php

/**
 * Base class that represents a row from the 'profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu May 23 17:45:34 2013
 *
 * @package    lib.model.om
 */
abstract class BaseProfile extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProfilePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the full_name field.
	 * @var        string
	 */
	protected $full_name;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the middle_name field.
	 * @var        string
	 */
	protected $middle_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the perm_address1 field.
	 * @var        string
	 */
	protected $perm_address1;

	/**
	 * The value for the perm_address2 field.
	 * @var        string
	 */
	protected $perm_address2;

	/**
	 * The value for the perm_city field.
	 * @var        string
	 */
	protected $perm_city;

	/**
	 * The value for the perm_state_prov field.
	 * @var        string
	 */
	protected $perm_state_prov;

	/**
	 * The value for the perm_zip_postcode field.
	 * @var        string
	 */
	protected $perm_zip_postcode;

	/**
	 * The value for the perm_country field.
	 * @var        string
	 */
	protected $perm_country;

	/**
	 * The value for the other_address1 field.
	 * @var        string
	 */
	protected $other_address1;

	/**
	 * The value for the other_address2 field.
	 * @var        string
	 */
	protected $other_address2;

	/**
	 * The value for the other_city field.
	 * @var        string
	 */
	protected $other_city;

	/**
	 * The value for the other_state_prov field.
	 * @var        string
	 */
	protected $other_state_prov;

	/**
	 * The value for the other_zip_postcode field.
	 * @var        string
	 */
	protected $other_zip_postcode;

	/**
	 * The value for the other_country field.
	 * @var        string
	 */
	protected $other_country;

	/**
	 * The value for the telephone1 field.
	 * @var        string
	 */
	protected $telephone1;

	/**
	 * The value for the telephone2 field.
	 * @var        string
	 */
	protected $telephone2;

	/**
	 * The value for the email1 field.
	 * @var        string
	 */
	protected $email1;

	/**
	 * The value for the email2 field.
	 * @var        string
	 */
	protected $email2;

	/**
	 * The value for the referred_by field.
	 * @var        string
	 */
	protected $referred_by;

	/**
	 * The value for the gender field.
	 * @var        string
	 */
	protected $gender;

	/**
	 * The value for the age field.
	 * @var        string
	 */
	protected $age;

	/**
	 * The value for the secret field.
	 * @var        string
	 */
	protected $secret;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the extra1 field.
	 * @var        string
	 */
	protected $extra1;

	/**
	 * The value for the extra2 field.
	 * @var        string
	 */
	protected $extra2;

	/**
	 * The value for the extra3 field.
	 * @var        string
	 */
	protected $extra3;

	/**
	 * The value for the extra4 field.
	 * @var        string
	 */
	protected $extra4;

	/**
	 * The value for the extra5 field.
	 * @var        string
	 */
	protected $extra5;

	/**
	 * The value for the extra6 field.
	 * @var        string
	 */
	protected $extra6;

	/**
	 * The value for the extra7 field.
	 * @var        string
	 */
	protected $extra7;

	/**
	 * The value for the extra8 field.
	 * @var        string
	 */
	protected $extra8;

	/**
	 * The value for the extra9 field.
	 * @var        string
	 */
	protected $extra9;

	/**
	 * The value for the extra10 field.
	 * @var        string
	 */
	protected $extra10;

	/**
	 * The value for the extra11 field.
	 * @var        string
	 */
	protected $extra11;

	/**
	 * The value for the extra12 field.
	 * @var        string
	 */
	protected $extra12;

	/**
	 * The value for the extra13 field.
	 * @var        string
	 */
	protected $extra13;

	/**
	 * The value for the extra14 field.
	 * @var        string
	 */
	protected $extra14;

	/**
	 * The value for the extra15 field.
	 * @var        string
	 */
	protected $extra15;

	/**
	 * The value for the extra16 field.
	 * @var        string
	 */
	protected $extra16;

	/**
	 * The value for the extra17 field.
	 * @var        string
	 */
	protected $extra17;

	/**
	 * The value for the extra18 field.
	 * @var        string
	 */
	protected $extra18;

	/**
	 * The value for the extra19 field.
	 * @var        string
	 */
	protected $extra19;

	/**
	 * The value for the extra20 field.
	 * @var        string
	 */
	protected $extra20;

	/**
	 * @var        array Leadership[] Collection to store aggregation of Leadership objects.
	 */
	protected $collLeaderships;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLeaderships.
	 */
	private $lastLeadershipCriteria = null;

	/**
	 * @var        array Coachtraining[] Collection to store aggregation of Coachtraining objects.
	 */
	protected $collCoachtrainings;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCoachtrainings.
	 */
	private $lastCoachtrainingCriteria = null;

	/**
	 * @var        array Execcoach[] Collection to store aggregation of Execcoach objects.
	 */
	protected $collExeccoachs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collExeccoachs.
	 */
	private $lastExeccoachCriteria = null;

	/**
	 * @var        array Leaders[] Collection to store aggregation of Leaders objects.
	 */
	protected $collLeaderss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLeaderss.
	 */
	private $lastLeadersCriteria = null;

	/**
	 * @var        array Leadersaux[] Collection to store aggregation of Leadersaux objects.
	 */
	protected $collLeadersauxs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLeadersauxs.
	 */
	private $lastLeadersauxCriteria = null;

	/**
	 * @var        array FlexformSubmission[] Collection to store aggregation of FlexformSubmission objects.
	 */
	protected $collFlexformSubmissions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFlexformSubmissions.
	 */
	private $lastFlexformSubmissionCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ProfilePeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [full_name] column value.
	 * 
	 * @return     string
	 */
	public function getFullName()
	{
		return $this->full_name;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [middle_name] column value.
	 * 
	 * @return     string
	 */
	public function getMiddleName()
	{
		return $this->middle_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [perm_address1] column value.
	 * 
	 * @return     string
	 */
	public function getPermAddress1()
	{
		return $this->perm_address1;
	}

	/**
	 * Get the [perm_address2] column value.
	 * 
	 * @return     string
	 */
	public function getPermAddress2()
	{
		return $this->perm_address2;
	}

	/**
	 * Get the [perm_city] column value.
	 * 
	 * @return     string
	 */
	public function getPermCity()
	{
		return $this->perm_city;
	}

	/**
	 * Get the [perm_state_prov] column value.
	 * 
	 * @return     string
	 */
	public function getPermStateProv()
	{
		return $this->perm_state_prov;
	}

	/**
	 * Get the [perm_zip_postcode] column value.
	 * 
	 * @return     string
	 */
	public function getPermZipPostcode()
	{
		return $this->perm_zip_postcode;
	}

	/**
	 * Get the [perm_country] column value.
	 * 
	 * @return     string
	 */
	public function getPermCountry()
	{
		return $this->perm_country;
	}

	/**
	 * Get the [other_address1] column value.
	 * 
	 * @return     string
	 */
	public function getOtherAddress1()
	{
		return $this->other_address1;
	}

	/**
	 * Get the [other_address2] column value.
	 * 
	 * @return     string
	 */
	public function getOtherAddress2()
	{
		return $this->other_address2;
	}

	/**
	 * Get the [other_city] column value.
	 * 
	 * @return     string
	 */
	public function getOtherCity()
	{
		return $this->other_city;
	}

	/**
	 * Get the [other_state_prov] column value.
	 * 
	 * @return     string
	 */
	public function getOtherStateProv()
	{
		return $this->other_state_prov;
	}

	/**
	 * Get the [other_zip_postcode] column value.
	 * 
	 * @return     string
	 */
	public function getOtherZipPostcode()
	{
		return $this->other_zip_postcode;
	}

	/**
	 * Get the [other_country] column value.
	 * 
	 * @return     string
	 */
	public function getOtherCountry()
	{
		return $this->other_country;
	}

	/**
	 * Get the [telephone1] column value.
	 * 
	 * @return     string
	 */
	public function getTelephone1()
	{
		return $this->telephone1;
	}

	/**
	 * Get the [telephone2] column value.
	 * 
	 * @return     string
	 */
	public function getTelephone2()
	{
		return $this->telephone2;
	}

	/**
	 * Get the [email1] column value.
	 * 
	 * @return     string
	 */
	public function getEmail1()
	{
		return $this->email1;
	}

	/**
	 * Get the [email2] column value.
	 * 
	 * @return     string
	 */
	public function getEmail2()
	{
		return $this->email2;
	}

	/**
	 * Get the [referred_by] column value.
	 * 
	 * @return     string
	 */
	public function getReferredBy()
	{
		return $this->referred_by;
	}

	/**
	 * Get the [gender] column value.
	 * 
	 * @return     string
	 */
	public function getGender()
	{
		return $this->gender;
	}

	/**
	 * Get the [age] column value.
	 * 
	 * @return     string
	 */
	public function getAge()
	{
		return $this->age;
	}

	/**
	 * Get the [secret] column value.
	 * 
	 * @return     string
	 */
	public function getSecret()
	{
		return $this->secret;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [extra1] column value.
	 * 
	 * @return     string
	 */
	public function getExtra1()
	{
		return $this->extra1;
	}

	/**
	 * Get the [extra2] column value.
	 * 
	 * @return     string
	 */
	public function getExtra2()
	{
		return $this->extra2;
	}

	/**
	 * Get the [extra3] column value.
	 * 
	 * @return     string
	 */
	public function getExtra3()
	{
		return $this->extra3;
	}

	/**
	 * Get the [extra4] column value.
	 * 
	 * @return     string
	 */
	public function getExtra4()
	{
		return $this->extra4;
	}

	/**
	 * Get the [extra5] column value.
	 * 
	 * @return     string
	 */
	public function getExtra5()
	{
		return $this->extra5;
	}

	/**
	 * Get the [extra6] column value.
	 * 
	 * @return     string
	 */
	public function getExtra6()
	{
		return $this->extra6;
	}

	/**
	 * Get the [extra7] column value.
	 * 
	 * @return     string
	 */
	public function getExtra7()
	{
		return $this->extra7;
	}

	/**
	 * Get the [extra8] column value.
	 * 
	 * @return     string
	 */
	public function getExtra8()
	{
		return $this->extra8;
	}

	/**
	 * Get the [extra9] column value.
	 * 
	 * @return     string
	 */
	public function getExtra9()
	{
		return $this->extra9;
	}

	/**
	 * Get the [extra10] column value.
	 * 
	 * @return     string
	 */
	public function getExtra10()
	{
		return $this->extra10;
	}

	/**
	 * Get the [extra11] column value.
	 * 
	 * @return     string
	 */
	public function getExtra11()
	{
		return $this->extra11;
	}

	/**
	 * Get the [extra12] column value.
	 * 
	 * @return     string
	 */
	public function getExtra12()
	{
		return $this->extra12;
	}

	/**
	 * Get the [extra13] column value.
	 * 
	 * @return     string
	 */
	public function getExtra13()
	{
		return $this->extra13;
	}

	/**
	 * Get the [extra14] column value.
	 * 
	 * @return     string
	 */
	public function getExtra14()
	{
		return $this->extra14;
	}

	/**
	 * Get the [extra15] column value.
	 * 
	 * @return     string
	 */
	public function getExtra15()
	{
		return $this->extra15;
	}

	/**
	 * Get the [extra16] column value.
	 * 
	 * @return     string
	 */
	public function getExtra16()
	{
		return $this->extra16;
	}

	/**
	 * Get the [extra17] column value.
	 * 
	 * @return     string
	 */
	public function getExtra17()
	{
		return $this->extra17;
	}

	/**
	 * Get the [extra18] column value.
	 * 
	 * @return     string
	 */
	public function getExtra18()
	{
		return $this->extra18;
	}

	/**
	 * Get the [extra19] column value.
	 * 
	 * @return     string
	 */
	public function getExtra19()
	{
		return $this->extra19;
	}

	/**
	 * Get the [extra20] column value.
	 * 
	 * @return     string
	 */
	public function getExtra20()
	{
		return $this->extra20;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ProfilePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [full_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setFullName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->full_name !== $v) {
			$this->full_name = $v;
			$this->modifiedColumns[] = ProfilePeer::FULL_NAME;
		}

		return $this;
	} // setFullName()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = ProfilePeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [middle_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setMiddleName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->middle_name !== $v) {
			$this->middle_name = $v;
			$this->modifiedColumns[] = ProfilePeer::MIDDLE_NAME;
		}

		return $this;
	} // setMiddleName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = ProfilePeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [perm_address1] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setPermAddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->perm_address1 !== $v) {
			$this->perm_address1 = $v;
			$this->modifiedColumns[] = ProfilePeer::PERM_ADDRESS1;
		}

		return $this;
	} // setPermAddress1()

	/**
	 * Set the value of [perm_address2] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setPermAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->perm_address2 !== $v) {
			$this->perm_address2 = $v;
			$this->modifiedColumns[] = ProfilePeer::PERM_ADDRESS2;
		}

		return $this;
	} // setPermAddress2()

	/**
	 * Set the value of [perm_city] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setPermCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->perm_city !== $v) {
			$this->perm_city = $v;
			$this->modifiedColumns[] = ProfilePeer::PERM_CITY;
		}

		return $this;
	} // setPermCity()

	/**
	 * Set the value of [perm_state_prov] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setPermStateProv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->perm_state_prov !== $v) {
			$this->perm_state_prov = $v;
			$this->modifiedColumns[] = ProfilePeer::PERM_STATE_PROV;
		}

		return $this;
	} // setPermStateProv()

	/**
	 * Set the value of [perm_zip_postcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setPermZipPostcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->perm_zip_postcode !== $v) {
			$this->perm_zip_postcode = $v;
			$this->modifiedColumns[] = ProfilePeer::PERM_ZIP_POSTCODE;
		}

		return $this;
	} // setPermZipPostcode()

	/**
	 * Set the value of [perm_country] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setPermCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->perm_country !== $v) {
			$this->perm_country = $v;
			$this->modifiedColumns[] = ProfilePeer::PERM_COUNTRY;
		}

		return $this;
	} // setPermCountry()

	/**
	 * Set the value of [other_address1] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setOtherAddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_address1 !== $v) {
			$this->other_address1 = $v;
			$this->modifiedColumns[] = ProfilePeer::OTHER_ADDRESS1;
		}

		return $this;
	} // setOtherAddress1()

	/**
	 * Set the value of [other_address2] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setOtherAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_address2 !== $v) {
			$this->other_address2 = $v;
			$this->modifiedColumns[] = ProfilePeer::OTHER_ADDRESS2;
		}

		return $this;
	} // setOtherAddress2()

	/**
	 * Set the value of [other_city] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setOtherCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_city !== $v) {
			$this->other_city = $v;
			$this->modifiedColumns[] = ProfilePeer::OTHER_CITY;
		}

		return $this;
	} // setOtherCity()

	/**
	 * Set the value of [other_state_prov] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setOtherStateProv($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_state_prov !== $v) {
			$this->other_state_prov = $v;
			$this->modifiedColumns[] = ProfilePeer::OTHER_STATE_PROV;
		}

		return $this;
	} // setOtherStateProv()

	/**
	 * Set the value of [other_zip_postcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setOtherZipPostcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_zip_postcode !== $v) {
			$this->other_zip_postcode = $v;
			$this->modifiedColumns[] = ProfilePeer::OTHER_ZIP_POSTCODE;
		}

		return $this;
	} // setOtherZipPostcode()

	/**
	 * Set the value of [other_country] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setOtherCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_country !== $v) {
			$this->other_country = $v;
			$this->modifiedColumns[] = ProfilePeer::OTHER_COUNTRY;
		}

		return $this;
	} // setOtherCountry()

	/**
	 * Set the value of [telephone1] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setTelephone1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telephone1 !== $v) {
			$this->telephone1 = $v;
			$this->modifiedColumns[] = ProfilePeer::TELEPHONE1;
		}

		return $this;
	} // setTelephone1()

	/**
	 * Set the value of [telephone2] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setTelephone2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telephone2 !== $v) {
			$this->telephone2 = $v;
			$this->modifiedColumns[] = ProfilePeer::TELEPHONE2;
		}

		return $this;
	} // setTelephone2()

	/**
	 * Set the value of [email1] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setEmail1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email1 !== $v) {
			$this->email1 = $v;
			$this->modifiedColumns[] = ProfilePeer::EMAIL1;
		}

		return $this;
	} // setEmail1()

	/**
	 * Set the value of [email2] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setEmail2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email2 !== $v) {
			$this->email2 = $v;
			$this->modifiedColumns[] = ProfilePeer::EMAIL2;
		}

		return $this;
	} // setEmail2()

	/**
	 * Set the value of [referred_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setReferredBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->referred_by !== $v) {
			$this->referred_by = $v;
			$this->modifiedColumns[] = ProfilePeer::REFERRED_BY;
		}

		return $this;
	} // setReferredBy()

	/**
	 * Set the value of [gender] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setGender($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->gender !== $v) {
			$this->gender = $v;
			$this->modifiedColumns[] = ProfilePeer::GENDER;
		}

		return $this;
	} // setGender()

	/**
	 * Set the value of [age] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setAge($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->age !== $v) {
			$this->age = $v;
			$this->modifiedColumns[] = ProfilePeer::AGE;
		}

		return $this;
	} // setAge()

	/**
	 * Set the value of [secret] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setSecret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->secret !== $v) {
			$this->secret = $v;
			$this->modifiedColumns[] = ProfilePeer::SECRET;
		}

		return $this;
	} // setSecret()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProfilePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProfilePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [extra1] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra1 !== $v) {
			$this->extra1 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA1;
		}

		return $this;
	} // setExtra1()

	/**
	 * Set the value of [extra2] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra2 !== $v) {
			$this->extra2 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA2;
		}

		return $this;
	} // setExtra2()

	/**
	 * Set the value of [extra3] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra3 !== $v) {
			$this->extra3 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA3;
		}

		return $this;
	} // setExtra3()

	/**
	 * Set the value of [extra4] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra4 !== $v) {
			$this->extra4 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA4;
		}

		return $this;
	} // setExtra4()

	/**
	 * Set the value of [extra5] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra5 !== $v) {
			$this->extra5 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA5;
		}

		return $this;
	} // setExtra5()

	/**
	 * Set the value of [extra6] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra6 !== $v) {
			$this->extra6 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA6;
		}

		return $this;
	} // setExtra6()

	/**
	 * Set the value of [extra7] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra7 !== $v) {
			$this->extra7 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA7;
		}

		return $this;
	} // setExtra7()

	/**
	 * Set the value of [extra8] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra8 !== $v) {
			$this->extra8 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA8;
		}

		return $this;
	} // setExtra8()

	/**
	 * Set the value of [extra9] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra9($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra9 !== $v) {
			$this->extra9 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA9;
		}

		return $this;
	} // setExtra9()

	/**
	 * Set the value of [extra10] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra10($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra10 !== $v) {
			$this->extra10 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA10;
		}

		return $this;
	} // setExtra10()

	/**
	 * Set the value of [extra11] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra11($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra11 !== $v) {
			$this->extra11 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA11;
		}

		return $this;
	} // setExtra11()

	/**
	 * Set the value of [extra12] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra12($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra12 !== $v) {
			$this->extra12 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA12;
		}

		return $this;
	} // setExtra12()

	/**
	 * Set the value of [extra13] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra13($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra13 !== $v) {
			$this->extra13 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA13;
		}

		return $this;
	} // setExtra13()

	/**
	 * Set the value of [extra14] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra14($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra14 !== $v) {
			$this->extra14 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA14;
		}

		return $this;
	} // setExtra14()

	/**
	 * Set the value of [extra15] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra15($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra15 !== $v) {
			$this->extra15 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA15;
		}

		return $this;
	} // setExtra15()

	/**
	 * Set the value of [extra16] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra16($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra16 !== $v) {
			$this->extra16 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA16;
		}

		return $this;
	} // setExtra16()

	/**
	 * Set the value of [extra17] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra17($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra17 !== $v) {
			$this->extra17 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA17;
		}

		return $this;
	} // setExtra17()

	/**
	 * Set the value of [extra18] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra18($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra18 !== $v) {
			$this->extra18 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA18;
		}

		return $this;
	} // setExtra18()

	/**
	 * Set the value of [extra19] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra19($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra19 !== $v) {
			$this->extra19 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA19;
		}

		return $this;
	} // setExtra19()

	/**
	 * Set the value of [extra20] column.
	 * 
	 * @param      string $v new value
	 * @return     Profile The current object (for fluent API support)
	 */
	public function setExtra20($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra20 !== $v) {
			$this->extra20 = $v;
			$this->modifiedColumns[] = ProfilePeer::EXTRA20;
		}

		return $this;
	} // setExtra20()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->full_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->first_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->middle_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->last_name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->perm_address1 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->perm_address2 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->perm_city = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->perm_state_prov = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->perm_zip_postcode = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->perm_country = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->other_address1 = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->other_address2 = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->other_city = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->other_state_prov = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->other_zip_postcode = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->other_country = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->telephone1 = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->telephone2 = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->email1 = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->email2 = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->referred_by = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->gender = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->age = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->secret = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->created_at = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->updated_at = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->extra1 = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->extra2 = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->extra3 = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->extra4 = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->extra5 = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->extra6 = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->extra7 = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->extra8 = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->extra9 = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->extra10 = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->extra11 = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->extra12 = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->extra13 = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->extra14 = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->extra15 = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->extra16 = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->extra17 = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->extra18 = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->extra19 = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->extra20 = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 47; // 47 = ProfilePeer::NUM_COLUMNS - ProfilePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Profile object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProfilePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collLeaderships = null;
			$this->lastLeadershipCriteria = null;

			$this->collCoachtrainings = null;
			$this->lastCoachtrainingCriteria = null;

			$this->collExeccoachs = null;
			$this->lastExeccoachCriteria = null;

			$this->collLeaderss = null;
			$this->lastLeadersCriteria = null;

			$this->collLeadersauxs = null;
			$this->lastLeadersauxCriteria = null;

			$this->collFlexformSubmissions = null;
			$this->lastFlexformSubmissionCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProfile:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ProfilePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProfile:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProfile:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(ProfilePeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(ProfilePeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProfile:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ProfilePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProfilePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProfilePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProfilePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collLeaderships !== null) {
				foreach ($this->collLeaderships as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCoachtrainings !== null) {
				foreach ($this->collCoachtrainings as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collExeccoachs !== null) {
				foreach ($this->collExeccoachs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLeaderss !== null) {
				foreach ($this->collLeaderss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLeadersauxs !== null) {
				foreach ($this->collLeadersauxs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFlexformSubmissions !== null) {
				foreach ($this->collFlexformSubmissions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ProfilePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collLeaderships !== null) {
					foreach ($this->collLeaderships as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCoachtrainings !== null) {
					foreach ($this->collCoachtrainings as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collExeccoachs !== null) {
					foreach ($this->collExeccoachs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLeaderss !== null) {
					foreach ($this->collLeaderss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLeadersauxs !== null) {
					foreach ($this->collLeadersauxs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFlexformSubmissions !== null) {
					foreach ($this->collFlexformSubmissions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProfilePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getFullName();
				break;
			case 2:
				return $this->getFirstName();
				break;
			case 3:
				return $this->getMiddleName();
				break;
			case 4:
				return $this->getLastName();
				break;
			case 5:
				return $this->getPermAddress1();
				break;
			case 6:
				return $this->getPermAddress2();
				break;
			case 7:
				return $this->getPermCity();
				break;
			case 8:
				return $this->getPermStateProv();
				break;
			case 9:
				return $this->getPermZipPostcode();
				break;
			case 10:
				return $this->getPermCountry();
				break;
			case 11:
				return $this->getOtherAddress1();
				break;
			case 12:
				return $this->getOtherAddress2();
				break;
			case 13:
				return $this->getOtherCity();
				break;
			case 14:
				return $this->getOtherStateProv();
				break;
			case 15:
				return $this->getOtherZipPostcode();
				break;
			case 16:
				return $this->getOtherCountry();
				break;
			case 17:
				return $this->getTelephone1();
				break;
			case 18:
				return $this->getTelephone2();
				break;
			case 19:
				return $this->getEmail1();
				break;
			case 20:
				return $this->getEmail2();
				break;
			case 21:
				return $this->getReferredBy();
				break;
			case 22:
				return $this->getGender();
				break;
			case 23:
				return $this->getAge();
				break;
			case 24:
				return $this->getSecret();
				break;
			case 25:
				return $this->getCreatedAt();
				break;
			case 26:
				return $this->getUpdatedAt();
				break;
			case 27:
				return $this->getExtra1();
				break;
			case 28:
				return $this->getExtra2();
				break;
			case 29:
				return $this->getExtra3();
				break;
			case 30:
				return $this->getExtra4();
				break;
			case 31:
				return $this->getExtra5();
				break;
			case 32:
				return $this->getExtra6();
				break;
			case 33:
				return $this->getExtra7();
				break;
			case 34:
				return $this->getExtra8();
				break;
			case 35:
				return $this->getExtra9();
				break;
			case 36:
				return $this->getExtra10();
				break;
			case 37:
				return $this->getExtra11();
				break;
			case 38:
				return $this->getExtra12();
				break;
			case 39:
				return $this->getExtra13();
				break;
			case 40:
				return $this->getExtra14();
				break;
			case 41:
				return $this->getExtra15();
				break;
			case 42:
				return $this->getExtra16();
				break;
			case 43:
				return $this->getExtra17();
				break;
			case 44:
				return $this->getExtra18();
				break;
			case 45:
				return $this->getExtra19();
				break;
			case 46:
				return $this->getExtra20();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProfilePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getFullName(),
			$keys[2] => $this->getFirstName(),
			$keys[3] => $this->getMiddleName(),
			$keys[4] => $this->getLastName(),
			$keys[5] => $this->getPermAddress1(),
			$keys[6] => $this->getPermAddress2(),
			$keys[7] => $this->getPermCity(),
			$keys[8] => $this->getPermStateProv(),
			$keys[9] => $this->getPermZipPostcode(),
			$keys[10] => $this->getPermCountry(),
			$keys[11] => $this->getOtherAddress1(),
			$keys[12] => $this->getOtherAddress2(),
			$keys[13] => $this->getOtherCity(),
			$keys[14] => $this->getOtherStateProv(),
			$keys[15] => $this->getOtherZipPostcode(),
			$keys[16] => $this->getOtherCountry(),
			$keys[17] => $this->getTelephone1(),
			$keys[18] => $this->getTelephone2(),
			$keys[19] => $this->getEmail1(),
			$keys[20] => $this->getEmail2(),
			$keys[21] => $this->getReferredBy(),
			$keys[22] => $this->getGender(),
			$keys[23] => $this->getAge(),
			$keys[24] => $this->getSecret(),
			$keys[25] => $this->getCreatedAt(),
			$keys[26] => $this->getUpdatedAt(),
			$keys[27] => $this->getExtra1(),
			$keys[28] => $this->getExtra2(),
			$keys[29] => $this->getExtra3(),
			$keys[30] => $this->getExtra4(),
			$keys[31] => $this->getExtra5(),
			$keys[32] => $this->getExtra6(),
			$keys[33] => $this->getExtra7(),
			$keys[34] => $this->getExtra8(),
			$keys[35] => $this->getExtra9(),
			$keys[36] => $this->getExtra10(),
			$keys[37] => $this->getExtra11(),
			$keys[38] => $this->getExtra12(),
			$keys[39] => $this->getExtra13(),
			$keys[40] => $this->getExtra14(),
			$keys[41] => $this->getExtra15(),
			$keys[42] => $this->getExtra16(),
			$keys[43] => $this->getExtra17(),
			$keys[44] => $this->getExtra18(),
			$keys[45] => $this->getExtra19(),
			$keys[46] => $this->getExtra20(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProfilePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setFullName($value);
				break;
			case 2:
				$this->setFirstName($value);
				break;
			case 3:
				$this->setMiddleName($value);
				break;
			case 4:
				$this->setLastName($value);
				break;
			case 5:
				$this->setPermAddress1($value);
				break;
			case 6:
				$this->setPermAddress2($value);
				break;
			case 7:
				$this->setPermCity($value);
				break;
			case 8:
				$this->setPermStateProv($value);
				break;
			case 9:
				$this->setPermZipPostcode($value);
				break;
			case 10:
				$this->setPermCountry($value);
				break;
			case 11:
				$this->setOtherAddress1($value);
				break;
			case 12:
				$this->setOtherAddress2($value);
				break;
			case 13:
				$this->setOtherCity($value);
				break;
			case 14:
				$this->setOtherStateProv($value);
				break;
			case 15:
				$this->setOtherZipPostcode($value);
				break;
			case 16:
				$this->setOtherCountry($value);
				break;
			case 17:
				$this->setTelephone1($value);
				break;
			case 18:
				$this->setTelephone2($value);
				break;
			case 19:
				$this->setEmail1($value);
				break;
			case 20:
				$this->setEmail2($value);
				break;
			case 21:
				$this->setReferredBy($value);
				break;
			case 22:
				$this->setGender($value);
				break;
			case 23:
				$this->setAge($value);
				break;
			case 24:
				$this->setSecret($value);
				break;
			case 25:
				$this->setCreatedAt($value);
				break;
			case 26:
				$this->setUpdatedAt($value);
				break;
			case 27:
				$this->setExtra1($value);
				break;
			case 28:
				$this->setExtra2($value);
				break;
			case 29:
				$this->setExtra3($value);
				break;
			case 30:
				$this->setExtra4($value);
				break;
			case 31:
				$this->setExtra5($value);
				break;
			case 32:
				$this->setExtra6($value);
				break;
			case 33:
				$this->setExtra7($value);
				break;
			case 34:
				$this->setExtra8($value);
				break;
			case 35:
				$this->setExtra9($value);
				break;
			case 36:
				$this->setExtra10($value);
				break;
			case 37:
				$this->setExtra11($value);
				break;
			case 38:
				$this->setExtra12($value);
				break;
			case 39:
				$this->setExtra13($value);
				break;
			case 40:
				$this->setExtra14($value);
				break;
			case 41:
				$this->setExtra15($value);
				break;
			case 42:
				$this->setExtra16($value);
				break;
			case 43:
				$this->setExtra17($value);
				break;
			case 44:
				$this->setExtra18($value);
				break;
			case 45:
				$this->setExtra19($value);
				break;
			case 46:
				$this->setExtra20($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProfilePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFullName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFirstName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setMiddleName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setLastName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPermAddress1($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPermAddress2($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPermCity($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPermStateProv($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPermZipPostcode($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPermCountry($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setOtherAddress1($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOtherAddress2($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setOtherCity($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setOtherStateProv($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setOtherZipPostcode($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setOtherCountry($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTelephone1($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setTelephone2($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setEmail1($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setEmail2($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setReferredBy($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setGender($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setAge($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setSecret($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setCreatedAt($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setUpdatedAt($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setExtra1($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setExtra2($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setExtra3($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setExtra4($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setExtra5($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setExtra6($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setExtra7($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setExtra8($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setExtra9($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setExtra10($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setExtra11($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setExtra12($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setExtra13($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setExtra14($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setExtra15($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setExtra16($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setExtra17($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setExtra18($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setExtra19($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setExtra20($arr[$keys[46]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProfilePeer::DATABASE_NAME);

		if ($this->isColumnModified(ProfilePeer::ID)) $criteria->add(ProfilePeer::ID, $this->id);
		if ($this->isColumnModified(ProfilePeer::FULL_NAME)) $criteria->add(ProfilePeer::FULL_NAME, $this->full_name);
		if ($this->isColumnModified(ProfilePeer::FIRST_NAME)) $criteria->add(ProfilePeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(ProfilePeer::MIDDLE_NAME)) $criteria->add(ProfilePeer::MIDDLE_NAME, $this->middle_name);
		if ($this->isColumnModified(ProfilePeer::LAST_NAME)) $criteria->add(ProfilePeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(ProfilePeer::PERM_ADDRESS1)) $criteria->add(ProfilePeer::PERM_ADDRESS1, $this->perm_address1);
		if ($this->isColumnModified(ProfilePeer::PERM_ADDRESS2)) $criteria->add(ProfilePeer::PERM_ADDRESS2, $this->perm_address2);
		if ($this->isColumnModified(ProfilePeer::PERM_CITY)) $criteria->add(ProfilePeer::PERM_CITY, $this->perm_city);
		if ($this->isColumnModified(ProfilePeer::PERM_STATE_PROV)) $criteria->add(ProfilePeer::PERM_STATE_PROV, $this->perm_state_prov);
		if ($this->isColumnModified(ProfilePeer::PERM_ZIP_POSTCODE)) $criteria->add(ProfilePeer::PERM_ZIP_POSTCODE, $this->perm_zip_postcode);
		if ($this->isColumnModified(ProfilePeer::PERM_COUNTRY)) $criteria->add(ProfilePeer::PERM_COUNTRY, $this->perm_country);
		if ($this->isColumnModified(ProfilePeer::OTHER_ADDRESS1)) $criteria->add(ProfilePeer::OTHER_ADDRESS1, $this->other_address1);
		if ($this->isColumnModified(ProfilePeer::OTHER_ADDRESS2)) $criteria->add(ProfilePeer::OTHER_ADDRESS2, $this->other_address2);
		if ($this->isColumnModified(ProfilePeer::OTHER_CITY)) $criteria->add(ProfilePeer::OTHER_CITY, $this->other_city);
		if ($this->isColumnModified(ProfilePeer::OTHER_STATE_PROV)) $criteria->add(ProfilePeer::OTHER_STATE_PROV, $this->other_state_prov);
		if ($this->isColumnModified(ProfilePeer::OTHER_ZIP_POSTCODE)) $criteria->add(ProfilePeer::OTHER_ZIP_POSTCODE, $this->other_zip_postcode);
		if ($this->isColumnModified(ProfilePeer::OTHER_COUNTRY)) $criteria->add(ProfilePeer::OTHER_COUNTRY, $this->other_country);
		if ($this->isColumnModified(ProfilePeer::TELEPHONE1)) $criteria->add(ProfilePeer::TELEPHONE1, $this->telephone1);
		if ($this->isColumnModified(ProfilePeer::TELEPHONE2)) $criteria->add(ProfilePeer::TELEPHONE2, $this->telephone2);
		if ($this->isColumnModified(ProfilePeer::EMAIL1)) $criteria->add(ProfilePeer::EMAIL1, $this->email1);
		if ($this->isColumnModified(ProfilePeer::EMAIL2)) $criteria->add(ProfilePeer::EMAIL2, $this->email2);
		if ($this->isColumnModified(ProfilePeer::REFERRED_BY)) $criteria->add(ProfilePeer::REFERRED_BY, $this->referred_by);
		if ($this->isColumnModified(ProfilePeer::GENDER)) $criteria->add(ProfilePeer::GENDER, $this->gender);
		if ($this->isColumnModified(ProfilePeer::AGE)) $criteria->add(ProfilePeer::AGE, $this->age);
		if ($this->isColumnModified(ProfilePeer::SECRET)) $criteria->add(ProfilePeer::SECRET, $this->secret);
		if ($this->isColumnModified(ProfilePeer::CREATED_AT)) $criteria->add(ProfilePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ProfilePeer::UPDATED_AT)) $criteria->add(ProfilePeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(ProfilePeer::EXTRA1)) $criteria->add(ProfilePeer::EXTRA1, $this->extra1);
		if ($this->isColumnModified(ProfilePeer::EXTRA2)) $criteria->add(ProfilePeer::EXTRA2, $this->extra2);
		if ($this->isColumnModified(ProfilePeer::EXTRA3)) $criteria->add(ProfilePeer::EXTRA3, $this->extra3);
		if ($this->isColumnModified(ProfilePeer::EXTRA4)) $criteria->add(ProfilePeer::EXTRA4, $this->extra4);
		if ($this->isColumnModified(ProfilePeer::EXTRA5)) $criteria->add(ProfilePeer::EXTRA5, $this->extra5);
		if ($this->isColumnModified(ProfilePeer::EXTRA6)) $criteria->add(ProfilePeer::EXTRA6, $this->extra6);
		if ($this->isColumnModified(ProfilePeer::EXTRA7)) $criteria->add(ProfilePeer::EXTRA7, $this->extra7);
		if ($this->isColumnModified(ProfilePeer::EXTRA8)) $criteria->add(ProfilePeer::EXTRA8, $this->extra8);
		if ($this->isColumnModified(ProfilePeer::EXTRA9)) $criteria->add(ProfilePeer::EXTRA9, $this->extra9);
		if ($this->isColumnModified(ProfilePeer::EXTRA10)) $criteria->add(ProfilePeer::EXTRA10, $this->extra10);
		if ($this->isColumnModified(ProfilePeer::EXTRA11)) $criteria->add(ProfilePeer::EXTRA11, $this->extra11);
		if ($this->isColumnModified(ProfilePeer::EXTRA12)) $criteria->add(ProfilePeer::EXTRA12, $this->extra12);
		if ($this->isColumnModified(ProfilePeer::EXTRA13)) $criteria->add(ProfilePeer::EXTRA13, $this->extra13);
		if ($this->isColumnModified(ProfilePeer::EXTRA14)) $criteria->add(ProfilePeer::EXTRA14, $this->extra14);
		if ($this->isColumnModified(ProfilePeer::EXTRA15)) $criteria->add(ProfilePeer::EXTRA15, $this->extra15);
		if ($this->isColumnModified(ProfilePeer::EXTRA16)) $criteria->add(ProfilePeer::EXTRA16, $this->extra16);
		if ($this->isColumnModified(ProfilePeer::EXTRA17)) $criteria->add(ProfilePeer::EXTRA17, $this->extra17);
		if ($this->isColumnModified(ProfilePeer::EXTRA18)) $criteria->add(ProfilePeer::EXTRA18, $this->extra18);
		if ($this->isColumnModified(ProfilePeer::EXTRA19)) $criteria->add(ProfilePeer::EXTRA19, $this->extra19);
		if ($this->isColumnModified(ProfilePeer::EXTRA20)) $criteria->add(ProfilePeer::EXTRA20, $this->extra20);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProfilePeer::DATABASE_NAME);

		$criteria->add(ProfilePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Profile (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFullName($this->full_name);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setMiddleName($this->middle_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setPermAddress1($this->perm_address1);

		$copyObj->setPermAddress2($this->perm_address2);

		$copyObj->setPermCity($this->perm_city);

		$copyObj->setPermStateProv($this->perm_state_prov);

		$copyObj->setPermZipPostcode($this->perm_zip_postcode);

		$copyObj->setPermCountry($this->perm_country);

		$copyObj->setOtherAddress1($this->other_address1);

		$copyObj->setOtherAddress2($this->other_address2);

		$copyObj->setOtherCity($this->other_city);

		$copyObj->setOtherStateProv($this->other_state_prov);

		$copyObj->setOtherZipPostcode($this->other_zip_postcode);

		$copyObj->setOtherCountry($this->other_country);

		$copyObj->setTelephone1($this->telephone1);

		$copyObj->setTelephone2($this->telephone2);

		$copyObj->setEmail1($this->email1);

		$copyObj->setEmail2($this->email2);

		$copyObj->setReferredBy($this->referred_by);

		$copyObj->setGender($this->gender);

		$copyObj->setAge($this->age);

		$copyObj->setSecret($this->secret);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setExtra1($this->extra1);

		$copyObj->setExtra2($this->extra2);

		$copyObj->setExtra3($this->extra3);

		$copyObj->setExtra4($this->extra4);

		$copyObj->setExtra5($this->extra5);

		$copyObj->setExtra6($this->extra6);

		$copyObj->setExtra7($this->extra7);

		$copyObj->setExtra8($this->extra8);

		$copyObj->setExtra9($this->extra9);

		$copyObj->setExtra10($this->extra10);

		$copyObj->setExtra11($this->extra11);

		$copyObj->setExtra12($this->extra12);

		$copyObj->setExtra13($this->extra13);

		$copyObj->setExtra14($this->extra14);

		$copyObj->setExtra15($this->extra15);

		$copyObj->setExtra16($this->extra16);

		$copyObj->setExtra17($this->extra17);

		$copyObj->setExtra18($this->extra18);

		$copyObj->setExtra19($this->extra19);

		$copyObj->setExtra20($this->extra20);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getLeaderships() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLeadership($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCoachtrainings() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCoachtraining($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getExeccoachs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addExeccoach($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLeaderss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLeaders($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLeadersauxs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLeadersaux($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFlexformSubmissions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFlexformSubmission($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Profile Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProfilePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProfilePeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collLeaderships collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLeaderships()
	 */
	public function clearLeaderships()
	{
		$this->collLeaderships = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLeaderships collection (array).
	 *
	 * By default this just sets the collLeaderships collection to an empty array (like clearcollLeaderships());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLeaderships()
	{
		$this->collLeaderships = array();
	}

	/**
	 * Gets an array of Leadership objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profile has previously been saved, it will retrieve
	 * related Leaderships from storage. If this Profile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Leadership[]
	 * @throws     PropelException
	 */
	public function getLeaderships($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLeaderships === null) {
			if ($this->isNew()) {
			   $this->collLeaderships = array();
			} else {

				$criteria->add(LeadershipPeer::PROFILE_ID, $this->id);

				LeadershipPeer::addSelectColumns($criteria);
				$this->collLeaderships = LeadershipPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LeadershipPeer::PROFILE_ID, $this->id);

				LeadershipPeer::addSelectColumns($criteria);
				if (!isset($this->lastLeadershipCriteria) || !$this->lastLeadershipCriteria->equals($criteria)) {
					$this->collLeaderships = LeadershipPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLeadershipCriteria = $criteria;
		return $this->collLeaderships;
	}

	/**
	 * Returns the number of related Leadership objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Leadership objects.
	 * @throws     PropelException
	 */
	public function countLeaderships(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLeaderships === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LeadershipPeer::PROFILE_ID, $this->id);

				$count = LeadershipPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LeadershipPeer::PROFILE_ID, $this->id);

				if (!isset($this->lastLeadershipCriteria) || !$this->lastLeadershipCriteria->equals($criteria)) {
					$count = LeadershipPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLeaderships);
				}
			} else {
				$count = count($this->collLeaderships);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Leadership object to this object
	 * through the Leadership foreign key attribute.
	 *
	 * @param      Leadership $l Leadership
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLeadership(Leadership $l)
	{
		if ($this->collLeaderships === null) {
			$this->initLeaderships();
		}
		if (!in_array($l, $this->collLeaderships, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLeaderships, $l);
			$l->setProfile($this);
		}
	}

	/**
	 * Clears out the collCoachtrainings collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCoachtrainings()
	 */
	public function clearCoachtrainings()
	{
		$this->collCoachtrainings = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCoachtrainings collection (array).
	 *
	 * By default this just sets the collCoachtrainings collection to an empty array (like clearcollCoachtrainings());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCoachtrainings()
	{
		$this->collCoachtrainings = array();
	}

	/**
	 * Gets an array of Coachtraining objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profile has previously been saved, it will retrieve
	 * related Coachtrainings from storage. If this Profile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Coachtraining[]
	 * @throws     PropelException
	 */
	public function getCoachtrainings($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCoachtrainings === null) {
			if ($this->isNew()) {
			   $this->collCoachtrainings = array();
			} else {

				$criteria->add(CoachtrainingPeer::PROFILE_ID, $this->id);

				CoachtrainingPeer::addSelectColumns($criteria);
				$this->collCoachtrainings = CoachtrainingPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CoachtrainingPeer::PROFILE_ID, $this->id);

				CoachtrainingPeer::addSelectColumns($criteria);
				if (!isset($this->lastCoachtrainingCriteria) || !$this->lastCoachtrainingCriteria->equals($criteria)) {
					$this->collCoachtrainings = CoachtrainingPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCoachtrainingCriteria = $criteria;
		return $this->collCoachtrainings;
	}

	/**
	 * Returns the number of related Coachtraining objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Coachtraining objects.
	 * @throws     PropelException
	 */
	public function countCoachtrainings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCoachtrainings === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CoachtrainingPeer::PROFILE_ID, $this->id);

				$count = CoachtrainingPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CoachtrainingPeer::PROFILE_ID, $this->id);

				if (!isset($this->lastCoachtrainingCriteria) || !$this->lastCoachtrainingCriteria->equals($criteria)) {
					$count = CoachtrainingPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCoachtrainings);
				}
			} else {
				$count = count($this->collCoachtrainings);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Coachtraining object to this object
	 * through the Coachtraining foreign key attribute.
	 *
	 * @param      Coachtraining $l Coachtraining
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCoachtraining(Coachtraining $l)
	{
		if ($this->collCoachtrainings === null) {
			$this->initCoachtrainings();
		}
		if (!in_array($l, $this->collCoachtrainings, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCoachtrainings, $l);
			$l->setProfile($this);
		}
	}

	/**
	 * Clears out the collExeccoachs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addExeccoachs()
	 */
	public function clearExeccoachs()
	{
		$this->collExeccoachs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collExeccoachs collection (array).
	 *
	 * By default this just sets the collExeccoachs collection to an empty array (like clearcollExeccoachs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initExeccoachs()
	{
		$this->collExeccoachs = array();
	}

	/**
	 * Gets an array of Execcoach objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profile has previously been saved, it will retrieve
	 * related Execcoachs from storage. If this Profile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Execcoach[]
	 * @throws     PropelException
	 */
	public function getExeccoachs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collExeccoachs === null) {
			if ($this->isNew()) {
			   $this->collExeccoachs = array();
			} else {

				$criteria->add(ExeccoachPeer::PROFILE_ID, $this->id);

				ExeccoachPeer::addSelectColumns($criteria);
				$this->collExeccoachs = ExeccoachPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ExeccoachPeer::PROFILE_ID, $this->id);

				ExeccoachPeer::addSelectColumns($criteria);
				if (!isset($this->lastExeccoachCriteria) || !$this->lastExeccoachCriteria->equals($criteria)) {
					$this->collExeccoachs = ExeccoachPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastExeccoachCriteria = $criteria;
		return $this->collExeccoachs;
	}

	/**
	 * Returns the number of related Execcoach objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Execcoach objects.
	 * @throws     PropelException
	 */
	public function countExeccoachs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collExeccoachs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ExeccoachPeer::PROFILE_ID, $this->id);

				$count = ExeccoachPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ExeccoachPeer::PROFILE_ID, $this->id);

				if (!isset($this->lastExeccoachCriteria) || !$this->lastExeccoachCriteria->equals($criteria)) {
					$count = ExeccoachPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collExeccoachs);
				}
			} else {
				$count = count($this->collExeccoachs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Execcoach object to this object
	 * through the Execcoach foreign key attribute.
	 *
	 * @param      Execcoach $l Execcoach
	 * @return     void
	 * @throws     PropelException
	 */
	public function addExeccoach(Execcoach $l)
	{
		if ($this->collExeccoachs === null) {
			$this->initExeccoachs();
		}
		if (!in_array($l, $this->collExeccoachs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collExeccoachs, $l);
			$l->setProfile($this);
		}
	}

	/**
	 * Clears out the collLeaderss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLeaderss()
	 */
	public function clearLeaderss()
	{
		$this->collLeaderss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLeaderss collection (array).
	 *
	 * By default this just sets the collLeaderss collection to an empty array (like clearcollLeaderss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLeaderss()
	{
		$this->collLeaderss = array();
	}

	/**
	 * Gets an array of Leaders objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profile has previously been saved, it will retrieve
	 * related Leaderss from storage. If this Profile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Leaders[]
	 * @throws     PropelException
	 */
	public function getLeaderss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLeaderss === null) {
			if ($this->isNew()) {
			   $this->collLeaderss = array();
			} else {

				$criteria->add(LeadersPeer::PROFILE_ID, $this->id);

				LeadersPeer::addSelectColumns($criteria);
				$this->collLeaderss = LeadersPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LeadersPeer::PROFILE_ID, $this->id);

				LeadersPeer::addSelectColumns($criteria);
				if (!isset($this->lastLeadersCriteria) || !$this->lastLeadersCriteria->equals($criteria)) {
					$this->collLeaderss = LeadersPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLeadersCriteria = $criteria;
		return $this->collLeaderss;
	}

	/**
	 * Returns the number of related Leaders objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Leaders objects.
	 * @throws     PropelException
	 */
	public function countLeaderss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLeaderss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LeadersPeer::PROFILE_ID, $this->id);

				$count = LeadersPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LeadersPeer::PROFILE_ID, $this->id);

				if (!isset($this->lastLeadersCriteria) || !$this->lastLeadersCriteria->equals($criteria)) {
					$count = LeadersPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLeaderss);
				}
			} else {
				$count = count($this->collLeaderss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Leaders object to this object
	 * through the Leaders foreign key attribute.
	 *
	 * @param      Leaders $l Leaders
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLeaders(Leaders $l)
	{
		if ($this->collLeaderss === null) {
			$this->initLeaderss();
		}
		if (!in_array($l, $this->collLeaderss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLeaderss, $l);
			$l->setProfile($this);
		}
	}

	/**
	 * Clears out the collLeadersauxs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLeadersauxs()
	 */
	public function clearLeadersauxs()
	{
		$this->collLeadersauxs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLeadersauxs collection (array).
	 *
	 * By default this just sets the collLeadersauxs collection to an empty array (like clearcollLeadersauxs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLeadersauxs()
	{
		$this->collLeadersauxs = array();
	}

	/**
	 * Gets an array of Leadersaux objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profile has previously been saved, it will retrieve
	 * related Leadersauxs from storage. If this Profile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Leadersaux[]
	 * @throws     PropelException
	 */
	public function getLeadersauxs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLeadersauxs === null) {
			if ($this->isNew()) {
			   $this->collLeadersauxs = array();
			} else {

				$criteria->add(LeadersauxPeer::PROFILE_ID, $this->id);

				LeadersauxPeer::addSelectColumns($criteria);
				$this->collLeadersauxs = LeadersauxPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LeadersauxPeer::PROFILE_ID, $this->id);

				LeadersauxPeer::addSelectColumns($criteria);
				if (!isset($this->lastLeadersauxCriteria) || !$this->lastLeadersauxCriteria->equals($criteria)) {
					$this->collLeadersauxs = LeadersauxPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLeadersauxCriteria = $criteria;
		return $this->collLeadersauxs;
	}

	/**
	 * Returns the number of related Leadersaux objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Leadersaux objects.
	 * @throws     PropelException
	 */
	public function countLeadersauxs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLeadersauxs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LeadersauxPeer::PROFILE_ID, $this->id);

				$count = LeadersauxPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LeadersauxPeer::PROFILE_ID, $this->id);

				if (!isset($this->lastLeadersauxCriteria) || !$this->lastLeadersauxCriteria->equals($criteria)) {
					$count = LeadersauxPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLeadersauxs);
				}
			} else {
				$count = count($this->collLeadersauxs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Leadersaux object to this object
	 * through the Leadersaux foreign key attribute.
	 *
	 * @param      Leadersaux $l Leadersaux
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLeadersaux(Leadersaux $l)
	{
		if ($this->collLeadersauxs === null) {
			$this->initLeadersauxs();
		}
		if (!in_array($l, $this->collLeadersauxs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLeadersauxs, $l);
			$l->setProfile($this);
		}
	}

	/**
	 * Clears out the collFlexformSubmissions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFlexformSubmissions()
	 */
	public function clearFlexformSubmissions()
	{
		$this->collFlexformSubmissions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFlexformSubmissions collection (array).
	 *
	 * By default this just sets the collFlexformSubmissions collection to an empty array (like clearcollFlexformSubmissions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFlexformSubmissions()
	{
		$this->collFlexformSubmissions = array();
	}

	/**
	 * Gets an array of FlexformSubmission objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Profile has previously been saved, it will retrieve
	 * related FlexformSubmissions from storage. If this Profile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FlexformSubmission[]
	 * @throws     PropelException
	 */
	public function getFlexformSubmissions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFlexformSubmissions === null) {
			if ($this->isNew()) {
			   $this->collFlexformSubmissions = array();
			} else {

				$criteria->add(FlexformSubmissionPeer::PROFILE_ID, $this->id);

				FlexformSubmissionPeer::addSelectColumns($criteria);
				$this->collFlexformSubmissions = FlexformSubmissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FlexformSubmissionPeer::PROFILE_ID, $this->id);

				FlexformSubmissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastFlexformSubmissionCriteria) || !$this->lastFlexformSubmissionCriteria->equals($criteria)) {
					$this->collFlexformSubmissions = FlexformSubmissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFlexformSubmissionCriteria = $criteria;
		return $this->collFlexformSubmissions;
	}

	/**
	 * Returns the number of related FlexformSubmission objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FlexformSubmission objects.
	 * @throws     PropelException
	 */
	public function countFlexformSubmissions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFlexformSubmissions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FlexformSubmissionPeer::PROFILE_ID, $this->id);

				$count = FlexformSubmissionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FlexformSubmissionPeer::PROFILE_ID, $this->id);

				if (!isset($this->lastFlexformSubmissionCriteria) || !$this->lastFlexformSubmissionCriteria->equals($criteria)) {
					$count = FlexformSubmissionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFlexformSubmissions);
				}
			} else {
				$count = count($this->collFlexformSubmissions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FlexformSubmission object to this object
	 * through the FlexformSubmission foreign key attribute.
	 *
	 * @param      FlexformSubmission $l FlexformSubmission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFlexformSubmission(FlexformSubmission $l)
	{
		if ($this->collFlexformSubmissions === null) {
			$this->initFlexformSubmissions();
		}
		if (!in_array($l, $this->collFlexformSubmissions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFlexformSubmissions, $l);
			$l->setProfile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Profile is new, it will return
	 * an empty collection; or if this Profile has previously
	 * been saved, it will retrieve related FlexformSubmissions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Profile.
	 */
	public function getFlexformSubmissionsJoinFlexform($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFlexformSubmissions === null) {
			if ($this->isNew()) {
				$this->collFlexformSubmissions = array();
			} else {

				$criteria->add(FlexformSubmissionPeer::PROFILE_ID, $this->id);

				$this->collFlexformSubmissions = FlexformSubmissionPeer::doSelectJoinFlexform($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FlexformSubmissionPeer::PROFILE_ID, $this->id);

			if (!isset($this->lastFlexformSubmissionCriteria) || !$this->lastFlexformSubmissionCriteria->equals($criteria)) {
				$this->collFlexformSubmissions = FlexformSubmissionPeer::doSelectJoinFlexform($criteria, $con, $join_behavior);
			}
		}
		$this->lastFlexformSubmissionCriteria = $criteria;

		return $this->collFlexformSubmissions;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collLeaderships) {
				foreach ((array) $this->collLeaderships as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCoachtrainings) {
				foreach ((array) $this->collCoachtrainings as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collExeccoachs) {
				foreach ((array) $this->collExeccoachs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLeaderss) {
				foreach ((array) $this->collLeaderss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLeadersauxs) {
				foreach ((array) $this->collLeadersauxs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFlexformSubmissions) {
				foreach ((array) $this->collFlexformSubmissions as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collLeaderships = null;
		$this->collCoachtrainings = null;
		$this->collExeccoachs = null;
		$this->collLeaderss = null;
		$this->collLeadersauxs = null;
		$this->collFlexformSubmissions = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProfile:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProfile::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProfile
