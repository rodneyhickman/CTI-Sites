<?php


/**
 * This class defines the structure of the 'registrant' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Mar 18 23:28:37 2011
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class RegistrantTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.RegistrantTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('registrant');
		$this->setPhpName('Registrant');
		$this->setClassname('Registrant');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addColumn('FIRST_NAME', 'FirstName', 'VARCHAR', false, 50, null);
		$this->addColumn('MIDDLE_NAME', 'MiddleName', 'VARCHAR', false, 50, null);
		$this->addColumn('LAST_NAME', 'LastName', 'VARCHAR', false, 50, null);
		$this->addColumn('ADDRESS_LINE1', 'AddressLine1', 'VARCHAR', false, 100, null);
		$this->addColumn('ADDRESS_LINE2', 'AddressLine2', 'VARCHAR', false, 100, null);
		$this->addColumn('CITY', 'City', 'VARCHAR', false, 50, null);
		$this->addColumn('STATE', 'State', 'VARCHAR', false, 50, null);
		$this->addColumn('ZIP', 'Zip', 'VARCHAR', false, 50, null);
		$this->addColumn('COUNTRY', 'Country', 'VARCHAR', false, 50, null);
		$this->addColumn('PHONE', 'Phone', 'VARCHAR', false, 30, null);
		$this->addColumn('EMAIL', 'Email', 'VARCHAR', false, 100, null);
		$this->addForeignKey('WORKSHOP_ID', 'WorkshopId', 'INTEGER', 'workshop', 'ID', false, null, null);
		$this->addColumn('CONF_EMAIL_SENT_TO_CLIENT_AT', 'ConfEmailSentToClientAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('COOKIE_NAME', 'CookieName', 'VARCHAR', false, 50, null);
		$this->addColumn('COOKIE_VALUE', 'CookieValue', 'VARCHAR', false, 50, null);
		$this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Workshop', 'Workshop', RelationMap::MANY_TO_ONE, array('workshop_id' => 'id', ), null, null);
    $this->addRelation('RegistrantExtra', 'RegistrantExtra', RelationMap::ONE_TO_MANY, array('id' => 'registrant_id', ), 'CASCADE', null);
    $this->addRelation('WorkshopRegistrant', 'WorkshopRegistrant', RelationMap::ONE_TO_MANY, array('id' => 'registrant_id', ), 'CASCADE', null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('create_column' => 'created_at', ),
		);
	} // getBehaviors()

} // RegistrantTableMap
