<?php



require 'lib/model/om/BaseProfile.php';





/**

 * Skeleton subclass for representing a row from the 'profile' table.

 *

 * 

 *

 * This class was autogenerated by Propel 1.4.2 on:

 *

 * Wed Apr 13 02:34:41 2011

 *

 * You should add additional methods to this class to meet the

 * application requirements.  This class will only be generated as

 * long as it does not already exist in the output directory.

 *

 * @package    lib.model

 */

class Profile extends BaseProfile {



  public function getGender($criteria = null, $con = null)

  {

    if (is_null($criteria))

    {

      $criteria = new Criteria();

    }

    else

    {

      // Objects are passed by reference in PHP5, so to avoid modifying the original, you must clone it

      $criteria = clone $criteria;

    }

    

    $gender = parent::getGender($criteria, $con);

    if(preg_match("/m/i",$gender)){

      return 'Male';

    }

    else if(preg_match("/f/i",$gender)){

      return 'Female';

    }



    return '';

  }

  

  public function getName(){

    if($this->getFullName() != ''){

      return $this->getFullName();

    }

    return $this->getFirstName().' '.$this->getLastName();

  }



  public function setLeader(){

    $this->setExtra1('leader');

    $this->save();

    return;

  }



  public function getAssistantAgreed(){

    return $this->getExtra2();

  }



  public function setAssistantAgreed($agreed){

    $this->setExtra2($agreed); // 'yes' or 'no'

    $this->save();

    return;

  }



  public function getDateOfBirth(){

    return $this->getExtra3();

  }



  public function setDateOfBirth($dateOfBirth){

    $this->setExtra3($dateOfBirth);

    $this->save();

    return;

  }



  public function getFinishedQuestionnaire(){

    $c = new Criteria();

    $c->add(ProgramQuestionnairePeer::PROFILE_ID, $this->getId() );

    $pq = ProgramQuestionnairePeer::doSelectOne( $c );

    if($pq){

      return 'Yes';

    }

    return 'No';

  }



  public function getFinishedMedical(){

    $c = new Criteria();

    $c->add(MedicalPeer::PROFILE_ID, $this->getId() );

    $med = MedicalPeer::doSelectOne( $c );

    if($med){

      return 'Yes';

    }

    return 'No';

  }



  public function getFinishedDietary(){

    $c = new Criteria();

    $c->add(DietaryPeer::PROFILE_ID, $this->getId() );

    $diet = DietaryPeer::doSelectOne( $c );

    if($diet){

      return 'Yes';

    }

    return 'No';

  }



  public function getFinishedQuestionnaireWithDate(){

    $c = new Criteria();

    $c->add(ProgramQuestionnairePeer::PROFILE_ID, $this->getId() );

    $pq = ProgramQuestionnairePeer::doSelectOne( $c );

    if($pq){

      return "Yes\n" . $pq->getUpdatedAt('m/d/Y');

    }

    return 'No';

  }



  public function getFinishedMedicalWithDate(){

    $c = new Criteria();

    $c->add(MedicalPeer::PROFILE_ID, $this->getId() );

    $med = MedicalPeer::doSelectOne( $c );

    if($med){

      return "Yes\n" . $med->getUpdatedAt('m/d/Y');

    }

    return 'No';

  }



  public function getFinishedDietaryWithDate(){

    $c = new Criteria();

    $c->add(DietaryPeer::PROFILE_ID, $this->getId() );

    $diet = DietaryPeer::doSelectOne( $c );

    if($diet){

      return "Yes\n" . $diet->getUpdatedAt('m/d/Y');

    }

    return 'No';

  }



  public function getRole(){

    // returns role

    $c = new Criteria();

    $c->add(TribeParticipantPeer::PROFILE_ID, $this->getId() );

    $c->addDescendingOrderByColumn(TribeParticipantPeer::UPDATED_AT);

    $tp = TribeParticipantPeer::doSelectOne( $c );



    if(isset($tp)){

        return $tp->getRole();

    }

    return '';

  }



  public function getTribe(){ // should be called getTribeNameDateLocation

    $c = new Criteria();

    $c->add(TribeParticipantPeer::PROFILE_ID, $this->getId() );

    $c->addDescendingOrderByColumn(TribeParticipantPeer::UPDATED_AT);

    $tp = TribeParticipantPeer::doSelectOne( $c );



    if(isset($tp)){

    $tribe = TribePeer::retrieveByPk( $tp->getTribeId() );

    #return $tribe->getNameDateLocation();

    return $tribe->getDateLocation();

    }

    return '--not assigned--';

  }



  public function getTribeId(){ 

    $c = new Criteria();

    $c->add(TribeParticipantPeer::PROFILE_ID, $this->getId() );

    $c->addDescendingOrderByColumn(TribeParticipantPeer::UPDATED_AT);

    $tp = TribeParticipantPeer::doSelectOne( $c );

    if(isset($tp)){

      return  $tp->getTribeId();

    }

    return 0;

  }



  public function setTribe($tribe_id, $role = 'participant'){ // set $role to 'keep' to keep current role setting

    if($tribe_id > 0){

      $c = new Criteria();

      $c->add(TribeParticipantPeer::PROFILE_ID, $this->getId() );

      $c->addDescendingOrderByColumn(TribeParticipantPeer::UPDATED_AT);

      $tp = TribeParticipantPeer::doSelectOne( $c );

      if(isset($tp)){

        $tp->setTribeId($tribe_id);

        if($role != 'keep'){

          $tp->setRole($role);

        }

        $tp->save();

      }

      else {

        $tp = new TribeParticipant();

        $tp->setTribeId($tribe_id);

        $tp->setProfileId( $this->getId() );

        if($role == 'keep'){

          $role = 'participant';

        }

        $tp->setRole($role);

        $tp->save();

      }

    }



    return;

  }



  public function addToTribe($tribe_id, $role = 'participant'){

    if($tribe_id > 0){

      $tp = new TribeParticipant();

      $tp->setTribeId($tribe_id);

      $tp->setProfileId( $this->getId() );

      $tp->setRole($role);

      $tp->save();

    }

    

    return;

  }





  public function getInfluencerArray() {

    $fields = array(

      'Program'    => 'Profile:Tribe',

      'First Name' => 'Profile:FirstName',

      'Last Name'  => 'Profile:LastName',



      "Influenced by Friend"           => 'ProgramQuestionnaire:Friend_CR',

      "Influenced by Faculty Member"   => 'ProgramQuestionnaire:CTIFacultyMember_CR',

      "Influenced by Program Advisor"  => 'ProgramQuestionnaire:ProgramAdvisor_CR',

      "Influenced by Other"            => 'ProgramQuestionnaire:OtherInfluence_CR'

      );

    $array = $this->arrayFromFieldArray( $fields );

    return $array;

  }









// Header from DabbleDB: "Program","First Name","Last Name","Last Modified","Last Modified By","Email","Can you eat Beef?",

// "Can you eat Lamb?","Can you eat Pork?","Can you eat Poultry?","Can you eat Seafood?","Are you a Vegetarian? (includes eggs & dairy)",

// "Are you a Vegan?","Do you have any other Crucial Dietary Restrictions?","Describe Dietary Restrictions"



  public function getDietaryArray() {

    // create an associate array that maps table fields to diet fields

    $fields = array (

      'Program' => 'Profile:Tribe',

      'First Name' => 'Profile:FirstName',

      'Last Name' => 'Profile:LastName',

      'Last Modified' => 'Dietary:UpdatedAt',

      'Last Modified By' => 'text:--last modified by not recorded--',

      'Can you eat Beef?' => 'Dietary:Beef',

      'Can you eat Lamb?' => 'Dietary:Lamb',

      'Can you eat Pork?' => 'Dietary:Pork',

      'Can you eat Poultry?' => 'Dietary:Poultry',

      'Can you eat Seafood?' => 'Dietary:Seafood',

      'Are you a Vegetarian? (includes eggs & dairy)' => 'Dietary:Vegetarian',

      'Are you a Vegan?' => 'Dietary:Vegan',

      'Do you have any other Crucial Dietary Restrictions?' => 'Dietary:DietaryRestrictions',

      'Describe Dietary Restrictions' => 'Dietary:DescribeRestrictions'

    );



    $array = $this->arrayFromFieldArray( $fields );

    return $array;

  }





// Header from DabbleDB: "Program","First Name","Last Name","Last Modified","Last Modified By","ID","email","Gender ","Age","Nationality",

// "Relationship Status","Current Profession","Past Profession(s)","Goals","Strengths","Sabateurs","Failure","Truth","(Leave Blank)",

// "(Leave Blank)","Are you currently, or have you ever been, in therapy?","Therapy Details","Therapy Impact","Fundamentals",

// "Intermediate Coaching Curriculum","Certification","Quest","Internal Co-Active Coach Curriculum",

// "Do you currently have, or have you ever had a coach?","Coaching Impact","Spiritual Influences","Spiritual Path",

// "Personal Growth","Leadership","Longing to Expand","Why this program?","Play Level","What it would take","(Leave Blank)",

// "(Leave Blank)","Bringing Yourself Back","Going the Distance","Purpose","Anything Else"



// New fields: "Influenced by Friend", "Influenced by Faculty Member", "Influenced by Program Advisor", "Influenced by Other"



  public function getProgramQuestionnaireArray() {

    // create an associate array that maps table fields to diet fields

    $fields = array (

      'Program'           => 'Profile:Tribe',

      'First Name'        => 'Profile:FirstName',

      'Last Name'         => 'Profile:LastName',

      'Last Modified'     => 'Dietary:UpdatedAt',

      'Last Modified By'  => 'text:--last modified by not recorded--',

      'ID'                => 'Profile:Id',

      'email'             => 'Profile:Email1',

      'Gender '           => 'Profile:Gender',

      'Age'               => 'Profile:Age',

      'Nationality'         => 'ProgramQuestionnaire:Nationality',

      'Relationship Status' => 'ProgramQuestionnaire:RelationshipStatus',

      'Current Profession'  => 'ProgramQuestionnaire:CurrentProfession',

      'Past Profession(s)'  => 'ProgramQuestionnaire:PastProfession',



      'Goals'             => 'ProgramQuestionnaire:PersonalProfessionalGoals__',

      'Strengths'         => 'ProgramQuestionnaire:Strengths__',

      'Sabateurs'         => 'ProgramQuestionnaire:HoldsYouBack__',

      'Failure'           => 'ProgramQuestionnaire:HandleFailing__',

      //'Willing To Fail'   => 'ProgramQuestionnaire:WillingToFail__',

      'Truth'             => 'ProgramQuestionnaire:WillingToListen__',

      '(Leave Blank 1)'     => 'text: ',

      '(Leave Blank 2)'     => 'text: ',

      'Are you currently, or have you ever been, in therapy?'           => 'ProgramQuestionnaire:Therapy',

      'Therapy Details'   => 'ProgramQuestionnaire:TherapyDetails__',

      'Therapy Impact'    => 'ProgramQuestionnaire:TherapyImpact__',

      'Fundamentals'      => 'ProgramQuestionnaire:Fundamentals',

      'Intermediate Coaching Curriculum' => 'ProgramQuestionnaire:IntermediateCurriculum',

      'Certification'     => 'ProgramQuestionnaire:Certification',

      'Quest' => 'ProgramQuestionnaire:Quest',

      'Internal Co-Active Coach Curriculum'    => 'ProgramQuestionnaire:IccCurriculum',

      'Do you currently have, or have you ever had a coach?'      => 'ProgramQuestionnaire:HaveACoach',

      'Coaching Impact'   => 'ProgramQuestionnaire:CoachingImpact__',

      'Spiritual Influences' => 'ProgramQuestionnaire:ReligiousAffiliations__',

      'Spiritual Path'   => 'ProgramQuestionnaire:ReligiousInfluences__',

      'Personal Growths'     => 'ProgramQuestionnaire:GrowthExperiences__',

      'Leadership'     => 'ProgramQuestionnaire:ImpactAsALeader__',

      'Longing to Expand'              => 'ProgramQuestionnaire:Challenge__',

      'Why this program?'       => 'ProgramQuestionnaire:WhyThisProgram__',

      'Play Level'             => 'ProgramQuestionnaire:PlayLevel',

      'What it would take'     => 'ProgramQuestionnaire:WhatWouldItTake__',

      '(Leave Blank 3)'     => 'text: ',

      '(Leave Blank 4)'     => 'text: ',

      'Bringing Yourself Back'    => 'ProgramQuestionnaire:BringYourselfBack__',

      'Going The Distance'     => 'ProgramQuestionnaire:GoingTheDistance__',

      'Purpose'          => 'ProgramQuestionnaire:IWasBornTo__',

      'Anything Else'               => 'ProgramQuestionnaire:Comments',

      "Influenced by Friend"           => 'ProgramQuestionnaire:Friend',

      "Influenced by Faculty Member"   => 'ProgramQuestionnaire:CTIFacultyMember',

      "Influenced by Program Advisor"  => 'ProgramQuestionnaire:ProgramAdvisor',

      "Influenced by Other"            => 'ProgramQuestionnaire:OtherInfluence'



    );



    $array = $this->arrayFromFieldArray( $fields );

    return $array;

  }







// "Program","First Name","Last Name","Last Modified","Last Modified By","ID","Email","Age","Gender","Height","Weight",

// "Conditions (physical)","Conditions (psychological)","Accommodations","Head","Neck","Whiplash","Shoulders","Arms","Wrists",

// "Hands","Upper Back","Lower Back","Pelvis","Groin","Thighs","Knees","Lower Legs","Ankles","Feet","Internal Organs","Heart",

// "Lungs","Ears","Eyes","Contact Lenses","Dislocations","If So, Where?","Asthma","Do you smoke?","Have You Ever Smoked?",





  public function getMedicalArray() {

    // create an associate array that maps table fields to diet fields

    $fields = array (

      'Program'           => 'Profile:Tribe',

      'First Name' => 'Profile:FirstName',

      'Last Name' => 'Profile:LastName',

      'Last Modified'     => 'Medical:UpdatedAt',

      'Last Modified By'  => 'text:--last modified by not recorded--',

      'ID'                => 'Profile:Id',

      'Email'             => 'Profile:Email1',

      'Age'               => 'Profile:Age',

      'DateOfBirth'       => 'Profile:DateOfBirth',

      'Gender '           => 'Profile:Gender',

      'Height' => 'Medical:Height_',

      'Weight' => 'Medical:Weight_',

      'Conditions (physical)' => 'Medical:ConditionsPhysical_',

      'Conditions (psychological)' => 'Medical:ConditionsPsychological_',

      'Accommodations' => 'Medical:Accommodations_',

      'Head' => 'Medical:Head_',

      'Neck' => 'Medical:Neck_',

      'Whiplash' => 'Medical:Whiplash_',

      'Shoulders' => 'Medical:Shoulders_',

      'Arms' => 'Medical:Arms_',

      'Wrists' => 'Medical:Wrists_',

      'Hands' => 'Medical:Hands_',

      'Upper Back' => 'Medical:UpperBack_',

      'Lower Back' => 'Medical:LowerBack_',

      'Pelvis' => 'Medical:Pelvis_',

      'Groin' => 'Medical:Groin_',

      'Thighs'     => 'Medical:Thighs_',

      'Knees'      => 'Medical:Knees_',

      'Lower Legs' => 'Medical:LowerLegs_',

      'Ankles'     => 'Medical:Ankles_',

      'Feet'       => 'Medical:Feet_',

      'Internal Organs' => 'Medical:InternalOrgans_',

      'Heart'      => 'Medical:Heart_',

      'Lungs'      => 'Medical:Lungs_',

      'Ears'       => 'Medical:Ears_',

      'Eyes'       => 'Medical:Eyes_',

      'Contact Lenses'  => 'Medical:ContactLenses_',

      'Dislocations' => 'Medical:Dislocations_',

      'If So, Where?' => 'Medical:DislocationsWhere_',

      'Asthma' => 'Medical:Asthma_',

      'Do You Smoke?' => 'Medical:DoYouSmoke_',

      'Have You Ever Smoked?' => 'Medical:HaveYouEverSmoked_',

      'Are you currently pregnant?' => 'Medical:AreYouCurrentlyPregnant_',

      'If So, Due Date'   => 'Medical:DueDate_',



// "Are you currently pregnant?","If So, Due Date","History of dizziness or fainting?","High Blood Pressure",

// "History of heart disease or heart attack?","Diabetes","Epilepsy/seizures","Other Serious Illness","Explain Yes Answers",

// "Allergies","Are you currently taking any Medication(s)?","Name of Medication(s):","What are the medication(s) for?",

// "Medication(s) dosage:","Emergency Contact Name","Relationship (Emergency)","Address (Emergency)",

// "Work Phone (Emergency)","Home Phone (Emergency)","Other Phone (Emergency)","Medical Coverage Provided by","Policy #",

// "Other pertinent Insurance Information","Your Doctor's Name","Doctor's Phone/Contact Information","Release of Liability"



      'History of dizziness or fainting?'  => 'Medical:Dizziness_',

      'High Blood Pressure' => 'Medical:HighBloodPressure_',

      'History of heart disease or heart attack?'    => 'Medical:HeartAttack_',

      'Diabetes'   => 'Medical:Diabetes_',

      'Epilepsy/seizures' => 'Medical:EpilepsySeizures_',

      'Other Serious Illness' => 'Medical:OtherSeriousIllness_',

      'Explain Yes Answers' => 'Medical:Explanation_',

      'Allergies' => 'Medical:Allergies_',

      'Are you currently taking any Medication' => 'Medical:Medications_',

      'Name of Medication(s):' => 'Medical:NameOfMedications_',

      'What are the medication(s) for?' => 'Medical:WhatAreMedicationsFor_',

      'Medication(s) dosage:' => 'Medical:MedicationDosages_',

      'Emergency Contact Name' => 'Medical:EmergencyContactName',

      'Relationship (Emergency)' => 'Medical:EmergencyRelationship',

      'Address (Emergency)' => 'Medical:EmergencyAddress',

      'Work Phone (Emergency)' => 'Medical:EmergencyWorkPhone',

      'Home Phone (Emergency)' => 'Medical:EmergencyHomePhone',

      'Other Phone (Emergency)' => 'Medical:EmergencyOtherPhone',

      'Medical Coverage Provided by' => 'Medical:CoverageProvider',

      'Policy #' => 'Medical:PolicyNumber',

      'Other pertinent Insurance Information' => 'Medical:OtherInsuranceInformation',

      'Your Doctor\'s Name' => 'Medical:DoctorsName',

      'Doctor\'s Phone/Contact Information' => 'Medical:DoctorsContactInfo',

      'Release of Liability' => 'Medical:ReleaseOfLiability'



    );



    $array = $this->arrayFromFieldArray( $fields );

    return $array;

  }





  public function getCertificationArray() {

    $fields = array (

      'Name' => 'Profile:Name',

      'Email' => 'Certification:Email',

      'Your Certified Coach' => 'Certification:YourCertifiedCoach',

      'Reg Date' => 'Certification:CreatedAt',

      'Appl Date' => 'text: ',

      'Status' => 'text: ',

      'Number' => 'text: ',

      'Address' => 'Certification:Address',

      'Address2' => 'Certification:Address2',

      'City' => 'Certification:City',

      'State Province' => 'Certification:StateProvince',

      'Country' => 'Certification:Country',

      'Zip Postal Code' => 'Certification:ZipPostalCode',

      'Evening Phone' => 'Certification:EveningPhone',

      'Day Phone' => 'Certification:DayPhone',

      'Fax' => 'Certification:Fax',

      'Mobile' => 'Certification:Mobile',

      'How Many Clients' => 'Certification:HowManyClients',

      'Month To Begin' => 'Certification:MonthToBegin',

      'Languages Coaching' => 'Certification:LanguagesCoaching',

      'Date Completed Process' => 'Certification:DateCompletedProcess',

      'When did you complete In The Bones' => 'Certification:DateOfSynergy',

      'Your Certified Coach' => 'Certification:YourCertifiedCoach',

      'CPCC' => 'Certification:CPCC',

      'PCC' => 'Certification:PCC',

      'MCC' => 'Certification:MCC',

      'Your Coach\'s Email' => 'Certification:YourCoachsEmail',

      'Call Length' => 'Certification:CallLength',

      'Times A Month' => 'Certification:TimesAMonth',

      'Date Coaching Began' => 'Certification:DateCoachingBegan',

      'Comments' => 'Certification:Comments',

      'Previously Registered' => 'Certification:PreviouslyRegistered',

      'New Registration' => 'Certification:NewRegistration',

      'Indication Of Agreement' => 'Certification:IndicationOfAgreement'

    );

    $array = $this->arrayFromFieldArray( $fields );

    return $array;

  }





  public function getDeclareMonthArray() {

    $fields = array (

      'Name' => 'Profile:Name',

      'Email' => 'Profile:Email1',

      'Start Month Declaration' => 'Certification:MonthToBegin',

    );

    $array = $this->arrayFromFieldArray( $fields );

    return $array;

  }







  public function getLeadershipAssistantArray() {

    $fields = array (

      'Name'                 => 'Profile:Name',

      'Gender'                => 'Profile:Gender',

      'Graduation Tribe'     => 'ProgramQuestionnaire:LAGraduationTribe',

      'Completion Date'      => 'ProgramQuestionnaire:LACompletionDate',

      'Leader 1'             => 'ProgramQuestionnaire:LALeader1',

      'Leader 2'             => 'ProgramQuestionnaire:LALeader2',



      'Misc'                 => 'ProgramQuestionnaire:LAMisc',

      'Email'                => 'Profile:Email1',



      'What Prompted You'    => 'ProgramQuestionnaire:LAWhatPromptedYou',

      'Impact'               => 'ProgramQuestionnaire:LAImpact',

      'Experience'           => 'ProgramQuestionnaire:LAExperience',

      

      'Want to Gain'         => 'ProgramQuestionnaire:LAWantToGain',

      'Anticipate'           => 'ProgramQuestionnaire:LAAnticipate',

      'Space' =>  'ProgramQuestionnaire:LASpace',



      'Self Management'      => 'ProgramQuestionnaire:LASelfManagement',

      'Commit'               => 'ProgramQuestionnaire:LACommit',

      'Life Impact'          => 'ProgramQuestionnaire:LALifeImpact',



      'Challenge'            => 'ProgramQuestionnaire:LAChallenge',

      'Stay'                 => 'ProgramQuestionnaire:LAStay',

      'Expectations Leaders' => 'ProgramQuestionnaire:LAExpectationsLeaders',



      'Co Assistant Expections' => 'ProgramQuestionnaire:LACoAssistantExpectations',

      'Disappointing'        => 'ProgramQuestionnaire:LADisappointing',

      'Leaders Count On'     => 'ProgramQuestionnaire:LALeadersCountOn',

      'Partipant Count On'   => 'ProgramQuestionnaire:LAParticipantCountOn',

      'Assistant Count On'   => 'ProgramQuestionnaire:LAAssistantCountOn',



      'Call Forth'           => 'ProgramQuestionnaire:LACallForth',

      'CPR' =>  'ProgramQuestionnaire:LACPR',

      'Ropes Limitations'    => 'ProgramQuestionnaire:LARopesLimitations',

      'Explain Ropes Limitations' => 'ProgramQuestionnaire:LAExplainRopesLimitations',



      'Other Limitations'    => 'ProgramQuestionnaire:LAOtherLimitations',

      'Explain Other Limitations' => 'ProgramQuestionnaire:LAExplainOtherLimitations',

      'Transportation'       => 'ProgramQuestionnaire:LATransportation',

      'Anything Else'        => 'ProgramQuestionnaire:LAAnythingElse'

    );

    $array = $this->arrayFromFieldArray( $fields );

    return $array;

  }







  public function arrayFromFieldArray( $fields ){

    $array = array( );



    // open related records

    $c = new Criteria();

    $c->add(CertificationPeer::PROFILE_ID, $this->getId());

    $cert = CertificationPeer::doSelectOne( $c );



    $c = new Criteria();

    $c->add(DietaryPeer::PROFILE_ID, $this->getId());

    $diet = DietaryPeer::doSelectOne( $c );



    $c = new Criteria();

    $c->add(AnnualQuestionnairePeer::PROFILE_ID, $this->getId());

    $annual = AnnualQuestionnairePeer::doSelectOne( $c );



    $c = new Criteria();

    $c->add(MedicalPeer::PROFILE_ID, $this->getId());

    $med = MedicalPeer::doSelectOne( $c );

    if(isset($med)){

      $med->setXTEA(new XTEA( $this->getXTEAKey() ));

    }



    $c = new Criteria();

    $c->add(ProgramQuestionnairePeer::PROFILE_ID, $this->getId());

    $pq = ProgramQuestionnairePeer::doSelectOne( $c );



    foreach($fields as $field => $value){

      $text = '';

      preg_match('/(.*?):(.*)/',$value,$matches);

      $table = $matches[1];

      $table_field = $matches[2];

      if($table == 'text'){

        $text = $table_field;

      }

      if($table == 'Profile'){

        eval("\$text = \$this->get".$table_field."();");

      }

      if($table == 'Dietary'){

        if(isset($diet)){

          eval("\$text = \$diet->get".$table_field."();");

        }

      }

      if($table == 'Medical'){

        if(isset($med)){

          eval("\$text = \$med->get".$table_field."();");

          // exception: if due date blank, say "not applicable"

          if(preg_match("/DueDate/i",$table_field) && $text == ""){

            $text = " ";

          }

        }

      }

      if($table == 'Certification'){

        if(isset($cert)){

          eval("\$text = \$cert->get".$table_field."();");

        }

      }

      if($table == 'AnnualQuestionnaire'){

        if(isset($annual)){

          eval("\$text = \$annual->get".$table_field."();");

        }

      }

      if($table == 'ProgramQuestionnaire'){

        if(isset($pq)){



          eval("\$text = \$pq->get".$table_field."();");

 

          if(preg_match('/\{/',$text)){

            $text = commonTools::uncompressIfJSON($text);

          }

        }

      }

      $text = preg_replace('/\"/','""',$text); // escape double quote ( " --> "" )

      $text = preg_replace("/[\n\r]/",' ',$text); // convert newlines to spaces

      $array[$field] = $text;

    }

    return $array;

  }





  public function getTribes(){ // should be called getTribesNameDateLocation

    $c = new Criteria();

    $c->add(TribeParticipantPeer::PROFILE_ID, $this->getId() );

    $c->addDescendingOrderByColumn(TribeParticipantPeer::UPDATED_AT);

    $tps = TribeParticipantPeer::doSelect( $c );



    $tribes = '';



    foreach($tps as $tp){

      $tribe = TribePeer::retrieveByPk( $tp->getTribeId() );

      if(isset($tribe) && $tribe->getName() != 'Unassigned'){

        $tribes = $tribes . $tribe->getNameDateLocation() . "\n";

      }

    }



    return $tribes;

  }



  public function getXTEAKey(){

    if($this->getSecret() == ''){

      $this->setSecret( commonTools::randomKey() );

      $this->save();

    }

    return $this->getSecret();

  }



  public function deDuplicate(){

    $results = '';



    // if I am already marked as duplicate, return

    if($this->getExtra20() == 'dup'){

      $results .= "This is a duplicate\n";

      return $results;

    }



    $results .= "Finding other profiles\n";

    // find all profiles with my first name and email address, but not me

    $c = new Criteria();

    $c->add(ProfilePeer::EMAIL1, $this->getEmail1() );

    $c->add(ProfilePeer::FIRST_NAME, $this->getFirstName() );

    $c->add(ProfilePeer::ID, $this->getId(), Criteria::NOT_EQUAL);

    $profiles = ProfilePeer::doSelect( $c );



    // get my update time

    $my_time    = $this->getUpdatedAt('U');

    $results .= "My update time: $my_time\n";

    // loop through other profiles

    if(isset($profiles)){

      $results .= "Profiles were found\n";

      foreach($profiles as $p){

        $results .= $p->getId() . "\n";

        if($p->getExtra20() == 'dup'){

          $results .= "duplicate\n"; 

        }

        else {

          $other_time = $p->getUpdatedAt('U');

          $results .= "Other update time: $other_time\n";

          // if I am newer

          if( $my_time > $other_time ){

            if(! preg_match("/[mf]/i",$this->getGender()) ){

              if( preg_match("/[mf]/i",$p->getGender()) ){

                $this->setGender( $p->getGender() );

              }

            }

            if($this->getAge() < 1 || $this->getAge() == ''){

              $this->setAge( $p->getAge() );

            }

            $this->save();

         

            // if older has a questionnaire and I don't, transfer it

            $c = new Criteria();

            $c->add(ProgramQuestionnairePeer::PROFILE_ID, $this->getId() );

            $pq = ProgramQuestionnairePeer::doSelectOne( $c );

            if( ! isset($pq)){

              $c = new Criteria();

              $c->add(ProgramQuestionnairePeer::PROFILE_ID, $p->getId() );

              $pq = ProgramQuestionnairePeer::doSelectOne( $c );

              if(isset($pq)){

                $results .= "Setting profile id for PQ ".$pq->getId()."\n";

                $pq->setProfileId( $this->getId() );

                $pq->save();

              }

            }



            // if older has a medical and I don't, transfer it (and save secret too)

            $c = new Criteria();

            $c->add(MedicalPeer::PROFILE_ID, $this->getId() );

            $med = MedicalPeer::doSelectOne( $c );

            if( ! isset($med)){

              $c = new Criteria();

              $c->add(MedicalPeer::PROFILE_ID, $p->getId() );

              $med = MedicalPeer::doSelectOne( $c );

              if(isset($med)){

                $results .= "Setting profile id for Med ".$med->getId()."\n";

                $med->setProfileId( $this->getId() );

                $med->save();

                $this->setSecret( $p->getSecret() ); // secret is used to decrypt data in the medical table

                $this->save();

              }

            }





            // if older has a dietary, transfer it

            $c = new Criteria();

            $c->add(DietaryPeer::PROFILE_ID, $this->getId() );

            $diet = DietaryPeer::doSelectOne( $c );

            if( ! isset($diet)){

              $c = new Criteria();

              $c->add(DietaryPeer::PROFILE_ID, $p->getId() );

              $diet = DietaryPeer::doSelectOne( $c );

              if(isset($diet)){

                $results .= "Setting profile id for Diet ".$diet->getId()."\n";



                $diet->setProfileId( $this->getId() );

                $diet->save();

              }

            }



            // mark older as dup 

            $p->setExtra20('dup');

            $p->save();



            // disconnect older from tribe

            $c = new Criteria();

            $c->add(TribeParticipantPeer::PROFILE_ID, $p->getId() );

            $tp = TribeParticipantPeer::doSelectOne( $c );

            if(isset($tp)){

              $tp->setTribeId( 17 ); // unassigned tribe

              $tp->setRole( '' ); // no role

              $tp->save();

            }



          





          }

          // else if I am older

          else {

            $results .= "Other profile is newer\n";

            // don't do anything

          }

        }

      }

    }

    return $results;

  }





  // ================ PODs ================



  public function setPod($pod_id, $role = 'default'){ // set $role to 'keep' to keep current role setting

    if($pod_id > 0){

      $c = new Criteria();

      $c->add(PodParticipantPeer::PROFILE_ID, $this->getId() );

      $c->addDescendingOrderByColumn(PodParticipantPeer::UPDATED_AT);

      $tp = PodParticipantPeer::doSelectOne( $c );

      if(isset($tp)){

        $tp->setPodId($pod_id);

        if($role != 'keep'){

          $tp->setRole($role);

        }

        $tp->save();

      }

      else {

        $tp = new PodParticipant();

        $tp->setPodId($pod_id);

        $tp->setProfileId( $this->getId() );

        if($role == 'keep'){

          $role = 'participant';

        }

        $tp->setRole($role);

        $tp->save();

      }

    }



    return;

  }







  public function getPodName(){

    $pod = $this->getPod();

    return $pod->getName();

  }



  public function getPod(){

    $c = new Criteria();

    $c->add(PodParticipantPeer::PROFILE_ID, $this->getId() );

    $c->addJoin(PodParticipantPeer::POD_ID,PodPeer::ID);

    $pod = PodPeer::doSelectOne( $c );



    return $pod;

  }



  public function getDidFinishApplication(){

    $c = new Criteria();

    $c->add(CertificationPeer::PROFILE_ID, $this->getId() );

    $cert = CertificationPeer::doSelectOne( $c );

    if($cert){

      if($cert->getExtra4() == 'I agree'){

      return 'Yes';

      }

    }

    return 'No';

  }



  public function getMonthToBegin(){

    $c = new Criteria();

    $c->add(CertificationPeer::PROFILE_ID, $this->getId() );

    $cert = CertificationPeer::doSelectOne( $c );

    if($cert){

      return $cert->getMonthToBegin();

    }

    return '';

  }





  public function getAnnualQuestionnaireArray() {

    // create an associate array that maps table fields to diet fields

    $fields = array (

      'Last Name' => 'Profile:LastName',

      'First Name' => 'Profile:FirstName',

      'Tribe First Choice' => 'AnnualQuestionnaire:TribeFirstChoice',

      'Tribe Second Choice' => 'AnnualQuestionnaire:TribeSecondChoice',

      'I AM Type' => 'AnnualQuestionnaire:IAmType', 

      'Your Tribe Name' => 'AnnualQuestionnaire:YourTribeName',

      'Your Tribe Leader 1' => 'AnnualQuestionnaire:YourTribeLeader1',

      'Your Tribe Leader 2' => 'AnnualQuestionnaire:YourTribeLeader2',

      'Anything else you\'d like us to know?' => 'AnnualQuestionnaire:AnythingElse',

      'Contact Telephone' => 'AnnualQuestionnaire:ContactTelephone',

      'Contact Email' => 'AnnualQuestionnaire:ContactEmail',

    );



    $array = $this->arrayFromFieldArray( $fields );

    return $array;

  }



} // Profile

