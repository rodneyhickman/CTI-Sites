<?php

require 'lib/model/om/BaseTribePeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'tribe' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Apr 13 02:34:41 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class TribePeer extends BaseTribePeer {

  public static function addTribe( $name, $location, $r1_date, $fmid ){
    $tribe = new Tribe();
    $tribe->setName( $name );
    if(preg_match('/(west|beke|cali).*r1/i',$location)){
      $location = 'WESTERBEKE R1';
    }
    else if(preg_match('/(west|beke|cali)/i',$location)){
      $location = 'WESTERBEKE';
    }
    else if(preg_match('/(boi|caro|nc)/i',$location)){
      $location = 'NC-BOI';
    }
    else if(preg_match('/(spain|sitges|es-)/i',$location)){
      $location = 'ES-Sitges';
    }
    else if(preg_match('/(turkey)/i',$location)){
      $location = 'Turkey';
    }
    $tribe->setLocation( $location );
    $date = strtotime( $r1_date );
    $tribe->setRetreat1Date( date('Y-m-d',$date) );
    $tribe->setExtra1( $fmid );
    $tribe->save();
  }

  public static function CurrentTribes( $loc = '' ) {
    // return all future tribes and tribes started less than two weeks ago
    $c = new Criteria();

    if( $loc == 'all' ){
      // no extra criteria
    }
    else if( $loc == 'all_sans_other'){
      $c->add(TribePeer::LOCATION, 'Other', Criteria::NOT_EQUAL);
    }
    else if( $loc == 'MCC' ){
      $c->add(TribePeer::LOCATION, 'WESTERBEKE-R1');
    }
    else {
      $c->add(TribePeer::LOCATION, 'WESTERBEKE-R1', Criteria::NOT_EQUAL);
    }

    $c->add(TribePeer::RETREAT1_DATE, date('Y-m-d', strtotime('2 weeks ago')), Criteria::GREATER_EQUAL);
    $c->addAscendingOrderByColumn(TribePeer::RETREAT1_DATE);

    $tribes = TribePeer::doSelect($c);
    return $tribes;
  }


  public static function LaunchedTribes( $loc = '' ) {
    // return all future tribes and tribes started less than two weeks ago
    $c = new Criteria();

    if( $loc == 'all' ){
      // no extra criteria
    }
    else if( $loc == 'all_sans_other'){
      $c->add(TribePeer::LOCATION, 'Other', Criteria::NOT_EQUAL);
    }
    else if( $loc == 'MCC' ){
      $c->add(TribePeer::LOCATION, 'WESTERBEKE-R1');
    }
    else {
      $c->add(TribePeer::LOCATION, 'WESTERBEKE-R1', Criteria::NOT_EQUAL);
    }

    $c->add(TribePeer::RETREAT1_DATE, date('Y-m-d', strtotime('2 weeks ago')), Criteria::LESS_THAN);
    $c->addAscendingOrderByColumn(TribePeer::RETREAT1_DATE);

    $tribes = TribePeer::doSelect($c);
    return $tribes;
  }


  public static function RemoveOldTribes() {
    // tribes and tribes older than 1 year
    $c = new Criteria();
    $c->add(TribePeer::RETREAT1_DATE, date('Y-m-d', strtotime('1 year ago')), Criteria::LESS_THAN);
    $c->add(TribePeer::NAME, 'Unassigned', Criteria::NOT_EQUAL); // do not remove Unassigned tribe
    
    $tribes = TribePeer::doSelect($c);

    foreach($tribes as $t){
      $t->delete(); // should cascade delete through TribeParticipant as well
    }
    return;
  }
  
  public static function ProcessCancelledTribes() {
    // tribes and tribes older than 4 weeks
    $c = new Criteria();
    $c->add(TribePeer::NAME, 'Unassigned', Criteria::NOT_EQUAL); // do not remove Unassigned tribe
    
    $tribes = TribePeer::doSelect($c);

    foreach($tribes as $t){
      if(preg_match( '/CXL/',$t->getLocation() ) ){
        $t->setExtra3('CANCELLED'); // use extra3 as CANCELLED flag
        $t->setLocation('CXL');
      }
      else if($t->getExtra2() != 'touch' && $t->isStarted() && $t->getLocation() != 'Marconi Conference Center'){
        $t->setLocation('LAUNCHED');
      }
      $t->setExtra2(''); // remove touch flag
      $t->save();
    }
    return;
  }
  


  public static function GetUnassignedTribeId() {
    $c = new Criteria();
    $c->add(TribePeer::NAME, 'Unassigned'); 
    $tribe = TribePeer::doSelectOne($c);
    if(isset($tribe)){
      return $tribe->getId();
    }
    return 0;
  }

  public static function GetOtherTribeId() {
    $c = new Criteria();
    $c->add(TribePeer::NAME, 'Other'); 
    $tribe = TribePeer::doSelectOne($c);
    if(isset($tribe)){
      return $tribe->getId();
    }
    return 0;
  }

  public static function GetTribeIdFromText( $tribe ) {
    preg_match("/(.*2\d\d\d)\s+(\S+)/",$tribe,$matches);
    $date = date('Y/m/d 00:00:00',strtotime($matches[1]));
    $text = $matches[2];
    if(preg_match("/(East|NC|BOI)/i",$text)){
      $location = 'NC-BOI';
    }
    if(preg_match("/(Sequoia|West|Northern)/i",$text)){
      $location = 'Sequoia';
    }
    if(preg_match("/(Sitges|Spain)/i",$text)){
      $location = 'ES-Sitges';
    }
    $c = new Criteria();
    $c->add(TribePeer::RETREAT1_DATE, $date);
    $c->add(TribePeer::LOCATION, $location);
    $tribe = TribePeer::doSelectOne( $c );
    if(isset($tribe)){
      return $tribe->getId();
    }
    //return "[".$date."] [".$location."]";
  }  

  public static function GetTribeIdFromName( $name ) {
    $c = new Criteria();
    $c->add(TribePeer::NAME, "%".$name."%", Criteria::LIKE);
    $tribe = TribePeer::doSelectOne( $c );
    if(isset($tribe)){
      return $tribe->getId();
    }
    return 0;
    //return "[".$date."] [".$location."]";
  }  

} // TribePeer
