<?php

/**
 * Base class that represents a row from the 'program_questionnaire' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Nov 11 20:46:58 2011
 *
 * @package    lib.model.om
 */
abstract class BaseProgramQuestionnaire extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProgramQuestionnairePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the profile_id field.
	 * @var        int
	 */
	protected $profile_id;

	/**
	 * The value for the nationality field.
	 * @var        string
	 */
	protected $nationality;

	/**
	 * The value for the relationship_status field.
	 * @var        string
	 */
	protected $relationship_status;

	/**
	 * The value for the current_profession field.
	 * @var        string
	 */
	protected $current_profession;

	/**
	 * The value for the past_profession field.
	 * @var        string
	 */
	protected $past_profession;

	/**
	 * The value for the personal_professional_goals field.
	 * @var        string
	 */
	protected $personal_professional_goals;

	/**
	 * The value for the strengths field.
	 * @var        string
	 */
	protected $strengths;

	/**
	 * The value for the holds_you_back field.
	 * @var        string
	 */
	protected $holds_you_back;

	/**
	 * The value for the handle_failing field.
	 * @var        string
	 */
	protected $handle_failing;

	/**
	 * The value for the willing_to_fail field.
	 * @var        string
	 */
	protected $willing_to_fail;

	/**
	 * The value for the willing_to_listen field.
	 * @var        string
	 */
	protected $willing_to_listen;

	/**
	 * The value for the therapy field.
	 * @var        string
	 */
	protected $therapy;

	/**
	 * The value for the therapy_details field.
	 * @var        string
	 */
	protected $therapy_details;

	/**
	 * The value for the therapy_impact field.
	 * @var        string
	 */
	protected $therapy_impact;

	/**
	 * The value for the fundamentals field.
	 * @var        int
	 */
	protected $fundamentals;

	/**
	 * The value for the intermediate_curriculum field.
	 * @var        int
	 */
	protected $intermediate_curriculum;

	/**
	 * The value for the certification field.
	 * @var        int
	 */
	protected $certification;

	/**
	 * The value for the quest field.
	 * @var        int
	 */
	protected $quest;

	/**
	 * The value for the icc_curriculum field.
	 * @var        int
	 */
	protected $icc_curriculum;

	/**
	 * The value for the have_a_coach field.
	 * @var        string
	 */
	protected $have_a_coach;

	/**
	 * The value for the coaching_impact field.
	 * @var        string
	 */
	protected $coaching_impact;

	/**
	 * The value for the religious_affiliations field.
	 * @var        string
	 */
	protected $religious_affiliations;

	/**
	 * The value for the religious_influences field.
	 * @var        string
	 */
	protected $religious_influences;

	/**
	 * The value for the growth_experiences field.
	 * @var        string
	 */
	protected $growth_experiences;

	/**
	 * The value for the impact_as_a_leader field.
	 * @var        string
	 */
	protected $impact_as_a_leader;

	/**
	 * The value for the challenge field.
	 * @var        string
	 */
	protected $challenge;

	/**
	 * The value for the why_this_program field.
	 * @var        string
	 */
	protected $why_this_program;

	/**
	 * The value for the play_level field.
	 * @var        string
	 */
	protected $play_level;

	/**
	 * The value for the what_would_it_take field.
	 * @var        string
	 */
	protected $what_would_it_take;

	/**
	 * The value for the bring_yourself_back field.
	 * @var        string
	 */
	protected $bring_yourself_back;

	/**
	 * The value for the going_the_distance field.
	 * @var        string
	 */
	protected $going_the_distance;

	/**
	 * The value for the i_was_born_to field.
	 * @var        string
	 */
	protected $i_was_born_to;

	/**
	 * The value for the comments field.
	 * @var        string
	 */
	protected $comments;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the extra1 field.
	 * @var        string
	 */
	protected $extra1;

	/**
	 * The value for the extra2 field.
	 * @var        string
	 */
	protected $extra2;

	/**
	 * The value for the extra3 field.
	 * @var        string
	 */
	protected $extra3;

	/**
	 * The value for the extra4 field.
	 * @var        string
	 */
	protected $extra4;

	/**
	 * The value for the extra5 field.
	 * @var        string
	 */
	protected $extra5;

	/**
	 * The value for the extra6 field.
	 * @var        string
	 */
	protected $extra6;

	/**
	 * The value for the extra7 field.
	 * @var        string
	 */
	protected $extra7;

	/**
	 * The value for the extra8 field.
	 * @var        string
	 */
	protected $extra8;

	/**
	 * The value for the extra9 field.
	 * @var        string
	 */
	protected $extra9;

	/**
	 * The value for the extra10 field.
	 * @var        string
	 */
	protected $extra10;

	/**
	 * The value for the extra11 field.
	 * @var        string
	 */
	protected $extra11;

	/**
	 * The value for the extra12 field.
	 * @var        string
	 */
	protected $extra12;

	/**
	 * The value for the extra13 field.
	 * @var        string
	 */
	protected $extra13;

	/**
	 * The value for the extra14 field.
	 * @var        string
	 */
	protected $extra14;

	/**
	 * The value for the extra15 field.
	 * @var        string
	 */
	protected $extra15;

	/**
	 * The value for the extra16 field.
	 * @var        string
	 */
	protected $extra16;

	/**
	 * The value for the extra17 field.
	 * @var        string
	 */
	protected $extra17;

	/**
	 * The value for the extra18 field.
	 * @var        string
	 */
	protected $extra18;

	/**
	 * The value for the extra19 field.
	 * @var        string
	 */
	protected $extra19;

	/**
	 * The value for the extra20 field.
	 * @var        string
	 */
	protected $extra20;

	/**
	 * @var        Profile
	 */
	protected $aProfile;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ProgramQuestionnairePeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [profile_id] column value.
	 * 
	 * @return     int
	 */
	public function getProfileId()
	{
		return $this->profile_id;
	}

	/**
	 * Get the [nationality] column value.
	 * 
	 * @return     string
	 */
	public function getNationality()
	{
		return $this->nationality;
	}

	/**
	 * Get the [relationship_status] column value.
	 * 
	 * @return     string
	 */
	public function getRelationshipStatus()
	{
		return $this->relationship_status;
	}

	/**
	 * Get the [current_profession] column value.
	 * 
	 * @return     string
	 */
	public function getCurrentProfession()
	{
		return $this->current_profession;
	}

	/**
	 * Get the [past_profession] column value.
	 * 
	 * @return     string
	 */
	public function getPastProfession()
	{
		return $this->past_profession;
	}

	/**
	 * Get the [personal_professional_goals] column value.
	 * 
	 * @return     string
	 */
	public function getPersonalProfessionalGoals()
	{
		return $this->personal_professional_goals;
	}

	/**
	 * Get the [strengths] column value.
	 * 
	 * @return     string
	 */
	public function getStrengths()
	{
		return $this->strengths;
	}

	/**
	 * Get the [holds_you_back] column value.
	 * 
	 * @return     string
	 */
	public function getHoldsYouBack()
	{
		return $this->holds_you_back;
	}

	/**
	 * Get the [handle_failing] column value.
	 * 
	 * @return     string
	 */
	public function getHandleFailing()
	{
		return $this->handle_failing;
	}

	/**
	 * Get the [willing_to_fail] column value.
	 * 
	 * @return     string
	 */
	public function getWillingToFail()
	{
		return $this->willing_to_fail;
	}

	/**
	 * Get the [willing_to_listen] column value.
	 * 
	 * @return     string
	 */
	public function getWillingToListen()
	{
		return $this->willing_to_listen;
	}

	/**
	 * Get the [therapy] column value.
	 * 
	 * @return     string
	 */
	public function getTherapy()
	{
		return $this->therapy;
	}

	/**
	 * Get the [therapy_details] column value.
	 * 
	 * @return     string
	 */
	public function getTherapyDetails()
	{
		return $this->therapy_details;
	}

	/**
	 * Get the [therapy_impact] column value.
	 * 
	 * @return     string
	 */
	public function getTherapyImpact()
	{
		return $this->therapy_impact;
	}

	/**
	 * Get the [fundamentals] column value.
	 * 
	 * @return     int
	 */
	public function getFundamentals()
	{
		return $this->fundamentals;
	}

	/**
	 * Get the [intermediate_curriculum] column value.
	 * 
	 * @return     int
	 */
	public function getIntermediateCurriculum()
	{
		return $this->intermediate_curriculum;
	}

	/**
	 * Get the [certification] column value.
	 * 
	 * @return     int
	 */
	public function getCertification()
	{
		return $this->certification;
	}

	/**
	 * Get the [quest] column value.
	 * 
	 * @return     int
	 */
	public function getQuest()
	{
		return $this->quest;
	}

	/**
	 * Get the [icc_curriculum] column value.
	 * 
	 * @return     int
	 */
	public function getIccCurriculum()
	{
		return $this->icc_curriculum;
	}

	/**
	 * Get the [have_a_coach] column value.
	 * 
	 * @return     string
	 */
	public function getHaveACoach()
	{
		return $this->have_a_coach;
	}

	/**
	 * Get the [coaching_impact] column value.
	 * 
	 * @return     string
	 */
	public function getCoachingImpact()
	{
		return $this->coaching_impact;
	}

	/**
	 * Get the [religious_affiliations] column value.
	 * 
	 * @return     string
	 */
	public function getReligiousAffiliations()
	{
		return $this->religious_affiliations;
	}

	/**
	 * Get the [religious_influences] column value.
	 * 
	 * @return     string
	 */
	public function getReligiousInfluences()
	{
		return $this->religious_influences;
	}

	/**
	 * Get the [growth_experiences] column value.
	 * 
	 * @return     string
	 */
	public function getGrowthExperiences()
	{
		return $this->growth_experiences;
	}

	/**
	 * Get the [impact_as_a_leader] column value.
	 * 
	 * @return     string
	 */
	public function getImpactAsALeader()
	{
		return $this->impact_as_a_leader;
	}

	/**
	 * Get the [challenge] column value.
	 * 
	 * @return     string
	 */
	public function getChallenge()
	{
		return $this->challenge;
	}

	/**
	 * Get the [why_this_program] column value.
	 * 
	 * @return     string
	 */
	public function getWhyThisProgram()
	{
		return $this->why_this_program;
	}

	/**
	 * Get the [play_level] column value.
	 * 
	 * @return     string
	 */
	public function getPlayLevel()
	{
		return $this->play_level;
	}

	/**
	 * Get the [what_would_it_take] column value.
	 * 
	 * @return     string
	 */
	public function getWhatWouldItTake()
	{
		return $this->what_would_it_take;
	}

	/**
	 * Get the [bring_yourself_back] column value.
	 * 
	 * @return     string
	 */
	public function getBringYourselfBack()
	{
		return $this->bring_yourself_back;
	}

	/**
	 * Get the [going_the_distance] column value.
	 * 
	 * @return     string
	 */
	public function getGoingTheDistance()
	{
		return $this->going_the_distance;
	}

	/**
	 * Get the [i_was_born_to] column value.
	 * 
	 * @return     string
	 */
	public function getIWasBornTo()
	{
		return $this->i_was_born_to;
	}

	/**
	 * Get the [comments] column value.
	 * 
	 * @return     string
	 */
	public function getComments()
	{
		return $this->comments;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [extra1] column value.
	 * 
	 * @return     string
	 */
	public function getExtra1()
	{
		return $this->extra1;
	}

	/**
	 * Get the [extra2] column value.
	 * 
	 * @return     string
	 */
	public function getExtra2()
	{
		return $this->extra2;
	}

	/**
	 * Get the [extra3] column value.
	 * 
	 * @return     string
	 */
	public function getExtra3()
	{
		return $this->extra3;
	}

	/**
	 * Get the [extra4] column value.
	 * 
	 * @return     string
	 */
	public function getExtra4()
	{
		return $this->extra4;
	}

	/**
	 * Get the [extra5] column value.
	 * 
	 * @return     string
	 */
	public function getExtra5()
	{
		return $this->extra5;
	}

	/**
	 * Get the [extra6] column value.
	 * 
	 * @return     string
	 */
	public function getExtra6()
	{
		return $this->extra6;
	}

	/**
	 * Get the [extra7] column value.
	 * 
	 * @return     string
	 */
	public function getExtra7()
	{
		return $this->extra7;
	}

	/**
	 * Get the [extra8] column value.
	 * 
	 * @return     string
	 */
	public function getExtra8()
	{
		return $this->extra8;
	}

	/**
	 * Get the [extra9] column value.
	 * 
	 * @return     string
	 */
	public function getExtra9()
	{
		return $this->extra9;
	}

	/**
	 * Get the [extra10] column value.
	 * 
	 * @return     string
	 */
	public function getExtra10()
	{
		return $this->extra10;
	}

	/**
	 * Get the [extra11] column value.
	 * 
	 * @return     string
	 */
	public function getExtra11()
	{
		return $this->extra11;
	}

	/**
	 * Get the [extra12] column value.
	 * 
	 * @return     string
	 */
	public function getExtra12()
	{
		return $this->extra12;
	}

	/**
	 * Get the [extra13] column value.
	 * 
	 * @return     string
	 */
	public function getExtra13()
	{
		return $this->extra13;
	}

	/**
	 * Get the [extra14] column value.
	 * 
	 * @return     string
	 */
	public function getExtra14()
	{
		return $this->extra14;
	}

	/**
	 * Get the [extra15] column value.
	 * 
	 * @return     string
	 */
	public function getExtra15()
	{
		return $this->extra15;
	}

	/**
	 * Get the [extra16] column value.
	 * 
	 * @return     string
	 */
	public function getExtra16()
	{
		return $this->extra16;
	}

	/**
	 * Get the [extra17] column value.
	 * 
	 * @return     string
	 */
	public function getExtra17()
	{
		return $this->extra17;
	}

	/**
	 * Get the [extra18] column value.
	 * 
	 * @return     string
	 */
	public function getExtra18()
	{
		return $this->extra18;
	}

	/**
	 * Get the [extra19] column value.
	 * 
	 * @return     string
	 */
	public function getExtra19()
	{
		return $this->extra19;
	}

	/**
	 * Get the [extra20] column value.
	 * 
	 * @return     string
	 */
	public function getExtra20()
	{
		return $this->extra20;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [profile_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setProfileId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profile_id !== $v) {
			$this->profile_id = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::PROFILE_ID;
		}

		if ($this->aProfile !== null && $this->aProfile->getId() !== $v) {
			$this->aProfile = null;
		}

		return $this;
	} // setProfileId()

	/**
	 * Set the value of [nationality] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setNationality($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nationality !== $v) {
			$this->nationality = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::NATIONALITY;
		}

		return $this;
	} // setNationality()

	/**
	 * Set the value of [relationship_status] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setRelationshipStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->relationship_status !== $v) {
			$this->relationship_status = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::RELATIONSHIP_STATUS;
		}

		return $this;
	} // setRelationshipStatus()

	/**
	 * Set the value of [current_profession] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setCurrentProfession($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->current_profession !== $v) {
			$this->current_profession = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::CURRENT_PROFESSION;
		}

		return $this;
	} // setCurrentProfession()

	/**
	 * Set the value of [past_profession] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setPastProfession($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->past_profession !== $v) {
			$this->past_profession = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::PAST_PROFESSION;
		}

		return $this;
	} // setPastProfession()

	/**
	 * Set the value of [personal_professional_goals] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setPersonalProfessionalGoals($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->personal_professional_goals !== $v) {
			$this->personal_professional_goals = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::PERSONAL_PROFESSIONAL_GOALS;
		}

		return $this;
	} // setPersonalProfessionalGoals()

	/**
	 * Set the value of [strengths] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setStrengths($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->strengths !== $v) {
			$this->strengths = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::STRENGTHS;
		}

		return $this;
	} // setStrengths()

	/**
	 * Set the value of [holds_you_back] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setHoldsYouBack($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->holds_you_back !== $v) {
			$this->holds_you_back = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::HOLDS_YOU_BACK;
		}

		return $this;
	} // setHoldsYouBack()

	/**
	 * Set the value of [handle_failing] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setHandleFailing($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->handle_failing !== $v) {
			$this->handle_failing = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::HANDLE_FAILING;
		}

		return $this;
	} // setHandleFailing()

	/**
	 * Set the value of [willing_to_fail] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setWillingToFail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->willing_to_fail !== $v) {
			$this->willing_to_fail = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::WILLING_TO_FAIL;
		}

		return $this;
	} // setWillingToFail()

	/**
	 * Set the value of [willing_to_listen] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setWillingToListen($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->willing_to_listen !== $v) {
			$this->willing_to_listen = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::WILLING_TO_LISTEN;
		}

		return $this;
	} // setWillingToListen()

	/**
	 * Set the value of [therapy] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setTherapy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->therapy !== $v) {
			$this->therapy = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::THERAPY;
		}

		return $this;
	} // setTherapy()

	/**
	 * Set the value of [therapy_details] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setTherapyDetails($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->therapy_details !== $v) {
			$this->therapy_details = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::THERAPY_DETAILS;
		}

		return $this;
	} // setTherapyDetails()

	/**
	 * Set the value of [therapy_impact] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setTherapyImpact($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->therapy_impact !== $v) {
			$this->therapy_impact = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::THERAPY_IMPACT;
		}

		return $this;
	} // setTherapyImpact()

	/**
	 * Set the value of [fundamentals] column.
	 * 
	 * @param      int $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setFundamentals($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fundamentals !== $v) {
			$this->fundamentals = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::FUNDAMENTALS;
		}

		return $this;
	} // setFundamentals()

	/**
	 * Set the value of [intermediate_curriculum] column.
	 * 
	 * @param      int $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setIntermediateCurriculum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->intermediate_curriculum !== $v) {
			$this->intermediate_curriculum = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::INTERMEDIATE_CURRICULUM;
		}

		return $this;
	} // setIntermediateCurriculum()

	/**
	 * Set the value of [certification] column.
	 * 
	 * @param      int $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setCertification($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->certification !== $v) {
			$this->certification = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::CERTIFICATION;
		}

		return $this;
	} // setCertification()

	/**
	 * Set the value of [quest] column.
	 * 
	 * @param      int $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setQuest($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->quest !== $v) {
			$this->quest = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::QUEST;
		}

		return $this;
	} // setQuest()

	/**
	 * Set the value of [icc_curriculum] column.
	 * 
	 * @param      int $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setIccCurriculum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->icc_curriculum !== $v) {
			$this->icc_curriculum = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::ICC_CURRICULUM;
		}

		return $this;
	} // setIccCurriculum()

	/**
	 * Set the value of [have_a_coach] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setHaveACoach($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->have_a_coach !== $v) {
			$this->have_a_coach = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::HAVE_A_COACH;
		}

		return $this;
	} // setHaveACoach()

	/**
	 * Set the value of [coaching_impact] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setCoachingImpact($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coaching_impact !== $v) {
			$this->coaching_impact = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::COACHING_IMPACT;
		}

		return $this;
	} // setCoachingImpact()

	/**
	 * Set the value of [religious_affiliations] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setReligiousAffiliations($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->religious_affiliations !== $v) {
			$this->religious_affiliations = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::RELIGIOUS_AFFILIATIONS;
		}

		return $this;
	} // setReligiousAffiliations()

	/**
	 * Set the value of [religious_influences] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setReligiousInfluences($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->religious_influences !== $v) {
			$this->religious_influences = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::RELIGIOUS_INFLUENCES;
		}

		return $this;
	} // setReligiousInfluences()

	/**
	 * Set the value of [growth_experiences] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setGrowthExperiences($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->growth_experiences !== $v) {
			$this->growth_experiences = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::GROWTH_EXPERIENCES;
		}

		return $this;
	} // setGrowthExperiences()

	/**
	 * Set the value of [impact_as_a_leader] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setImpactAsALeader($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->impact_as_a_leader !== $v) {
			$this->impact_as_a_leader = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::IMPACT_AS_A_LEADER;
		}

		return $this;
	} // setImpactAsALeader()

	/**
	 * Set the value of [challenge] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setChallenge($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->challenge !== $v) {
			$this->challenge = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::CHALLENGE;
		}

		return $this;
	} // setChallenge()

	/**
	 * Set the value of [why_this_program] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setWhyThisProgram($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->why_this_program !== $v) {
			$this->why_this_program = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::WHY_THIS_PROGRAM;
		}

		return $this;
	} // setWhyThisProgram()

	/**
	 * Set the value of [play_level] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setPlayLevel($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->play_level !== $v) {
			$this->play_level = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::PLAY_LEVEL;
		}

		return $this;
	} // setPlayLevel()

	/**
	 * Set the value of [what_would_it_take] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setWhatWouldItTake($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->what_would_it_take !== $v) {
			$this->what_would_it_take = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::WHAT_WOULD_IT_TAKE;
		}

		return $this;
	} // setWhatWouldItTake()

	/**
	 * Set the value of [bring_yourself_back] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setBringYourselfBack($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bring_yourself_back !== $v) {
			$this->bring_yourself_back = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::BRING_YOURSELF_BACK;
		}

		return $this;
	} // setBringYourselfBack()

	/**
	 * Set the value of [going_the_distance] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setGoingTheDistance($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->going_the_distance !== $v) {
			$this->going_the_distance = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::GOING_THE_DISTANCE;
		}

		return $this;
	} // setGoingTheDistance()

	/**
	 * Set the value of [i_was_born_to] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setIWasBornTo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->i_was_born_to !== $v) {
			$this->i_was_born_to = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::I_WAS_BORN_TO;
		}

		return $this;
	} // setIWasBornTo()

	/**
	 * Set the value of [comments] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setComments($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comments !== $v) {
			$this->comments = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::COMMENTS;
		}

		return $this;
	} // setComments()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProgramQuestionnairePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ProgramQuestionnairePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [extra1] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra1 !== $v) {
			$this->extra1 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA1;
		}

		return $this;
	} // setExtra1()

	/**
	 * Set the value of [extra2] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra2 !== $v) {
			$this->extra2 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA2;
		}

		return $this;
	} // setExtra2()

	/**
	 * Set the value of [extra3] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra3 !== $v) {
			$this->extra3 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA3;
		}

		return $this;
	} // setExtra3()

	/**
	 * Set the value of [extra4] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra4 !== $v) {
			$this->extra4 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA4;
		}

		return $this;
	} // setExtra4()

	/**
	 * Set the value of [extra5] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra5 !== $v) {
			$this->extra5 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA5;
		}

		return $this;
	} // setExtra5()

	/**
	 * Set the value of [extra6] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra6 !== $v) {
			$this->extra6 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA6;
		}

		return $this;
	} // setExtra6()

	/**
	 * Set the value of [extra7] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra7 !== $v) {
			$this->extra7 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA7;
		}

		return $this;
	} // setExtra7()

	/**
	 * Set the value of [extra8] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra8 !== $v) {
			$this->extra8 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA8;
		}

		return $this;
	} // setExtra8()

	/**
	 * Set the value of [extra9] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra9($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra9 !== $v) {
			$this->extra9 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA9;
		}

		return $this;
	} // setExtra9()

	/**
	 * Set the value of [extra10] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra10($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra10 !== $v) {
			$this->extra10 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA10;
		}

		return $this;
	} // setExtra10()

	/**
	 * Set the value of [extra11] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra11($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra11 !== $v) {
			$this->extra11 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA11;
		}

		return $this;
	} // setExtra11()

	/**
	 * Set the value of [extra12] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra12($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra12 !== $v) {
			$this->extra12 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA12;
		}

		return $this;
	} // setExtra12()

	/**
	 * Set the value of [extra13] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra13($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra13 !== $v) {
			$this->extra13 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA13;
		}

		return $this;
	} // setExtra13()

	/**
	 * Set the value of [extra14] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra14($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra14 !== $v) {
			$this->extra14 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA14;
		}

		return $this;
	} // setExtra14()

	/**
	 * Set the value of [extra15] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra15($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra15 !== $v) {
			$this->extra15 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA15;
		}

		return $this;
	} // setExtra15()

	/**
	 * Set the value of [extra16] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra16($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra16 !== $v) {
			$this->extra16 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA16;
		}

		return $this;
	} // setExtra16()

	/**
	 * Set the value of [extra17] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra17($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra17 !== $v) {
			$this->extra17 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA17;
		}

		return $this;
	} // setExtra17()

	/**
	 * Set the value of [extra18] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra18($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra18 !== $v) {
			$this->extra18 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA18;
		}

		return $this;
	} // setExtra18()

	/**
	 * Set the value of [extra19] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra19($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra19 !== $v) {
			$this->extra19 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA19;
		}

		return $this;
	} // setExtra19()

	/**
	 * Set the value of [extra20] column.
	 * 
	 * @param      string $v new value
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 */
	public function setExtra20($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra20 !== $v) {
			$this->extra20 = $v;
			$this->modifiedColumns[] = ProgramQuestionnairePeer::EXTRA20;
		}

		return $this;
	} // setExtra20()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->profile_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->nationality = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->relationship_status = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->current_profession = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->past_profession = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->personal_professional_goals = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->strengths = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->holds_you_back = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->handle_failing = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->willing_to_fail = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->willing_to_listen = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->therapy = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->therapy_details = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->therapy_impact = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->fundamentals = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->intermediate_curriculum = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->certification = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->quest = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->icc_curriculum = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->have_a_coach = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->coaching_impact = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->religious_affiliations = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->religious_influences = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->growth_experiences = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->impact_as_a_leader = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->challenge = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->why_this_program = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->play_level = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->what_would_it_take = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->bring_yourself_back = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->going_the_distance = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->i_was_born_to = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->comments = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->created_at = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->updated_at = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->extra1 = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->extra2 = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->extra3 = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->extra4 = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->extra5 = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->extra6 = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->extra7 = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->extra8 = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->extra9 = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->extra10 = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->extra11 = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->extra12 = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->extra13 = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->extra14 = ($row[$startcol + 49] !== null) ? (string) $row[$startcol + 49] : null;
			$this->extra15 = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
			$this->extra16 = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
			$this->extra17 = ($row[$startcol + 52] !== null) ? (string) $row[$startcol + 52] : null;
			$this->extra18 = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->extra19 = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
			$this->extra20 = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 56; // 56 = ProgramQuestionnairePeer::NUM_COLUMNS - ProgramQuestionnairePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ProgramQuestionnaire object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProfile !== null && $this->profile_id !== $this->aProfile->getId()) {
			$this->aProfile = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProgramQuestionnairePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProgramQuestionnairePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProfile = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProgramQuestionnairePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProgramQuestionnaire:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ProgramQuestionnairePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProgramQuestionnaire:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProgramQuestionnairePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProgramQuestionnaire:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(ProgramQuestionnairePeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(ProgramQuestionnairePeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProgramQuestionnaire:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ProgramQuestionnairePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfile !== null) {
				if ($this->aProfile->isModified() || $this->aProfile->isNew()) {
					$affectedRows += $this->aProfile->save($con);
				}
				$this->setProfile($this->aProfile);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProgramQuestionnairePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProgramQuestionnairePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProgramQuestionnairePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfile !== null) {
				if (!$this->aProfile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProfile->getValidationFailures());
				}
			}


			if (($retval = ProgramQuestionnairePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProgramQuestionnairePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getProfileId();
				break;
			case 2:
				return $this->getNationality();
				break;
			case 3:
				return $this->getRelationshipStatus();
				break;
			case 4:
				return $this->getCurrentProfession();
				break;
			case 5:
				return $this->getPastProfession();
				break;
			case 6:
				return $this->getPersonalProfessionalGoals();
				break;
			case 7:
				return $this->getStrengths();
				break;
			case 8:
				return $this->getHoldsYouBack();
				break;
			case 9:
				return $this->getHandleFailing();
				break;
			case 10:
				return $this->getWillingToFail();
				break;
			case 11:
				return $this->getWillingToListen();
				break;
			case 12:
				return $this->getTherapy();
				break;
			case 13:
				return $this->getTherapyDetails();
				break;
			case 14:
				return $this->getTherapyImpact();
				break;
			case 15:
				return $this->getFundamentals();
				break;
			case 16:
				return $this->getIntermediateCurriculum();
				break;
			case 17:
				return $this->getCertification();
				break;
			case 18:
				return $this->getQuest();
				break;
			case 19:
				return $this->getIccCurriculum();
				break;
			case 20:
				return $this->getHaveACoach();
				break;
			case 21:
				return $this->getCoachingImpact();
				break;
			case 22:
				return $this->getReligiousAffiliations();
				break;
			case 23:
				return $this->getReligiousInfluences();
				break;
			case 24:
				return $this->getGrowthExperiences();
				break;
			case 25:
				return $this->getImpactAsALeader();
				break;
			case 26:
				return $this->getChallenge();
				break;
			case 27:
				return $this->getWhyThisProgram();
				break;
			case 28:
				return $this->getPlayLevel();
				break;
			case 29:
				return $this->getWhatWouldItTake();
				break;
			case 30:
				return $this->getBringYourselfBack();
				break;
			case 31:
				return $this->getGoingTheDistance();
				break;
			case 32:
				return $this->getIWasBornTo();
				break;
			case 33:
				return $this->getComments();
				break;
			case 34:
				return $this->getCreatedAt();
				break;
			case 35:
				return $this->getUpdatedAt();
				break;
			case 36:
				return $this->getExtra1();
				break;
			case 37:
				return $this->getExtra2();
				break;
			case 38:
				return $this->getExtra3();
				break;
			case 39:
				return $this->getExtra4();
				break;
			case 40:
				return $this->getExtra5();
				break;
			case 41:
				return $this->getExtra6();
				break;
			case 42:
				return $this->getExtra7();
				break;
			case 43:
				return $this->getExtra8();
				break;
			case 44:
				return $this->getExtra9();
				break;
			case 45:
				return $this->getExtra10();
				break;
			case 46:
				return $this->getExtra11();
				break;
			case 47:
				return $this->getExtra12();
				break;
			case 48:
				return $this->getExtra13();
				break;
			case 49:
				return $this->getExtra14();
				break;
			case 50:
				return $this->getExtra15();
				break;
			case 51:
				return $this->getExtra16();
				break;
			case 52:
				return $this->getExtra17();
				break;
			case 53:
				return $this->getExtra18();
				break;
			case 54:
				return $this->getExtra19();
				break;
			case 55:
				return $this->getExtra20();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProgramQuestionnairePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getProfileId(),
			$keys[2] => $this->getNationality(),
			$keys[3] => $this->getRelationshipStatus(),
			$keys[4] => $this->getCurrentProfession(),
			$keys[5] => $this->getPastProfession(),
			$keys[6] => $this->getPersonalProfessionalGoals(),
			$keys[7] => $this->getStrengths(),
			$keys[8] => $this->getHoldsYouBack(),
			$keys[9] => $this->getHandleFailing(),
			$keys[10] => $this->getWillingToFail(),
			$keys[11] => $this->getWillingToListen(),
			$keys[12] => $this->getTherapy(),
			$keys[13] => $this->getTherapyDetails(),
			$keys[14] => $this->getTherapyImpact(),
			$keys[15] => $this->getFundamentals(),
			$keys[16] => $this->getIntermediateCurriculum(),
			$keys[17] => $this->getCertification(),
			$keys[18] => $this->getQuest(),
			$keys[19] => $this->getIccCurriculum(),
			$keys[20] => $this->getHaveACoach(),
			$keys[21] => $this->getCoachingImpact(),
			$keys[22] => $this->getReligiousAffiliations(),
			$keys[23] => $this->getReligiousInfluences(),
			$keys[24] => $this->getGrowthExperiences(),
			$keys[25] => $this->getImpactAsALeader(),
			$keys[26] => $this->getChallenge(),
			$keys[27] => $this->getWhyThisProgram(),
			$keys[28] => $this->getPlayLevel(),
			$keys[29] => $this->getWhatWouldItTake(),
			$keys[30] => $this->getBringYourselfBack(),
			$keys[31] => $this->getGoingTheDistance(),
			$keys[32] => $this->getIWasBornTo(),
			$keys[33] => $this->getComments(),
			$keys[34] => $this->getCreatedAt(),
			$keys[35] => $this->getUpdatedAt(),
			$keys[36] => $this->getExtra1(),
			$keys[37] => $this->getExtra2(),
			$keys[38] => $this->getExtra3(),
			$keys[39] => $this->getExtra4(),
			$keys[40] => $this->getExtra5(),
			$keys[41] => $this->getExtra6(),
			$keys[42] => $this->getExtra7(),
			$keys[43] => $this->getExtra8(),
			$keys[44] => $this->getExtra9(),
			$keys[45] => $this->getExtra10(),
			$keys[46] => $this->getExtra11(),
			$keys[47] => $this->getExtra12(),
			$keys[48] => $this->getExtra13(),
			$keys[49] => $this->getExtra14(),
			$keys[50] => $this->getExtra15(),
			$keys[51] => $this->getExtra16(),
			$keys[52] => $this->getExtra17(),
			$keys[53] => $this->getExtra18(),
			$keys[54] => $this->getExtra19(),
			$keys[55] => $this->getExtra20(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProgramQuestionnairePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setProfileId($value);
				break;
			case 2:
				$this->setNationality($value);
				break;
			case 3:
				$this->setRelationshipStatus($value);
				break;
			case 4:
				$this->setCurrentProfession($value);
				break;
			case 5:
				$this->setPastProfession($value);
				break;
			case 6:
				$this->setPersonalProfessionalGoals($value);
				break;
			case 7:
				$this->setStrengths($value);
				break;
			case 8:
				$this->setHoldsYouBack($value);
				break;
			case 9:
				$this->setHandleFailing($value);
				break;
			case 10:
				$this->setWillingToFail($value);
				break;
			case 11:
				$this->setWillingToListen($value);
				break;
			case 12:
				$this->setTherapy($value);
				break;
			case 13:
				$this->setTherapyDetails($value);
				break;
			case 14:
				$this->setTherapyImpact($value);
				break;
			case 15:
				$this->setFundamentals($value);
				break;
			case 16:
				$this->setIntermediateCurriculum($value);
				break;
			case 17:
				$this->setCertification($value);
				break;
			case 18:
				$this->setQuest($value);
				break;
			case 19:
				$this->setIccCurriculum($value);
				break;
			case 20:
				$this->setHaveACoach($value);
				break;
			case 21:
				$this->setCoachingImpact($value);
				break;
			case 22:
				$this->setReligiousAffiliations($value);
				break;
			case 23:
				$this->setReligiousInfluences($value);
				break;
			case 24:
				$this->setGrowthExperiences($value);
				break;
			case 25:
				$this->setImpactAsALeader($value);
				break;
			case 26:
				$this->setChallenge($value);
				break;
			case 27:
				$this->setWhyThisProgram($value);
				break;
			case 28:
				$this->setPlayLevel($value);
				break;
			case 29:
				$this->setWhatWouldItTake($value);
				break;
			case 30:
				$this->setBringYourselfBack($value);
				break;
			case 31:
				$this->setGoingTheDistance($value);
				break;
			case 32:
				$this->setIWasBornTo($value);
				break;
			case 33:
				$this->setComments($value);
				break;
			case 34:
				$this->setCreatedAt($value);
				break;
			case 35:
				$this->setUpdatedAt($value);
				break;
			case 36:
				$this->setExtra1($value);
				break;
			case 37:
				$this->setExtra2($value);
				break;
			case 38:
				$this->setExtra3($value);
				break;
			case 39:
				$this->setExtra4($value);
				break;
			case 40:
				$this->setExtra5($value);
				break;
			case 41:
				$this->setExtra6($value);
				break;
			case 42:
				$this->setExtra7($value);
				break;
			case 43:
				$this->setExtra8($value);
				break;
			case 44:
				$this->setExtra9($value);
				break;
			case 45:
				$this->setExtra10($value);
				break;
			case 46:
				$this->setExtra11($value);
				break;
			case 47:
				$this->setExtra12($value);
				break;
			case 48:
				$this->setExtra13($value);
				break;
			case 49:
				$this->setExtra14($value);
				break;
			case 50:
				$this->setExtra15($value);
				break;
			case 51:
				$this->setExtra16($value);
				break;
			case 52:
				$this->setExtra17($value);
				break;
			case 53:
				$this->setExtra18($value);
				break;
			case 54:
				$this->setExtra19($value);
				break;
			case 55:
				$this->setExtra20($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProgramQuestionnairePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProfileId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNationality($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRelationshipStatus($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCurrentProfession($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPastProfession($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPersonalProfessionalGoals($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setStrengths($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setHoldsYouBack($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setHandleFailing($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setWillingToFail($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setWillingToListen($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTherapy($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setTherapyDetails($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTherapyImpact($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFundamentals($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setIntermediateCurriculum($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCertification($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setQuest($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setIccCurriculum($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setHaveACoach($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCoachingImpact($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setReligiousAffiliations($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setReligiousInfluences($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setGrowthExperiences($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setImpactAsALeader($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setChallenge($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setWhyThisProgram($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setPlayLevel($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setWhatWouldItTake($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setBringYourselfBack($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setGoingTheDistance($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setIWasBornTo($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setComments($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setCreatedAt($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setUpdatedAt($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setExtra1($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setExtra2($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setExtra3($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setExtra4($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setExtra5($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setExtra6($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setExtra7($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setExtra8($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setExtra9($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setExtra10($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setExtra11($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setExtra12($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setExtra13($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setExtra14($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setExtra15($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setExtra16($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setExtra17($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setExtra18($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setExtra19($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setExtra20($arr[$keys[55]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProgramQuestionnairePeer::DATABASE_NAME);

		if ($this->isColumnModified(ProgramQuestionnairePeer::ID)) $criteria->add(ProgramQuestionnairePeer::ID, $this->id);
		if ($this->isColumnModified(ProgramQuestionnairePeer::PROFILE_ID)) $criteria->add(ProgramQuestionnairePeer::PROFILE_ID, $this->profile_id);
		if ($this->isColumnModified(ProgramQuestionnairePeer::NATIONALITY)) $criteria->add(ProgramQuestionnairePeer::NATIONALITY, $this->nationality);
		if ($this->isColumnModified(ProgramQuestionnairePeer::RELATIONSHIP_STATUS)) $criteria->add(ProgramQuestionnairePeer::RELATIONSHIP_STATUS, $this->relationship_status);
		if ($this->isColumnModified(ProgramQuestionnairePeer::CURRENT_PROFESSION)) $criteria->add(ProgramQuestionnairePeer::CURRENT_PROFESSION, $this->current_profession);
		if ($this->isColumnModified(ProgramQuestionnairePeer::PAST_PROFESSION)) $criteria->add(ProgramQuestionnairePeer::PAST_PROFESSION, $this->past_profession);
		if ($this->isColumnModified(ProgramQuestionnairePeer::PERSONAL_PROFESSIONAL_GOALS)) $criteria->add(ProgramQuestionnairePeer::PERSONAL_PROFESSIONAL_GOALS, $this->personal_professional_goals);
		if ($this->isColumnModified(ProgramQuestionnairePeer::STRENGTHS)) $criteria->add(ProgramQuestionnairePeer::STRENGTHS, $this->strengths);
		if ($this->isColumnModified(ProgramQuestionnairePeer::HOLDS_YOU_BACK)) $criteria->add(ProgramQuestionnairePeer::HOLDS_YOU_BACK, $this->holds_you_back);
		if ($this->isColumnModified(ProgramQuestionnairePeer::HANDLE_FAILING)) $criteria->add(ProgramQuestionnairePeer::HANDLE_FAILING, $this->handle_failing);
		if ($this->isColumnModified(ProgramQuestionnairePeer::WILLING_TO_FAIL)) $criteria->add(ProgramQuestionnairePeer::WILLING_TO_FAIL, $this->willing_to_fail);
		if ($this->isColumnModified(ProgramQuestionnairePeer::WILLING_TO_LISTEN)) $criteria->add(ProgramQuestionnairePeer::WILLING_TO_LISTEN, $this->willing_to_listen);
		if ($this->isColumnModified(ProgramQuestionnairePeer::THERAPY)) $criteria->add(ProgramQuestionnairePeer::THERAPY, $this->therapy);
		if ($this->isColumnModified(ProgramQuestionnairePeer::THERAPY_DETAILS)) $criteria->add(ProgramQuestionnairePeer::THERAPY_DETAILS, $this->therapy_details);
		if ($this->isColumnModified(ProgramQuestionnairePeer::THERAPY_IMPACT)) $criteria->add(ProgramQuestionnairePeer::THERAPY_IMPACT, $this->therapy_impact);
		if ($this->isColumnModified(ProgramQuestionnairePeer::FUNDAMENTALS)) $criteria->add(ProgramQuestionnairePeer::FUNDAMENTALS, $this->fundamentals);
		if ($this->isColumnModified(ProgramQuestionnairePeer::INTERMEDIATE_CURRICULUM)) $criteria->add(ProgramQuestionnairePeer::INTERMEDIATE_CURRICULUM, $this->intermediate_curriculum);
		if ($this->isColumnModified(ProgramQuestionnairePeer::CERTIFICATION)) $criteria->add(ProgramQuestionnairePeer::CERTIFICATION, $this->certification);
		if ($this->isColumnModified(ProgramQuestionnairePeer::QUEST)) $criteria->add(ProgramQuestionnairePeer::QUEST, $this->quest);
		if ($this->isColumnModified(ProgramQuestionnairePeer::ICC_CURRICULUM)) $criteria->add(ProgramQuestionnairePeer::ICC_CURRICULUM, $this->icc_curriculum);
		if ($this->isColumnModified(ProgramQuestionnairePeer::HAVE_A_COACH)) $criteria->add(ProgramQuestionnairePeer::HAVE_A_COACH, $this->have_a_coach);
		if ($this->isColumnModified(ProgramQuestionnairePeer::COACHING_IMPACT)) $criteria->add(ProgramQuestionnairePeer::COACHING_IMPACT, $this->coaching_impact);
		if ($this->isColumnModified(ProgramQuestionnairePeer::RELIGIOUS_AFFILIATIONS)) $criteria->add(ProgramQuestionnairePeer::RELIGIOUS_AFFILIATIONS, $this->religious_affiliations);
		if ($this->isColumnModified(ProgramQuestionnairePeer::RELIGIOUS_INFLUENCES)) $criteria->add(ProgramQuestionnairePeer::RELIGIOUS_INFLUENCES, $this->religious_influences);
		if ($this->isColumnModified(ProgramQuestionnairePeer::GROWTH_EXPERIENCES)) $criteria->add(ProgramQuestionnairePeer::GROWTH_EXPERIENCES, $this->growth_experiences);
		if ($this->isColumnModified(ProgramQuestionnairePeer::IMPACT_AS_A_LEADER)) $criteria->add(ProgramQuestionnairePeer::IMPACT_AS_A_LEADER, $this->impact_as_a_leader);
		if ($this->isColumnModified(ProgramQuestionnairePeer::CHALLENGE)) $criteria->add(ProgramQuestionnairePeer::CHALLENGE, $this->challenge);
		if ($this->isColumnModified(ProgramQuestionnairePeer::WHY_THIS_PROGRAM)) $criteria->add(ProgramQuestionnairePeer::WHY_THIS_PROGRAM, $this->why_this_program);
		if ($this->isColumnModified(ProgramQuestionnairePeer::PLAY_LEVEL)) $criteria->add(ProgramQuestionnairePeer::PLAY_LEVEL, $this->play_level);
		if ($this->isColumnModified(ProgramQuestionnairePeer::WHAT_WOULD_IT_TAKE)) $criteria->add(ProgramQuestionnairePeer::WHAT_WOULD_IT_TAKE, $this->what_would_it_take);
		if ($this->isColumnModified(ProgramQuestionnairePeer::BRING_YOURSELF_BACK)) $criteria->add(ProgramQuestionnairePeer::BRING_YOURSELF_BACK, $this->bring_yourself_back);
		if ($this->isColumnModified(ProgramQuestionnairePeer::GOING_THE_DISTANCE)) $criteria->add(ProgramQuestionnairePeer::GOING_THE_DISTANCE, $this->going_the_distance);
		if ($this->isColumnModified(ProgramQuestionnairePeer::I_WAS_BORN_TO)) $criteria->add(ProgramQuestionnairePeer::I_WAS_BORN_TO, $this->i_was_born_to);
		if ($this->isColumnModified(ProgramQuestionnairePeer::COMMENTS)) $criteria->add(ProgramQuestionnairePeer::COMMENTS, $this->comments);
		if ($this->isColumnModified(ProgramQuestionnairePeer::CREATED_AT)) $criteria->add(ProgramQuestionnairePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ProgramQuestionnairePeer::UPDATED_AT)) $criteria->add(ProgramQuestionnairePeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA1)) $criteria->add(ProgramQuestionnairePeer::EXTRA1, $this->extra1);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA2)) $criteria->add(ProgramQuestionnairePeer::EXTRA2, $this->extra2);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA3)) $criteria->add(ProgramQuestionnairePeer::EXTRA3, $this->extra3);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA4)) $criteria->add(ProgramQuestionnairePeer::EXTRA4, $this->extra4);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA5)) $criteria->add(ProgramQuestionnairePeer::EXTRA5, $this->extra5);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA6)) $criteria->add(ProgramQuestionnairePeer::EXTRA6, $this->extra6);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA7)) $criteria->add(ProgramQuestionnairePeer::EXTRA7, $this->extra7);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA8)) $criteria->add(ProgramQuestionnairePeer::EXTRA8, $this->extra8);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA9)) $criteria->add(ProgramQuestionnairePeer::EXTRA9, $this->extra9);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA10)) $criteria->add(ProgramQuestionnairePeer::EXTRA10, $this->extra10);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA11)) $criteria->add(ProgramQuestionnairePeer::EXTRA11, $this->extra11);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA12)) $criteria->add(ProgramQuestionnairePeer::EXTRA12, $this->extra12);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA13)) $criteria->add(ProgramQuestionnairePeer::EXTRA13, $this->extra13);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA14)) $criteria->add(ProgramQuestionnairePeer::EXTRA14, $this->extra14);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA15)) $criteria->add(ProgramQuestionnairePeer::EXTRA15, $this->extra15);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA16)) $criteria->add(ProgramQuestionnairePeer::EXTRA16, $this->extra16);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA17)) $criteria->add(ProgramQuestionnairePeer::EXTRA17, $this->extra17);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA18)) $criteria->add(ProgramQuestionnairePeer::EXTRA18, $this->extra18);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA19)) $criteria->add(ProgramQuestionnairePeer::EXTRA19, $this->extra19);
		if ($this->isColumnModified(ProgramQuestionnairePeer::EXTRA20)) $criteria->add(ProgramQuestionnairePeer::EXTRA20, $this->extra20);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProgramQuestionnairePeer::DATABASE_NAME);

		$criteria->add(ProgramQuestionnairePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ProgramQuestionnaire (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProfileId($this->profile_id);

		$copyObj->setNationality($this->nationality);

		$copyObj->setRelationshipStatus($this->relationship_status);

		$copyObj->setCurrentProfession($this->current_profession);

		$copyObj->setPastProfession($this->past_profession);

		$copyObj->setPersonalProfessionalGoals($this->personal_professional_goals);

		$copyObj->setStrengths($this->strengths);

		$copyObj->setHoldsYouBack($this->holds_you_back);

		$copyObj->setHandleFailing($this->handle_failing);

		$copyObj->setWillingToFail($this->willing_to_fail);

		$copyObj->setWillingToListen($this->willing_to_listen);

		$copyObj->setTherapy($this->therapy);

		$copyObj->setTherapyDetails($this->therapy_details);

		$copyObj->setTherapyImpact($this->therapy_impact);

		$copyObj->setFundamentals($this->fundamentals);

		$copyObj->setIntermediateCurriculum($this->intermediate_curriculum);

		$copyObj->setCertification($this->certification);

		$copyObj->setQuest($this->quest);

		$copyObj->setIccCurriculum($this->icc_curriculum);

		$copyObj->setHaveACoach($this->have_a_coach);

		$copyObj->setCoachingImpact($this->coaching_impact);

		$copyObj->setReligiousAffiliations($this->religious_affiliations);

		$copyObj->setReligiousInfluences($this->religious_influences);

		$copyObj->setGrowthExperiences($this->growth_experiences);

		$copyObj->setImpactAsALeader($this->impact_as_a_leader);

		$copyObj->setChallenge($this->challenge);

		$copyObj->setWhyThisProgram($this->why_this_program);

		$copyObj->setPlayLevel($this->play_level);

		$copyObj->setWhatWouldItTake($this->what_would_it_take);

		$copyObj->setBringYourselfBack($this->bring_yourself_back);

		$copyObj->setGoingTheDistance($this->going_the_distance);

		$copyObj->setIWasBornTo($this->i_was_born_to);

		$copyObj->setComments($this->comments);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setExtra1($this->extra1);

		$copyObj->setExtra2($this->extra2);

		$copyObj->setExtra3($this->extra3);

		$copyObj->setExtra4($this->extra4);

		$copyObj->setExtra5($this->extra5);

		$copyObj->setExtra6($this->extra6);

		$copyObj->setExtra7($this->extra7);

		$copyObj->setExtra8($this->extra8);

		$copyObj->setExtra9($this->extra9);

		$copyObj->setExtra10($this->extra10);

		$copyObj->setExtra11($this->extra11);

		$copyObj->setExtra12($this->extra12);

		$copyObj->setExtra13($this->extra13);

		$copyObj->setExtra14($this->extra14);

		$copyObj->setExtra15($this->extra15);

		$copyObj->setExtra16($this->extra16);

		$copyObj->setExtra17($this->extra17);

		$copyObj->setExtra18($this->extra18);

		$copyObj->setExtra19($this->extra19);

		$copyObj->setExtra20($this->extra20);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ProgramQuestionnaire Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProgramQuestionnairePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProgramQuestionnairePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Profile object.
	 *
	 * @param      Profile $v
	 * @return     ProgramQuestionnaire The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProfile(Profile $v = null)
	{
		if ($v === null) {
			$this->setProfileId(NULL);
		} else {
			$this->setProfileId($v->getId());
		}

		$this->aProfile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Profile object, it will not be re-added.
		if ($v !== null) {
			$v->addProgramQuestionnaire($this);
		}

		return $this;
	}


	/**
	 * Get the associated Profile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Profile The associated Profile object.
	 * @throws     PropelException
	 */
	public function getProfile(PropelPDO $con = null)
	{
		if ($this->aProfile === null && ($this->profile_id !== null)) {
			$this->aProfile = ProfilePeer::retrieveByPk($this->profile_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProfile->addProgramQuestionnaires($this);
			 */
		}
		return $this->aProfile;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aProfile = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProgramQuestionnaire:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProgramQuestionnaire::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProgramQuestionnaire
