<?php

/**
 * Base class that represents a row from the 'medical' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Nov 11 20:47:00 2011
 *
 * @package    lib.model.om
 */
abstract class BaseMedical extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MedicalPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the profile_id field.
	 * @var        int
	 */
	protected $profile_id;

	/**
	 * The value for the height field.
	 * @var        string
	 */
	protected $height;

	/**
	 * The value for the weight field.
	 * @var        string
	 */
	protected $weight;

	/**
	 * The value for the conditions_physical field.
	 * @var        string
	 */
	protected $conditions_physical;

	/**
	 * The value for the conditions_psychological field.
	 * @var        string
	 */
	protected $conditions_psychological;

	/**
	 * The value for the accommodations field.
	 * @var        string
	 */
	protected $accommodations;

	/**
	 * The value for the head field.
	 * @var        string
	 */
	protected $head;

	/**
	 * The value for the neck field.
	 * @var        string
	 */
	protected $neck;

	/**
	 * The value for the whiplash field.
	 * @var        string
	 */
	protected $whiplash;

	/**
	 * The value for the shoulders field.
	 * @var        string
	 */
	protected $shoulders;

	/**
	 * The value for the arms field.
	 * @var        string
	 */
	protected $arms;

	/**
	 * The value for the wrists field.
	 * @var        string
	 */
	protected $wrists;

	/**
	 * The value for the hands field.
	 * @var        string
	 */
	protected $hands;

	/**
	 * The value for the upper_back field.
	 * @var        string
	 */
	protected $upper_back;

	/**
	 * The value for the lower_back field.
	 * @var        string
	 */
	protected $lower_back;

	/**
	 * The value for the pelvis field.
	 * @var        string
	 */
	protected $pelvis;

	/**
	 * The value for the groin field.
	 * @var        string
	 */
	protected $groin;

	/**
	 * The value for the dislocations field.
	 * @var        string
	 */
	protected $dislocations;

	/**
	 * The value for the dislocations_where field.
	 * @var        string
	 */
	protected $dislocations_where;

	/**
	 * The value for the asthma field.
	 * @var        string
	 */
	protected $asthma;

	/**
	 * The value for the do_you_smoke field.
	 * @var        string
	 */
	protected $do_you_smoke;

	/**
	 * The value for the have_you_ever_smoked field.
	 * @var        string
	 */
	protected $have_you_ever_smoked;

	/**
	 * The value for the are_you_currently_pregnant field.
	 * @var        string
	 */
	protected $are_you_currently_pregnant;

	/**
	 * The value for the due_date field.
	 * @var        string
	 */
	protected $due_date;

	/**
	 * The value for the lower_legs field.
	 * @var        string
	 */
	protected $lower_legs;

	/**
	 * The value for the thighs field.
	 * @var        string
	 */
	protected $thighs;

	/**
	 * The value for the knees field.
	 * @var        string
	 */
	protected $knees;

	/**
	 * The value for the ankles field.
	 * @var        string
	 */
	protected $ankles;

	/**
	 * The value for the feet field.
	 * @var        string
	 */
	protected $feet;

	/**
	 * The value for the internal_organs field.
	 * @var        string
	 */
	protected $internal_organs;

	/**
	 * The value for the heart field.
	 * @var        string
	 */
	protected $heart;

	/**
	 * The value for the lungs field.
	 * @var        string
	 */
	protected $lungs;

	/**
	 * The value for the ears field.
	 * @var        string
	 */
	protected $ears;

	/**
	 * The value for the eyes field.
	 * @var        string
	 */
	protected $eyes;

	/**
	 * The value for the contact_lenses field.
	 * @var        string
	 */
	protected $contact_lenses;

	/**
	 * The value for the dizziness field.
	 * @var        string
	 */
	protected $dizziness;

	/**
	 * The value for the high_blood_pressure field.
	 * @var        string
	 */
	protected $high_blood_pressure;

	/**
	 * The value for the heart_attack field.
	 * @var        string
	 */
	protected $heart_attack;

	/**
	 * The value for the diabetes field.
	 * @var        string
	 */
	protected $diabetes;

	/**
	 * The value for the epilepsy_seizures field.
	 * @var        string
	 */
	protected $epilepsy_seizures;

	/**
	 * The value for the other_serious_illness field.
	 * @var        string
	 */
	protected $other_serious_illness;

	/**
	 * The value for the explanation field.
	 * @var        string
	 */
	protected $explanation;

	/**
	 * The value for the allergies field.
	 * @var        string
	 */
	protected $allergies;

	/**
	 * The value for the medications field.
	 * @var        string
	 */
	protected $medications;

	/**
	 * The value for the name_of_medications field.
	 * @var        string
	 */
	protected $name_of_medications;

	/**
	 * The value for the what_are_medications_for field.
	 * @var        string
	 */
	protected $what_are_medications_for;

	/**
	 * The value for the medication_dosages field.
	 * @var        string
	 */
	protected $medication_dosages;

	/**
	 * The value for the emergency_contact_name field.
	 * @var        string
	 */
	protected $emergency_contact_name;

	/**
	 * The value for the emergency_relationship field.
	 * @var        string
	 */
	protected $emergency_relationship;

	/**
	 * The value for the emergency_address field.
	 * @var        string
	 */
	protected $emergency_address;

	/**
	 * The value for the emergency_work_phone field.
	 * @var        string
	 */
	protected $emergency_work_phone;

	/**
	 * The value for the emergency_home_phone field.
	 * @var        string
	 */
	protected $emergency_home_phone;

	/**
	 * The value for the emergency_other_phone field.
	 * @var        string
	 */
	protected $emergency_other_phone;

	/**
	 * The value for the coverage_provider field.
	 * @var        string
	 */
	protected $coverage_provider;

	/**
	 * The value for the policy_number field.
	 * @var        string
	 */
	protected $policy_number;

	/**
	 * The value for the other_insurance_information field.
	 * @var        string
	 */
	protected $other_insurance_information;

	/**
	 * The value for the doctors_name field.
	 * @var        string
	 */
	protected $doctors_name;

	/**
	 * The value for the doctors_contact_info field.
	 * @var        string
	 */
	protected $doctors_contact_info;

	/**
	 * The value for the release_of_liability field.
	 * @var        string
	 */
	protected $release_of_liability;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the extra1 field.
	 * @var        string
	 */
	protected $extra1;

	/**
	 * The value for the extra2 field.
	 * @var        string
	 */
	protected $extra2;

	/**
	 * The value for the extra3 field.
	 * @var        string
	 */
	protected $extra3;

	/**
	 * The value for the extra4 field.
	 * @var        string
	 */
	protected $extra4;

	/**
	 * The value for the extra5 field.
	 * @var        string
	 */
	protected $extra5;

	/**
	 * The value for the extra6 field.
	 * @var        string
	 */
	protected $extra6;

	/**
	 * The value for the extra7 field.
	 * @var        string
	 */
	protected $extra7;

	/**
	 * The value for the extra8 field.
	 * @var        string
	 */
	protected $extra8;

	/**
	 * The value for the extra9 field.
	 * @var        string
	 */
	protected $extra9;

	/**
	 * The value for the extra10 field.
	 * @var        string
	 */
	protected $extra10;

	/**
	 * The value for the extra11 field.
	 * @var        string
	 */
	protected $extra11;

	/**
	 * The value for the extra12 field.
	 * @var        string
	 */
	protected $extra12;

	/**
	 * The value for the extra13 field.
	 * @var        string
	 */
	protected $extra13;

	/**
	 * The value for the extra14 field.
	 * @var        string
	 */
	protected $extra14;

	/**
	 * The value for the extra15 field.
	 * @var        string
	 */
	protected $extra15;

	/**
	 * The value for the extra16 field.
	 * @var        string
	 */
	protected $extra16;

	/**
	 * The value for the extra17 field.
	 * @var        string
	 */
	protected $extra17;

	/**
	 * The value for the extra18 field.
	 * @var        string
	 */
	protected $extra18;

	/**
	 * The value for the extra19 field.
	 * @var        string
	 */
	protected $extra19;

	/**
	 * The value for the extra20 field.
	 * @var        string
	 */
	protected $extra20;

	/**
	 * @var        Profile
	 */
	protected $aProfile;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'MedicalPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [profile_id] column value.
	 * 
	 * @return     int
	 */
	public function getProfileId()
	{
		return $this->profile_id;
	}

	/**
	 * Get the [height] column value.
	 * 
	 * @return     string
	 */
	public function getHeight()
	{
		return $this->height;
	}

	/**
	 * Get the [weight] column value.
	 * 
	 * @return     string
	 */
	public function getWeight()
	{
		return $this->weight;
	}

	/**
	 * Get the [conditions_physical] column value.
	 * 
	 * @return     string
	 */
	public function getConditionsPhysical()
	{
		return $this->conditions_physical;
	}

	/**
	 * Get the [conditions_psychological] column value.
	 * 
	 * @return     string
	 */
	public function getConditionsPsychological()
	{
		return $this->conditions_psychological;
	}

	/**
	 * Get the [accommodations] column value.
	 * 
	 * @return     string
	 */
	public function getAccommodations()
	{
		return $this->accommodations;
	}

	/**
	 * Get the [head] column value.
	 * 
	 * @return     string
	 */
	public function getHead()
	{
		return $this->head;
	}

	/**
	 * Get the [neck] column value.
	 * 
	 * @return     string
	 */
	public function getNeck()
	{
		return $this->neck;
	}

	/**
	 * Get the [whiplash] column value.
	 * 
	 * @return     string
	 */
	public function getWhiplash()
	{
		return $this->whiplash;
	}

	/**
	 * Get the [shoulders] column value.
	 * 
	 * @return     string
	 */
	public function getShoulders()
	{
		return $this->shoulders;
	}

	/**
	 * Get the [arms] column value.
	 * 
	 * @return     string
	 */
	public function getArms()
	{
		return $this->arms;
	}

	/**
	 * Get the [wrists] column value.
	 * 
	 * @return     string
	 */
	public function getWrists()
	{
		return $this->wrists;
	}

	/**
	 * Get the [hands] column value.
	 * 
	 * @return     string
	 */
	public function getHands()
	{
		return $this->hands;
	}

	/**
	 * Get the [upper_back] column value.
	 * 
	 * @return     string
	 */
	public function getUpperBack()
	{
		return $this->upper_back;
	}

	/**
	 * Get the [lower_back] column value.
	 * 
	 * @return     string
	 */
	public function getLowerBack()
	{
		return $this->lower_back;
	}

	/**
	 * Get the [pelvis] column value.
	 * 
	 * @return     string
	 */
	public function getPelvis()
	{
		return $this->pelvis;
	}

	/**
	 * Get the [groin] column value.
	 * 
	 * @return     string
	 */
	public function getGroin()
	{
		return $this->groin;
	}

	/**
	 * Get the [dislocations] column value.
	 * 
	 * @return     string
	 */
	public function getDislocations()
	{
		return $this->dislocations;
	}

	/**
	 * Get the [dislocations_where] column value.
	 * 
	 * @return     string
	 */
	public function getDislocationsWhere()
	{
		return $this->dislocations_where;
	}

	/**
	 * Get the [asthma] column value.
	 * 
	 * @return     string
	 */
	public function getAsthma()
	{
		return $this->asthma;
	}

	/**
	 * Get the [do_you_smoke] column value.
	 * 
	 * @return     string
	 */
	public function getDoYouSmoke()
	{
		return $this->do_you_smoke;
	}

	/**
	 * Get the [have_you_ever_smoked] column value.
	 * 
	 * @return     string
	 */
	public function getHaveYouEverSmoked()
	{
		return $this->have_you_ever_smoked;
	}

	/**
	 * Get the [are_you_currently_pregnant] column value.
	 * 
	 * @return     string
	 */
	public function getAreYouCurrentlyPregnant()
	{
		return $this->are_you_currently_pregnant;
	}

	/**
	 * Get the [optionally formatted] temporal [due_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDueDate($format = 'Y-m-d')
	{
		if ($this->due_date === null) {
			return null;
		}


		if ($this->due_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->due_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->due_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [lower_legs] column value.
	 * 
	 * @return     string
	 */
	public function getLowerLegs()
	{
		return $this->lower_legs;
	}

	/**
	 * Get the [thighs] column value.
	 * 
	 * @return     string
	 */
	public function getThighs()
	{
		return $this->thighs;
	}

	/**
	 * Get the [knees] column value.
	 * 
	 * @return     string
	 */
	public function getKnees()
	{
		return $this->knees;
	}

	/**
	 * Get the [ankles] column value.
	 * 
	 * @return     string
	 */
	public function getAnkles()
	{
		return $this->ankles;
	}

	/**
	 * Get the [feet] column value.
	 * 
	 * @return     string
	 */
	public function getFeet()
	{
		return $this->feet;
	}

	/**
	 * Get the [internal_organs] column value.
	 * 
	 * @return     string
	 */
	public function getInternalOrgans()
	{
		return $this->internal_organs;
	}

	/**
	 * Get the [heart] column value.
	 * 
	 * @return     string
	 */
	public function getHeart()
	{
		return $this->heart;
	}

	/**
	 * Get the [lungs] column value.
	 * 
	 * @return     string
	 */
	public function getLungs()
	{
		return $this->lungs;
	}

	/**
	 * Get the [ears] column value.
	 * 
	 * @return     string
	 */
	public function getEars()
	{
		return $this->ears;
	}

	/**
	 * Get the [eyes] column value.
	 * 
	 * @return     string
	 */
	public function getEyes()
	{
		return $this->eyes;
	}

	/**
	 * Get the [contact_lenses] column value.
	 * 
	 * @return     string
	 */
	public function getContactLenses()
	{
		return $this->contact_lenses;
	}

	/**
	 * Get the [dizziness] column value.
	 * 
	 * @return     string
	 */
	public function getDizziness()
	{
		return $this->dizziness;
	}

	/**
	 * Get the [high_blood_pressure] column value.
	 * 
	 * @return     string
	 */
	public function getHighBloodPressure()
	{
		return $this->high_blood_pressure;
	}

	/**
	 * Get the [heart_attack] column value.
	 * 
	 * @return     string
	 */
	public function getHeartAttack()
	{
		return $this->heart_attack;
	}

	/**
	 * Get the [diabetes] column value.
	 * 
	 * @return     string
	 */
	public function getDiabetes()
	{
		return $this->diabetes;
	}

	/**
	 * Get the [epilepsy_seizures] column value.
	 * 
	 * @return     string
	 */
	public function getEpilepsySeizures()
	{
		return $this->epilepsy_seizures;
	}

	/**
	 * Get the [other_serious_illness] column value.
	 * 
	 * @return     string
	 */
	public function getOtherSeriousIllness()
	{
		return $this->other_serious_illness;
	}

	/**
	 * Get the [explanation] column value.
	 * 
	 * @return     string
	 */
	public function getExplanation()
	{
		return $this->explanation;
	}

	/**
	 * Get the [allergies] column value.
	 * 
	 * @return     string
	 */
	public function getAllergies()
	{
		return $this->allergies;
	}

	/**
	 * Get the [medications] column value.
	 * 
	 * @return     string
	 */
	public function getMedications()
	{
		return $this->medications;
	}

	/**
	 * Get the [name_of_medications] column value.
	 * 
	 * @return     string
	 */
	public function getNameOfMedications()
	{
		return $this->name_of_medications;
	}

	/**
	 * Get the [what_are_medications_for] column value.
	 * 
	 * @return     string
	 */
	public function getWhatAreMedicationsFor()
	{
		return $this->what_are_medications_for;
	}

	/**
	 * Get the [medication_dosages] column value.
	 * 
	 * @return     string
	 */
	public function getMedicationDosages()
	{
		return $this->medication_dosages;
	}

	/**
	 * Get the [emergency_contact_name] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContactName()
	{
		return $this->emergency_contact_name;
	}

	/**
	 * Get the [emergency_relationship] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyRelationship()
	{
		return $this->emergency_relationship;
	}

	/**
	 * Get the [emergency_address] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyAddress()
	{
		return $this->emergency_address;
	}

	/**
	 * Get the [emergency_work_phone] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyWorkPhone()
	{
		return $this->emergency_work_phone;
	}

	/**
	 * Get the [emergency_home_phone] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyHomePhone()
	{
		return $this->emergency_home_phone;
	}

	/**
	 * Get the [emergency_other_phone] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyOtherPhone()
	{
		return $this->emergency_other_phone;
	}

	/**
	 * Get the [coverage_provider] column value.
	 * 
	 * @return     string
	 */
	public function getCoverageProvider()
	{
		return $this->coverage_provider;
	}

	/**
	 * Get the [policy_number] column value.
	 * 
	 * @return     string
	 */
	public function getPolicyNumber()
	{
		return $this->policy_number;
	}

	/**
	 * Get the [other_insurance_information] column value.
	 * 
	 * @return     string
	 */
	public function getOtherInsuranceInformation()
	{
		return $this->other_insurance_information;
	}

	/**
	 * Get the [doctors_name] column value.
	 * 
	 * @return     string
	 */
	public function getDoctorsName()
	{
		return $this->doctors_name;
	}

	/**
	 * Get the [doctors_contact_info] column value.
	 * 
	 * @return     string
	 */
	public function getDoctorsContactInfo()
	{
		return $this->doctors_contact_info;
	}

	/**
	 * Get the [release_of_liability] column value.
	 * 
	 * @return     string
	 */
	public function getReleaseOfLiability()
	{
		return $this->release_of_liability;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [extra1] column value.
	 * 
	 * @return     string
	 */
	public function getExtra1()
	{
		return $this->extra1;
	}

	/**
	 * Get the [extra2] column value.
	 * 
	 * @return     string
	 */
	public function getExtra2()
	{
		return $this->extra2;
	}

	/**
	 * Get the [extra3] column value.
	 * 
	 * @return     string
	 */
	public function getExtra3()
	{
		return $this->extra3;
	}

	/**
	 * Get the [extra4] column value.
	 * 
	 * @return     string
	 */
	public function getExtra4()
	{
		return $this->extra4;
	}

	/**
	 * Get the [extra5] column value.
	 * 
	 * @return     string
	 */
	public function getExtra5()
	{
		return $this->extra5;
	}

	/**
	 * Get the [extra6] column value.
	 * 
	 * @return     string
	 */
	public function getExtra6()
	{
		return $this->extra6;
	}

	/**
	 * Get the [extra7] column value.
	 * 
	 * @return     string
	 */
	public function getExtra7()
	{
		return $this->extra7;
	}

	/**
	 * Get the [extra8] column value.
	 * 
	 * @return     string
	 */
	public function getExtra8()
	{
		return $this->extra8;
	}

	/**
	 * Get the [extra9] column value.
	 * 
	 * @return     string
	 */
	public function getExtra9()
	{
		return $this->extra9;
	}

	/**
	 * Get the [extra10] column value.
	 * 
	 * @return     string
	 */
	public function getExtra10()
	{
		return $this->extra10;
	}

	/**
	 * Get the [extra11] column value.
	 * 
	 * @return     string
	 */
	public function getExtra11()
	{
		return $this->extra11;
	}

	/**
	 * Get the [extra12] column value.
	 * 
	 * @return     string
	 */
	public function getExtra12()
	{
		return $this->extra12;
	}

	/**
	 * Get the [extra13] column value.
	 * 
	 * @return     string
	 */
	public function getExtra13()
	{
		return $this->extra13;
	}

	/**
	 * Get the [extra14] column value.
	 * 
	 * @return     string
	 */
	public function getExtra14()
	{
		return $this->extra14;
	}

	/**
	 * Get the [extra15] column value.
	 * 
	 * @return     string
	 */
	public function getExtra15()
	{
		return $this->extra15;
	}

	/**
	 * Get the [extra16] column value.
	 * 
	 * @return     string
	 */
	public function getExtra16()
	{
		return $this->extra16;
	}

	/**
	 * Get the [extra17] column value.
	 * 
	 * @return     string
	 */
	public function getExtra17()
	{
		return $this->extra17;
	}

	/**
	 * Get the [extra18] column value.
	 * 
	 * @return     string
	 */
	public function getExtra18()
	{
		return $this->extra18;
	}

	/**
	 * Get the [extra19] column value.
	 * 
	 * @return     string
	 */
	public function getExtra19()
	{
		return $this->extra19;
	}

	/**
	 * Get the [extra20] column value.
	 * 
	 * @return     string
	 */
	public function getExtra20()
	{
		return $this->extra20;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = MedicalPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [profile_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setProfileId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->profile_id !== $v) {
			$this->profile_id = $v;
			$this->modifiedColumns[] = MedicalPeer::PROFILE_ID;
		}

		if ($this->aProfile !== null && $this->aProfile->getId() !== $v) {
			$this->aProfile = null;
		}

		return $this;
	} // setProfileId()

	/**
	 * Set the value of [height] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setHeight($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->height !== $v) {
			$this->height = $v;
			$this->modifiedColumns[] = MedicalPeer::HEIGHT;
		}

		return $this;
	} // setHeight()

	/**
	 * Set the value of [weight] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setWeight($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->weight !== $v) {
			$this->weight = $v;
			$this->modifiedColumns[] = MedicalPeer::WEIGHT;
		}

		return $this;
	} // setWeight()

	/**
	 * Set the value of [conditions_physical] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setConditionsPhysical($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->conditions_physical !== $v) {
			$this->conditions_physical = $v;
			$this->modifiedColumns[] = MedicalPeer::CONDITIONS_PHYSICAL;
		}

		return $this;
	} // setConditionsPhysical()

	/**
	 * Set the value of [conditions_psychological] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setConditionsPsychological($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->conditions_psychological !== $v) {
			$this->conditions_psychological = $v;
			$this->modifiedColumns[] = MedicalPeer::CONDITIONS_PSYCHOLOGICAL;
		}

		return $this;
	} // setConditionsPsychological()

	/**
	 * Set the value of [accommodations] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setAccommodations($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->accommodations !== $v) {
			$this->accommodations = $v;
			$this->modifiedColumns[] = MedicalPeer::ACCOMMODATIONS;
		}

		return $this;
	} // setAccommodations()

	/**
	 * Set the value of [head] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setHead($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->head !== $v) {
			$this->head = $v;
			$this->modifiedColumns[] = MedicalPeer::HEAD;
		}

		return $this;
	} // setHead()

	/**
	 * Set the value of [neck] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setNeck($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->neck !== $v) {
			$this->neck = $v;
			$this->modifiedColumns[] = MedicalPeer::NECK;
		}

		return $this;
	} // setNeck()

	/**
	 * Set the value of [whiplash] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setWhiplash($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->whiplash !== $v) {
			$this->whiplash = $v;
			$this->modifiedColumns[] = MedicalPeer::WHIPLASH;
		}

		return $this;
	} // setWhiplash()

	/**
	 * Set the value of [shoulders] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setShoulders($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->shoulders !== $v) {
			$this->shoulders = $v;
			$this->modifiedColumns[] = MedicalPeer::SHOULDERS;
		}

		return $this;
	} // setShoulders()

	/**
	 * Set the value of [arms] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setArms($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->arms !== $v) {
			$this->arms = $v;
			$this->modifiedColumns[] = MedicalPeer::ARMS;
		}

		return $this;
	} // setArms()

	/**
	 * Set the value of [wrists] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setWrists($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->wrists !== $v) {
			$this->wrists = $v;
			$this->modifiedColumns[] = MedicalPeer::WRISTS;
		}

		return $this;
	} // setWrists()

	/**
	 * Set the value of [hands] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setHands($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hands !== $v) {
			$this->hands = $v;
			$this->modifiedColumns[] = MedicalPeer::HANDS;
		}

		return $this;
	} // setHands()

	/**
	 * Set the value of [upper_back] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setUpperBack($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->upper_back !== $v) {
			$this->upper_back = $v;
			$this->modifiedColumns[] = MedicalPeer::UPPER_BACK;
		}

		return $this;
	} // setUpperBack()

	/**
	 * Set the value of [lower_back] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setLowerBack($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lower_back !== $v) {
			$this->lower_back = $v;
			$this->modifiedColumns[] = MedicalPeer::LOWER_BACK;
		}

		return $this;
	} // setLowerBack()

	/**
	 * Set the value of [pelvis] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setPelvis($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pelvis !== $v) {
			$this->pelvis = $v;
			$this->modifiedColumns[] = MedicalPeer::PELVIS;
		}

		return $this;
	} // setPelvis()

	/**
	 * Set the value of [groin] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setGroin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->groin !== $v) {
			$this->groin = $v;
			$this->modifiedColumns[] = MedicalPeer::GROIN;
		}

		return $this;
	} // setGroin()

	/**
	 * Set the value of [dislocations] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setDislocations($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dislocations !== $v) {
			$this->dislocations = $v;
			$this->modifiedColumns[] = MedicalPeer::DISLOCATIONS;
		}

		return $this;
	} // setDislocations()

	/**
	 * Set the value of [dislocations_where] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setDislocationsWhere($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dislocations_where !== $v) {
			$this->dislocations_where = $v;
			$this->modifiedColumns[] = MedicalPeer::DISLOCATIONS_WHERE;
		}

		return $this;
	} // setDislocationsWhere()

	/**
	 * Set the value of [asthma] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setAsthma($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->asthma !== $v) {
			$this->asthma = $v;
			$this->modifiedColumns[] = MedicalPeer::ASTHMA;
		}

		return $this;
	} // setAsthma()

	/**
	 * Set the value of [do_you_smoke] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setDoYouSmoke($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->do_you_smoke !== $v) {
			$this->do_you_smoke = $v;
			$this->modifiedColumns[] = MedicalPeer::DO_YOU_SMOKE;
		}

		return $this;
	} // setDoYouSmoke()

	/**
	 * Set the value of [have_you_ever_smoked] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setHaveYouEverSmoked($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->have_you_ever_smoked !== $v) {
			$this->have_you_ever_smoked = $v;
			$this->modifiedColumns[] = MedicalPeer::HAVE_YOU_EVER_SMOKED;
		}

		return $this;
	} // setHaveYouEverSmoked()

	/**
	 * Set the value of [are_you_currently_pregnant] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setAreYouCurrentlyPregnant($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->are_you_currently_pregnant !== $v) {
			$this->are_you_currently_pregnant = $v;
			$this->modifiedColumns[] = MedicalPeer::ARE_YOU_CURRENTLY_PREGNANT;
		}

		return $this;
	} // setAreYouCurrentlyPregnant()

	/**
	 * Sets the value of [due_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setDueDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->due_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->due_date !== null && $tmpDt = new DateTime($this->due_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->due_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MedicalPeer::DUE_DATE;
			}
		} // if either are not null

		return $this;
	} // setDueDate()

	/**
	 * Set the value of [lower_legs] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setLowerLegs($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lower_legs !== $v) {
			$this->lower_legs = $v;
			$this->modifiedColumns[] = MedicalPeer::LOWER_LEGS;
		}

		return $this;
	} // setLowerLegs()

	/**
	 * Set the value of [thighs] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setThighs($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->thighs !== $v) {
			$this->thighs = $v;
			$this->modifiedColumns[] = MedicalPeer::THIGHS;
		}

		return $this;
	} // setThighs()

	/**
	 * Set the value of [knees] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setKnees($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->knees !== $v) {
			$this->knees = $v;
			$this->modifiedColumns[] = MedicalPeer::KNEES;
		}

		return $this;
	} // setKnees()

	/**
	 * Set the value of [ankles] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setAnkles($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ankles !== $v) {
			$this->ankles = $v;
			$this->modifiedColumns[] = MedicalPeer::ANKLES;
		}

		return $this;
	} // setAnkles()

	/**
	 * Set the value of [feet] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setFeet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->feet !== $v) {
			$this->feet = $v;
			$this->modifiedColumns[] = MedicalPeer::FEET;
		}

		return $this;
	} // setFeet()

	/**
	 * Set the value of [internal_organs] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setInternalOrgans($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->internal_organs !== $v) {
			$this->internal_organs = $v;
			$this->modifiedColumns[] = MedicalPeer::INTERNAL_ORGANS;
		}

		return $this;
	} // setInternalOrgans()

	/**
	 * Set the value of [heart] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setHeart($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->heart !== $v) {
			$this->heart = $v;
			$this->modifiedColumns[] = MedicalPeer::HEART;
		}

		return $this;
	} // setHeart()

	/**
	 * Set the value of [lungs] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setLungs($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lungs !== $v) {
			$this->lungs = $v;
			$this->modifiedColumns[] = MedicalPeer::LUNGS;
		}

		return $this;
	} // setLungs()

	/**
	 * Set the value of [ears] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEars($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ears !== $v) {
			$this->ears = $v;
			$this->modifiedColumns[] = MedicalPeer::EARS;
		}

		return $this;
	} // setEars()

	/**
	 * Set the value of [eyes] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEyes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->eyes !== $v) {
			$this->eyes = $v;
			$this->modifiedColumns[] = MedicalPeer::EYES;
		}

		return $this;
	} // setEyes()

	/**
	 * Set the value of [contact_lenses] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setContactLenses($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_lenses !== $v) {
			$this->contact_lenses = $v;
			$this->modifiedColumns[] = MedicalPeer::CONTACT_LENSES;
		}

		return $this;
	} // setContactLenses()

	/**
	 * Set the value of [dizziness] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setDizziness($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dizziness !== $v) {
			$this->dizziness = $v;
			$this->modifiedColumns[] = MedicalPeer::DIZZINESS;
		}

		return $this;
	} // setDizziness()

	/**
	 * Set the value of [high_blood_pressure] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setHighBloodPressure($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->high_blood_pressure !== $v) {
			$this->high_blood_pressure = $v;
			$this->modifiedColumns[] = MedicalPeer::HIGH_BLOOD_PRESSURE;
		}

		return $this;
	} // setHighBloodPressure()

	/**
	 * Set the value of [heart_attack] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setHeartAttack($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->heart_attack !== $v) {
			$this->heart_attack = $v;
			$this->modifiedColumns[] = MedicalPeer::HEART_ATTACK;
		}

		return $this;
	} // setHeartAttack()

	/**
	 * Set the value of [diabetes] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setDiabetes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->diabetes !== $v) {
			$this->diabetes = $v;
			$this->modifiedColumns[] = MedicalPeer::DIABETES;
		}

		return $this;
	} // setDiabetes()

	/**
	 * Set the value of [epilepsy_seizures] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEpilepsySeizures($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->epilepsy_seizures !== $v) {
			$this->epilepsy_seizures = $v;
			$this->modifiedColumns[] = MedicalPeer::EPILEPSY_SEIZURES;
		}

		return $this;
	} // setEpilepsySeizures()

	/**
	 * Set the value of [other_serious_illness] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setOtherSeriousIllness($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_serious_illness !== $v) {
			$this->other_serious_illness = $v;
			$this->modifiedColumns[] = MedicalPeer::OTHER_SERIOUS_ILLNESS;
		}

		return $this;
	} // setOtherSeriousIllness()

	/**
	 * Set the value of [explanation] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExplanation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->explanation !== $v) {
			$this->explanation = $v;
			$this->modifiedColumns[] = MedicalPeer::EXPLANATION;
		}

		return $this;
	} // setExplanation()

	/**
	 * Set the value of [allergies] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setAllergies($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->allergies !== $v) {
			$this->allergies = $v;
			$this->modifiedColumns[] = MedicalPeer::ALLERGIES;
		}

		return $this;
	} // setAllergies()

	/**
	 * Set the value of [medications] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setMedications($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->medications !== $v) {
			$this->medications = $v;
			$this->modifiedColumns[] = MedicalPeer::MEDICATIONS;
		}

		return $this;
	} // setMedications()

	/**
	 * Set the value of [name_of_medications] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setNameOfMedications($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name_of_medications !== $v) {
			$this->name_of_medications = $v;
			$this->modifiedColumns[] = MedicalPeer::NAME_OF_MEDICATIONS;
		}

		return $this;
	} // setNameOfMedications()

	/**
	 * Set the value of [what_are_medications_for] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setWhatAreMedicationsFor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->what_are_medications_for !== $v) {
			$this->what_are_medications_for = $v;
			$this->modifiedColumns[] = MedicalPeer::WHAT_ARE_MEDICATIONS_FOR;
		}

		return $this;
	} // setWhatAreMedicationsFor()

	/**
	 * Set the value of [medication_dosages] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setMedicationDosages($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->medication_dosages !== $v) {
			$this->medication_dosages = $v;
			$this->modifiedColumns[] = MedicalPeer::MEDICATION_DOSAGES;
		}

		return $this;
	} // setMedicationDosages()

	/**
	 * Set the value of [emergency_contact_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEmergencyContactName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact_name !== $v) {
			$this->emergency_contact_name = $v;
			$this->modifiedColumns[] = MedicalPeer::EMERGENCY_CONTACT_NAME;
		}

		return $this;
	} // setEmergencyContactName()

	/**
	 * Set the value of [emergency_relationship] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEmergencyRelationship($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_relationship !== $v) {
			$this->emergency_relationship = $v;
			$this->modifiedColumns[] = MedicalPeer::EMERGENCY_RELATIONSHIP;
		}

		return $this;
	} // setEmergencyRelationship()

	/**
	 * Set the value of [emergency_address] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEmergencyAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_address !== $v) {
			$this->emergency_address = $v;
			$this->modifiedColumns[] = MedicalPeer::EMERGENCY_ADDRESS;
		}

		return $this;
	} // setEmergencyAddress()

	/**
	 * Set the value of [emergency_work_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEmergencyWorkPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_work_phone !== $v) {
			$this->emergency_work_phone = $v;
			$this->modifiedColumns[] = MedicalPeer::EMERGENCY_WORK_PHONE;
		}

		return $this;
	} // setEmergencyWorkPhone()

	/**
	 * Set the value of [emergency_home_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEmergencyHomePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_home_phone !== $v) {
			$this->emergency_home_phone = $v;
			$this->modifiedColumns[] = MedicalPeer::EMERGENCY_HOME_PHONE;
		}

		return $this;
	} // setEmergencyHomePhone()

	/**
	 * Set the value of [emergency_other_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setEmergencyOtherPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_other_phone !== $v) {
			$this->emergency_other_phone = $v;
			$this->modifiedColumns[] = MedicalPeer::EMERGENCY_OTHER_PHONE;
		}

		return $this;
	} // setEmergencyOtherPhone()

	/**
	 * Set the value of [coverage_provider] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setCoverageProvider($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coverage_provider !== $v) {
			$this->coverage_provider = $v;
			$this->modifiedColumns[] = MedicalPeer::COVERAGE_PROVIDER;
		}

		return $this;
	} // setCoverageProvider()

	/**
	 * Set the value of [policy_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setPolicyNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->policy_number !== $v) {
			$this->policy_number = $v;
			$this->modifiedColumns[] = MedicalPeer::POLICY_NUMBER;
		}

		return $this;
	} // setPolicyNumber()

	/**
	 * Set the value of [other_insurance_information] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setOtherInsuranceInformation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_insurance_information !== $v) {
			$this->other_insurance_information = $v;
			$this->modifiedColumns[] = MedicalPeer::OTHER_INSURANCE_INFORMATION;
		}

		return $this;
	} // setOtherInsuranceInformation()

	/**
	 * Set the value of [doctors_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setDoctorsName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->doctors_name !== $v) {
			$this->doctors_name = $v;
			$this->modifiedColumns[] = MedicalPeer::DOCTORS_NAME;
		}

		return $this;
	} // setDoctorsName()

	/**
	 * Set the value of [doctors_contact_info] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setDoctorsContactInfo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->doctors_contact_info !== $v) {
			$this->doctors_contact_info = $v;
			$this->modifiedColumns[] = MedicalPeer::DOCTORS_CONTACT_INFO;
		}

		return $this;
	} // setDoctorsContactInfo()

	/**
	 * Set the value of [release_of_liability] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setReleaseOfLiability($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->release_of_liability !== $v) {
			$this->release_of_liability = $v;
			$this->modifiedColumns[] = MedicalPeer::RELEASE_OF_LIABILITY;
		}

		return $this;
	} // setReleaseOfLiability()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MedicalPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MedicalPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [extra1] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra1 !== $v) {
			$this->extra1 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA1;
		}

		return $this;
	} // setExtra1()

	/**
	 * Set the value of [extra2] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra2 !== $v) {
			$this->extra2 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA2;
		}

		return $this;
	} // setExtra2()

	/**
	 * Set the value of [extra3] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra3 !== $v) {
			$this->extra3 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA3;
		}

		return $this;
	} // setExtra3()

	/**
	 * Set the value of [extra4] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra4 !== $v) {
			$this->extra4 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA4;
		}

		return $this;
	} // setExtra4()

	/**
	 * Set the value of [extra5] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra5 !== $v) {
			$this->extra5 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA5;
		}

		return $this;
	} // setExtra5()

	/**
	 * Set the value of [extra6] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra6 !== $v) {
			$this->extra6 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA6;
		}

		return $this;
	} // setExtra6()

	/**
	 * Set the value of [extra7] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra7 !== $v) {
			$this->extra7 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA7;
		}

		return $this;
	} // setExtra7()

	/**
	 * Set the value of [extra8] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra8 !== $v) {
			$this->extra8 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA8;
		}

		return $this;
	} // setExtra8()

	/**
	 * Set the value of [extra9] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra9($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra9 !== $v) {
			$this->extra9 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA9;
		}

		return $this;
	} // setExtra9()

	/**
	 * Set the value of [extra10] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra10($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra10 !== $v) {
			$this->extra10 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA10;
		}

		return $this;
	} // setExtra10()

	/**
	 * Set the value of [extra11] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra11($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra11 !== $v) {
			$this->extra11 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA11;
		}

		return $this;
	} // setExtra11()

	/**
	 * Set the value of [extra12] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra12($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra12 !== $v) {
			$this->extra12 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA12;
		}

		return $this;
	} // setExtra12()

	/**
	 * Set the value of [extra13] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra13($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra13 !== $v) {
			$this->extra13 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA13;
		}

		return $this;
	} // setExtra13()

	/**
	 * Set the value of [extra14] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra14($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra14 !== $v) {
			$this->extra14 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA14;
		}

		return $this;
	} // setExtra14()

	/**
	 * Set the value of [extra15] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra15($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra15 !== $v) {
			$this->extra15 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA15;
		}

		return $this;
	} // setExtra15()

	/**
	 * Set the value of [extra16] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra16($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra16 !== $v) {
			$this->extra16 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA16;
		}

		return $this;
	} // setExtra16()

	/**
	 * Set the value of [extra17] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra17($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra17 !== $v) {
			$this->extra17 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA17;
		}

		return $this;
	} // setExtra17()

	/**
	 * Set the value of [extra18] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra18($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra18 !== $v) {
			$this->extra18 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA18;
		}

		return $this;
	} // setExtra18()

	/**
	 * Set the value of [extra19] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra19($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra19 !== $v) {
			$this->extra19 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA19;
		}

		return $this;
	} // setExtra19()

	/**
	 * Set the value of [extra20] column.
	 * 
	 * @param      string $v new value
	 * @return     Medical The current object (for fluent API support)
	 */
	public function setExtra20($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extra20 !== $v) {
			$this->extra20 = $v;
			$this->modifiedColumns[] = MedicalPeer::EXTRA20;
		}

		return $this;
	} // setExtra20()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->profile_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->height = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->weight = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->conditions_physical = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->conditions_psychological = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->accommodations = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->head = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->neck = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->whiplash = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->shoulders = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->arms = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->wrists = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->hands = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->upper_back = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->lower_back = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->pelvis = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->groin = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->dislocations = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->dislocations_where = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->asthma = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->do_you_smoke = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->have_you_ever_smoked = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->are_you_currently_pregnant = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->due_date = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->lower_legs = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->thighs = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->knees = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->ankles = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->feet = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->internal_organs = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->heart = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->lungs = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->ears = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->eyes = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->contact_lenses = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->dizziness = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->high_blood_pressure = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->heart_attack = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->diabetes = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->epilepsy_seizures = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->other_serious_illness = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->explanation = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->allergies = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->medications = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->name_of_medications = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->what_are_medications_for = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->medication_dosages = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->emergency_contact_name = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->emergency_relationship = ($row[$startcol + 49] !== null) ? (string) $row[$startcol + 49] : null;
			$this->emergency_address = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
			$this->emergency_work_phone = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
			$this->emergency_home_phone = ($row[$startcol + 52] !== null) ? (string) $row[$startcol + 52] : null;
			$this->emergency_other_phone = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->coverage_provider = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
			$this->policy_number = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->other_insurance_information = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
			$this->doctors_name = ($row[$startcol + 57] !== null) ? (string) $row[$startcol + 57] : null;
			$this->doctors_contact_info = ($row[$startcol + 58] !== null) ? (string) $row[$startcol + 58] : null;
			$this->release_of_liability = ($row[$startcol + 59] !== null) ? (string) $row[$startcol + 59] : null;
			$this->created_at = ($row[$startcol + 60] !== null) ? (string) $row[$startcol + 60] : null;
			$this->updated_at = ($row[$startcol + 61] !== null) ? (string) $row[$startcol + 61] : null;
			$this->extra1 = ($row[$startcol + 62] !== null) ? (string) $row[$startcol + 62] : null;
			$this->extra2 = ($row[$startcol + 63] !== null) ? (string) $row[$startcol + 63] : null;
			$this->extra3 = ($row[$startcol + 64] !== null) ? (string) $row[$startcol + 64] : null;
			$this->extra4 = ($row[$startcol + 65] !== null) ? (string) $row[$startcol + 65] : null;
			$this->extra5 = ($row[$startcol + 66] !== null) ? (string) $row[$startcol + 66] : null;
			$this->extra6 = ($row[$startcol + 67] !== null) ? (string) $row[$startcol + 67] : null;
			$this->extra7 = ($row[$startcol + 68] !== null) ? (string) $row[$startcol + 68] : null;
			$this->extra8 = ($row[$startcol + 69] !== null) ? (string) $row[$startcol + 69] : null;
			$this->extra9 = ($row[$startcol + 70] !== null) ? (string) $row[$startcol + 70] : null;
			$this->extra10 = ($row[$startcol + 71] !== null) ? (string) $row[$startcol + 71] : null;
			$this->extra11 = ($row[$startcol + 72] !== null) ? (string) $row[$startcol + 72] : null;
			$this->extra12 = ($row[$startcol + 73] !== null) ? (string) $row[$startcol + 73] : null;
			$this->extra13 = ($row[$startcol + 74] !== null) ? (string) $row[$startcol + 74] : null;
			$this->extra14 = ($row[$startcol + 75] !== null) ? (string) $row[$startcol + 75] : null;
			$this->extra15 = ($row[$startcol + 76] !== null) ? (string) $row[$startcol + 76] : null;
			$this->extra16 = ($row[$startcol + 77] !== null) ? (string) $row[$startcol + 77] : null;
			$this->extra17 = ($row[$startcol + 78] !== null) ? (string) $row[$startcol + 78] : null;
			$this->extra18 = ($row[$startcol + 79] !== null) ? (string) $row[$startcol + 79] : null;
			$this->extra19 = ($row[$startcol + 80] !== null) ? (string) $row[$startcol + 80] : null;
			$this->extra20 = ($row[$startcol + 81] !== null) ? (string) $row[$startcol + 81] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 82; // 82 = MedicalPeer::NUM_COLUMNS - MedicalPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Medical object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProfile !== null && $this->profile_id !== $this->aProfile->getId()) {
			$this->aProfile = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MedicalPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MedicalPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProfile = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MedicalPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMedical:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				MedicalPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMedical:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MedicalPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMedical:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(MedicalPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(MedicalPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMedical:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				MedicalPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfile !== null) {
				if ($this->aProfile->isModified() || $this->aProfile->isNew()) {
					$affectedRows += $this->aProfile->save($con);
				}
				$this->setProfile($this->aProfile);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MedicalPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MedicalPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MedicalPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProfile !== null) {
				if (!$this->aProfile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProfile->getValidationFailures());
				}
			}


			if (($retval = MedicalPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MedicalPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getProfileId();
				break;
			case 2:
				return $this->getHeight();
				break;
			case 3:
				return $this->getWeight();
				break;
			case 4:
				return $this->getConditionsPhysical();
				break;
			case 5:
				return $this->getConditionsPsychological();
				break;
			case 6:
				return $this->getAccommodations();
				break;
			case 7:
				return $this->getHead();
				break;
			case 8:
				return $this->getNeck();
				break;
			case 9:
				return $this->getWhiplash();
				break;
			case 10:
				return $this->getShoulders();
				break;
			case 11:
				return $this->getArms();
				break;
			case 12:
				return $this->getWrists();
				break;
			case 13:
				return $this->getHands();
				break;
			case 14:
				return $this->getUpperBack();
				break;
			case 15:
				return $this->getLowerBack();
				break;
			case 16:
				return $this->getPelvis();
				break;
			case 17:
				return $this->getGroin();
				break;
			case 18:
				return $this->getDislocations();
				break;
			case 19:
				return $this->getDislocationsWhere();
				break;
			case 20:
				return $this->getAsthma();
				break;
			case 21:
				return $this->getDoYouSmoke();
				break;
			case 22:
				return $this->getHaveYouEverSmoked();
				break;
			case 23:
				return $this->getAreYouCurrentlyPregnant();
				break;
			case 24:
				return $this->getDueDate();
				break;
			case 25:
				return $this->getLowerLegs();
				break;
			case 26:
				return $this->getThighs();
				break;
			case 27:
				return $this->getKnees();
				break;
			case 28:
				return $this->getAnkles();
				break;
			case 29:
				return $this->getFeet();
				break;
			case 30:
				return $this->getInternalOrgans();
				break;
			case 31:
				return $this->getHeart();
				break;
			case 32:
				return $this->getLungs();
				break;
			case 33:
				return $this->getEars();
				break;
			case 34:
				return $this->getEyes();
				break;
			case 35:
				return $this->getContactLenses();
				break;
			case 36:
				return $this->getDizziness();
				break;
			case 37:
				return $this->getHighBloodPressure();
				break;
			case 38:
				return $this->getHeartAttack();
				break;
			case 39:
				return $this->getDiabetes();
				break;
			case 40:
				return $this->getEpilepsySeizures();
				break;
			case 41:
				return $this->getOtherSeriousIllness();
				break;
			case 42:
				return $this->getExplanation();
				break;
			case 43:
				return $this->getAllergies();
				break;
			case 44:
				return $this->getMedications();
				break;
			case 45:
				return $this->getNameOfMedications();
				break;
			case 46:
				return $this->getWhatAreMedicationsFor();
				break;
			case 47:
				return $this->getMedicationDosages();
				break;
			case 48:
				return $this->getEmergencyContactName();
				break;
			case 49:
				return $this->getEmergencyRelationship();
				break;
			case 50:
				return $this->getEmergencyAddress();
				break;
			case 51:
				return $this->getEmergencyWorkPhone();
				break;
			case 52:
				return $this->getEmergencyHomePhone();
				break;
			case 53:
				return $this->getEmergencyOtherPhone();
				break;
			case 54:
				return $this->getCoverageProvider();
				break;
			case 55:
				return $this->getPolicyNumber();
				break;
			case 56:
				return $this->getOtherInsuranceInformation();
				break;
			case 57:
				return $this->getDoctorsName();
				break;
			case 58:
				return $this->getDoctorsContactInfo();
				break;
			case 59:
				return $this->getReleaseOfLiability();
				break;
			case 60:
				return $this->getCreatedAt();
				break;
			case 61:
				return $this->getUpdatedAt();
				break;
			case 62:
				return $this->getExtra1();
				break;
			case 63:
				return $this->getExtra2();
				break;
			case 64:
				return $this->getExtra3();
				break;
			case 65:
				return $this->getExtra4();
				break;
			case 66:
				return $this->getExtra5();
				break;
			case 67:
				return $this->getExtra6();
				break;
			case 68:
				return $this->getExtra7();
				break;
			case 69:
				return $this->getExtra8();
				break;
			case 70:
				return $this->getExtra9();
				break;
			case 71:
				return $this->getExtra10();
				break;
			case 72:
				return $this->getExtra11();
				break;
			case 73:
				return $this->getExtra12();
				break;
			case 74:
				return $this->getExtra13();
				break;
			case 75:
				return $this->getExtra14();
				break;
			case 76:
				return $this->getExtra15();
				break;
			case 77:
				return $this->getExtra16();
				break;
			case 78:
				return $this->getExtra17();
				break;
			case 79:
				return $this->getExtra18();
				break;
			case 80:
				return $this->getExtra19();
				break;
			case 81:
				return $this->getExtra20();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MedicalPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getProfileId(),
			$keys[2] => $this->getHeight(),
			$keys[3] => $this->getWeight(),
			$keys[4] => $this->getConditionsPhysical(),
			$keys[5] => $this->getConditionsPsychological(),
			$keys[6] => $this->getAccommodations(),
			$keys[7] => $this->getHead(),
			$keys[8] => $this->getNeck(),
			$keys[9] => $this->getWhiplash(),
			$keys[10] => $this->getShoulders(),
			$keys[11] => $this->getArms(),
			$keys[12] => $this->getWrists(),
			$keys[13] => $this->getHands(),
			$keys[14] => $this->getUpperBack(),
			$keys[15] => $this->getLowerBack(),
			$keys[16] => $this->getPelvis(),
			$keys[17] => $this->getGroin(),
			$keys[18] => $this->getDislocations(),
			$keys[19] => $this->getDislocationsWhere(),
			$keys[20] => $this->getAsthma(),
			$keys[21] => $this->getDoYouSmoke(),
			$keys[22] => $this->getHaveYouEverSmoked(),
			$keys[23] => $this->getAreYouCurrentlyPregnant(),
			$keys[24] => $this->getDueDate(),
			$keys[25] => $this->getLowerLegs(),
			$keys[26] => $this->getThighs(),
			$keys[27] => $this->getKnees(),
			$keys[28] => $this->getAnkles(),
			$keys[29] => $this->getFeet(),
			$keys[30] => $this->getInternalOrgans(),
			$keys[31] => $this->getHeart(),
			$keys[32] => $this->getLungs(),
			$keys[33] => $this->getEars(),
			$keys[34] => $this->getEyes(),
			$keys[35] => $this->getContactLenses(),
			$keys[36] => $this->getDizziness(),
			$keys[37] => $this->getHighBloodPressure(),
			$keys[38] => $this->getHeartAttack(),
			$keys[39] => $this->getDiabetes(),
			$keys[40] => $this->getEpilepsySeizures(),
			$keys[41] => $this->getOtherSeriousIllness(),
			$keys[42] => $this->getExplanation(),
			$keys[43] => $this->getAllergies(),
			$keys[44] => $this->getMedications(),
			$keys[45] => $this->getNameOfMedications(),
			$keys[46] => $this->getWhatAreMedicationsFor(),
			$keys[47] => $this->getMedicationDosages(),
			$keys[48] => $this->getEmergencyContactName(),
			$keys[49] => $this->getEmergencyRelationship(),
			$keys[50] => $this->getEmergencyAddress(),
			$keys[51] => $this->getEmergencyWorkPhone(),
			$keys[52] => $this->getEmergencyHomePhone(),
			$keys[53] => $this->getEmergencyOtherPhone(),
			$keys[54] => $this->getCoverageProvider(),
			$keys[55] => $this->getPolicyNumber(),
			$keys[56] => $this->getOtherInsuranceInformation(),
			$keys[57] => $this->getDoctorsName(),
			$keys[58] => $this->getDoctorsContactInfo(),
			$keys[59] => $this->getReleaseOfLiability(),
			$keys[60] => $this->getCreatedAt(),
			$keys[61] => $this->getUpdatedAt(),
			$keys[62] => $this->getExtra1(),
			$keys[63] => $this->getExtra2(),
			$keys[64] => $this->getExtra3(),
			$keys[65] => $this->getExtra4(),
			$keys[66] => $this->getExtra5(),
			$keys[67] => $this->getExtra6(),
			$keys[68] => $this->getExtra7(),
			$keys[69] => $this->getExtra8(),
			$keys[70] => $this->getExtra9(),
			$keys[71] => $this->getExtra10(),
			$keys[72] => $this->getExtra11(),
			$keys[73] => $this->getExtra12(),
			$keys[74] => $this->getExtra13(),
			$keys[75] => $this->getExtra14(),
			$keys[76] => $this->getExtra15(),
			$keys[77] => $this->getExtra16(),
			$keys[78] => $this->getExtra17(),
			$keys[79] => $this->getExtra18(),
			$keys[80] => $this->getExtra19(),
			$keys[81] => $this->getExtra20(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MedicalPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setProfileId($value);
				break;
			case 2:
				$this->setHeight($value);
				break;
			case 3:
				$this->setWeight($value);
				break;
			case 4:
				$this->setConditionsPhysical($value);
				break;
			case 5:
				$this->setConditionsPsychological($value);
				break;
			case 6:
				$this->setAccommodations($value);
				break;
			case 7:
				$this->setHead($value);
				break;
			case 8:
				$this->setNeck($value);
				break;
			case 9:
				$this->setWhiplash($value);
				break;
			case 10:
				$this->setShoulders($value);
				break;
			case 11:
				$this->setArms($value);
				break;
			case 12:
				$this->setWrists($value);
				break;
			case 13:
				$this->setHands($value);
				break;
			case 14:
				$this->setUpperBack($value);
				break;
			case 15:
				$this->setLowerBack($value);
				break;
			case 16:
				$this->setPelvis($value);
				break;
			case 17:
				$this->setGroin($value);
				break;
			case 18:
				$this->setDislocations($value);
				break;
			case 19:
				$this->setDislocationsWhere($value);
				break;
			case 20:
				$this->setAsthma($value);
				break;
			case 21:
				$this->setDoYouSmoke($value);
				break;
			case 22:
				$this->setHaveYouEverSmoked($value);
				break;
			case 23:
				$this->setAreYouCurrentlyPregnant($value);
				break;
			case 24:
				$this->setDueDate($value);
				break;
			case 25:
				$this->setLowerLegs($value);
				break;
			case 26:
				$this->setThighs($value);
				break;
			case 27:
				$this->setKnees($value);
				break;
			case 28:
				$this->setAnkles($value);
				break;
			case 29:
				$this->setFeet($value);
				break;
			case 30:
				$this->setInternalOrgans($value);
				break;
			case 31:
				$this->setHeart($value);
				break;
			case 32:
				$this->setLungs($value);
				break;
			case 33:
				$this->setEars($value);
				break;
			case 34:
				$this->setEyes($value);
				break;
			case 35:
				$this->setContactLenses($value);
				break;
			case 36:
				$this->setDizziness($value);
				break;
			case 37:
				$this->setHighBloodPressure($value);
				break;
			case 38:
				$this->setHeartAttack($value);
				break;
			case 39:
				$this->setDiabetes($value);
				break;
			case 40:
				$this->setEpilepsySeizures($value);
				break;
			case 41:
				$this->setOtherSeriousIllness($value);
				break;
			case 42:
				$this->setExplanation($value);
				break;
			case 43:
				$this->setAllergies($value);
				break;
			case 44:
				$this->setMedications($value);
				break;
			case 45:
				$this->setNameOfMedications($value);
				break;
			case 46:
				$this->setWhatAreMedicationsFor($value);
				break;
			case 47:
				$this->setMedicationDosages($value);
				break;
			case 48:
				$this->setEmergencyContactName($value);
				break;
			case 49:
				$this->setEmergencyRelationship($value);
				break;
			case 50:
				$this->setEmergencyAddress($value);
				break;
			case 51:
				$this->setEmergencyWorkPhone($value);
				break;
			case 52:
				$this->setEmergencyHomePhone($value);
				break;
			case 53:
				$this->setEmergencyOtherPhone($value);
				break;
			case 54:
				$this->setCoverageProvider($value);
				break;
			case 55:
				$this->setPolicyNumber($value);
				break;
			case 56:
				$this->setOtherInsuranceInformation($value);
				break;
			case 57:
				$this->setDoctorsName($value);
				break;
			case 58:
				$this->setDoctorsContactInfo($value);
				break;
			case 59:
				$this->setReleaseOfLiability($value);
				break;
			case 60:
				$this->setCreatedAt($value);
				break;
			case 61:
				$this->setUpdatedAt($value);
				break;
			case 62:
				$this->setExtra1($value);
				break;
			case 63:
				$this->setExtra2($value);
				break;
			case 64:
				$this->setExtra3($value);
				break;
			case 65:
				$this->setExtra4($value);
				break;
			case 66:
				$this->setExtra5($value);
				break;
			case 67:
				$this->setExtra6($value);
				break;
			case 68:
				$this->setExtra7($value);
				break;
			case 69:
				$this->setExtra8($value);
				break;
			case 70:
				$this->setExtra9($value);
				break;
			case 71:
				$this->setExtra10($value);
				break;
			case 72:
				$this->setExtra11($value);
				break;
			case 73:
				$this->setExtra12($value);
				break;
			case 74:
				$this->setExtra13($value);
				break;
			case 75:
				$this->setExtra14($value);
				break;
			case 76:
				$this->setExtra15($value);
				break;
			case 77:
				$this->setExtra16($value);
				break;
			case 78:
				$this->setExtra17($value);
				break;
			case 79:
				$this->setExtra18($value);
				break;
			case 80:
				$this->setExtra19($value);
				break;
			case 81:
				$this->setExtra20($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MedicalPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProfileId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setHeight($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setWeight($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setConditionsPhysical($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setConditionsPsychological($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAccommodations($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setHead($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNeck($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setWhiplash($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setShoulders($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setArms($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setWrists($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setHands($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setUpperBack($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setLowerBack($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setPelvis($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setGroin($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDislocations($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setDislocationsWhere($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAsthma($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setDoYouSmoke($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setHaveYouEverSmoked($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setAreYouCurrentlyPregnant($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setDueDate($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setLowerLegs($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setThighs($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setKnees($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setAnkles($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setFeet($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setInternalOrgans($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setHeart($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setLungs($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setEars($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setEyes($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setContactLenses($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setDizziness($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setHighBloodPressure($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setHeartAttack($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setDiabetes($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setEpilepsySeizures($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setOtherSeriousIllness($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setExplanation($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setAllergies($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setMedications($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setNameOfMedications($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setWhatAreMedicationsFor($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setMedicationDosages($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setEmergencyContactName($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setEmergencyRelationship($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setEmergencyAddress($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setEmergencyWorkPhone($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setEmergencyHomePhone($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setEmergencyOtherPhone($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setCoverageProvider($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setPolicyNumber($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setOtherInsuranceInformation($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setDoctorsName($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setDoctorsContactInfo($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setReleaseOfLiability($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setCreatedAt($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setUpdatedAt($arr[$keys[61]]);
		if (array_key_exists($keys[62], $arr)) $this->setExtra1($arr[$keys[62]]);
		if (array_key_exists($keys[63], $arr)) $this->setExtra2($arr[$keys[63]]);
		if (array_key_exists($keys[64], $arr)) $this->setExtra3($arr[$keys[64]]);
		if (array_key_exists($keys[65], $arr)) $this->setExtra4($arr[$keys[65]]);
		if (array_key_exists($keys[66], $arr)) $this->setExtra5($arr[$keys[66]]);
		if (array_key_exists($keys[67], $arr)) $this->setExtra6($arr[$keys[67]]);
		if (array_key_exists($keys[68], $arr)) $this->setExtra7($arr[$keys[68]]);
		if (array_key_exists($keys[69], $arr)) $this->setExtra8($arr[$keys[69]]);
		if (array_key_exists($keys[70], $arr)) $this->setExtra9($arr[$keys[70]]);
		if (array_key_exists($keys[71], $arr)) $this->setExtra10($arr[$keys[71]]);
		if (array_key_exists($keys[72], $arr)) $this->setExtra11($arr[$keys[72]]);
		if (array_key_exists($keys[73], $arr)) $this->setExtra12($arr[$keys[73]]);
		if (array_key_exists($keys[74], $arr)) $this->setExtra13($arr[$keys[74]]);
		if (array_key_exists($keys[75], $arr)) $this->setExtra14($arr[$keys[75]]);
		if (array_key_exists($keys[76], $arr)) $this->setExtra15($arr[$keys[76]]);
		if (array_key_exists($keys[77], $arr)) $this->setExtra16($arr[$keys[77]]);
		if (array_key_exists($keys[78], $arr)) $this->setExtra17($arr[$keys[78]]);
		if (array_key_exists($keys[79], $arr)) $this->setExtra18($arr[$keys[79]]);
		if (array_key_exists($keys[80], $arr)) $this->setExtra19($arr[$keys[80]]);
		if (array_key_exists($keys[81], $arr)) $this->setExtra20($arr[$keys[81]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MedicalPeer::DATABASE_NAME);

		if ($this->isColumnModified(MedicalPeer::ID)) $criteria->add(MedicalPeer::ID, $this->id);
		if ($this->isColumnModified(MedicalPeer::PROFILE_ID)) $criteria->add(MedicalPeer::PROFILE_ID, $this->profile_id);
		if ($this->isColumnModified(MedicalPeer::HEIGHT)) $criteria->add(MedicalPeer::HEIGHT, $this->height);
		if ($this->isColumnModified(MedicalPeer::WEIGHT)) $criteria->add(MedicalPeer::WEIGHT, $this->weight);
		if ($this->isColumnModified(MedicalPeer::CONDITIONS_PHYSICAL)) $criteria->add(MedicalPeer::CONDITIONS_PHYSICAL, $this->conditions_physical);
		if ($this->isColumnModified(MedicalPeer::CONDITIONS_PSYCHOLOGICAL)) $criteria->add(MedicalPeer::CONDITIONS_PSYCHOLOGICAL, $this->conditions_psychological);
		if ($this->isColumnModified(MedicalPeer::ACCOMMODATIONS)) $criteria->add(MedicalPeer::ACCOMMODATIONS, $this->accommodations);
		if ($this->isColumnModified(MedicalPeer::HEAD)) $criteria->add(MedicalPeer::HEAD, $this->head);
		if ($this->isColumnModified(MedicalPeer::NECK)) $criteria->add(MedicalPeer::NECK, $this->neck);
		if ($this->isColumnModified(MedicalPeer::WHIPLASH)) $criteria->add(MedicalPeer::WHIPLASH, $this->whiplash);
		if ($this->isColumnModified(MedicalPeer::SHOULDERS)) $criteria->add(MedicalPeer::SHOULDERS, $this->shoulders);
		if ($this->isColumnModified(MedicalPeer::ARMS)) $criteria->add(MedicalPeer::ARMS, $this->arms);
		if ($this->isColumnModified(MedicalPeer::WRISTS)) $criteria->add(MedicalPeer::WRISTS, $this->wrists);
		if ($this->isColumnModified(MedicalPeer::HANDS)) $criteria->add(MedicalPeer::HANDS, $this->hands);
		if ($this->isColumnModified(MedicalPeer::UPPER_BACK)) $criteria->add(MedicalPeer::UPPER_BACK, $this->upper_back);
		if ($this->isColumnModified(MedicalPeer::LOWER_BACK)) $criteria->add(MedicalPeer::LOWER_BACK, $this->lower_back);
		if ($this->isColumnModified(MedicalPeer::PELVIS)) $criteria->add(MedicalPeer::PELVIS, $this->pelvis);
		if ($this->isColumnModified(MedicalPeer::GROIN)) $criteria->add(MedicalPeer::GROIN, $this->groin);
		if ($this->isColumnModified(MedicalPeer::DISLOCATIONS)) $criteria->add(MedicalPeer::DISLOCATIONS, $this->dislocations);
		if ($this->isColumnModified(MedicalPeer::DISLOCATIONS_WHERE)) $criteria->add(MedicalPeer::DISLOCATIONS_WHERE, $this->dislocations_where);
		if ($this->isColumnModified(MedicalPeer::ASTHMA)) $criteria->add(MedicalPeer::ASTHMA, $this->asthma);
		if ($this->isColumnModified(MedicalPeer::DO_YOU_SMOKE)) $criteria->add(MedicalPeer::DO_YOU_SMOKE, $this->do_you_smoke);
		if ($this->isColumnModified(MedicalPeer::HAVE_YOU_EVER_SMOKED)) $criteria->add(MedicalPeer::HAVE_YOU_EVER_SMOKED, $this->have_you_ever_smoked);
		if ($this->isColumnModified(MedicalPeer::ARE_YOU_CURRENTLY_PREGNANT)) $criteria->add(MedicalPeer::ARE_YOU_CURRENTLY_PREGNANT, $this->are_you_currently_pregnant);
		if ($this->isColumnModified(MedicalPeer::DUE_DATE)) $criteria->add(MedicalPeer::DUE_DATE, $this->due_date);
		if ($this->isColumnModified(MedicalPeer::LOWER_LEGS)) $criteria->add(MedicalPeer::LOWER_LEGS, $this->lower_legs);
		if ($this->isColumnModified(MedicalPeer::THIGHS)) $criteria->add(MedicalPeer::THIGHS, $this->thighs);
		if ($this->isColumnModified(MedicalPeer::KNEES)) $criteria->add(MedicalPeer::KNEES, $this->knees);
		if ($this->isColumnModified(MedicalPeer::ANKLES)) $criteria->add(MedicalPeer::ANKLES, $this->ankles);
		if ($this->isColumnModified(MedicalPeer::FEET)) $criteria->add(MedicalPeer::FEET, $this->feet);
		if ($this->isColumnModified(MedicalPeer::INTERNAL_ORGANS)) $criteria->add(MedicalPeer::INTERNAL_ORGANS, $this->internal_organs);
		if ($this->isColumnModified(MedicalPeer::HEART)) $criteria->add(MedicalPeer::HEART, $this->heart);
		if ($this->isColumnModified(MedicalPeer::LUNGS)) $criteria->add(MedicalPeer::LUNGS, $this->lungs);
		if ($this->isColumnModified(MedicalPeer::EARS)) $criteria->add(MedicalPeer::EARS, $this->ears);
		if ($this->isColumnModified(MedicalPeer::EYES)) $criteria->add(MedicalPeer::EYES, $this->eyes);
		if ($this->isColumnModified(MedicalPeer::CONTACT_LENSES)) $criteria->add(MedicalPeer::CONTACT_LENSES, $this->contact_lenses);
		if ($this->isColumnModified(MedicalPeer::DIZZINESS)) $criteria->add(MedicalPeer::DIZZINESS, $this->dizziness);
		if ($this->isColumnModified(MedicalPeer::HIGH_BLOOD_PRESSURE)) $criteria->add(MedicalPeer::HIGH_BLOOD_PRESSURE, $this->high_blood_pressure);
		if ($this->isColumnModified(MedicalPeer::HEART_ATTACK)) $criteria->add(MedicalPeer::HEART_ATTACK, $this->heart_attack);
		if ($this->isColumnModified(MedicalPeer::DIABETES)) $criteria->add(MedicalPeer::DIABETES, $this->diabetes);
		if ($this->isColumnModified(MedicalPeer::EPILEPSY_SEIZURES)) $criteria->add(MedicalPeer::EPILEPSY_SEIZURES, $this->epilepsy_seizures);
		if ($this->isColumnModified(MedicalPeer::OTHER_SERIOUS_ILLNESS)) $criteria->add(MedicalPeer::OTHER_SERIOUS_ILLNESS, $this->other_serious_illness);
		if ($this->isColumnModified(MedicalPeer::EXPLANATION)) $criteria->add(MedicalPeer::EXPLANATION, $this->explanation);
		if ($this->isColumnModified(MedicalPeer::ALLERGIES)) $criteria->add(MedicalPeer::ALLERGIES, $this->allergies);
		if ($this->isColumnModified(MedicalPeer::MEDICATIONS)) $criteria->add(MedicalPeer::MEDICATIONS, $this->medications);
		if ($this->isColumnModified(MedicalPeer::NAME_OF_MEDICATIONS)) $criteria->add(MedicalPeer::NAME_OF_MEDICATIONS, $this->name_of_medications);
		if ($this->isColumnModified(MedicalPeer::WHAT_ARE_MEDICATIONS_FOR)) $criteria->add(MedicalPeer::WHAT_ARE_MEDICATIONS_FOR, $this->what_are_medications_for);
		if ($this->isColumnModified(MedicalPeer::MEDICATION_DOSAGES)) $criteria->add(MedicalPeer::MEDICATION_DOSAGES, $this->medication_dosages);
		if ($this->isColumnModified(MedicalPeer::EMERGENCY_CONTACT_NAME)) $criteria->add(MedicalPeer::EMERGENCY_CONTACT_NAME, $this->emergency_contact_name);
		if ($this->isColumnModified(MedicalPeer::EMERGENCY_RELATIONSHIP)) $criteria->add(MedicalPeer::EMERGENCY_RELATIONSHIP, $this->emergency_relationship);
		if ($this->isColumnModified(MedicalPeer::EMERGENCY_ADDRESS)) $criteria->add(MedicalPeer::EMERGENCY_ADDRESS, $this->emergency_address);
		if ($this->isColumnModified(MedicalPeer::EMERGENCY_WORK_PHONE)) $criteria->add(MedicalPeer::EMERGENCY_WORK_PHONE, $this->emergency_work_phone);
		if ($this->isColumnModified(MedicalPeer::EMERGENCY_HOME_PHONE)) $criteria->add(MedicalPeer::EMERGENCY_HOME_PHONE, $this->emergency_home_phone);
		if ($this->isColumnModified(MedicalPeer::EMERGENCY_OTHER_PHONE)) $criteria->add(MedicalPeer::EMERGENCY_OTHER_PHONE, $this->emergency_other_phone);
		if ($this->isColumnModified(MedicalPeer::COVERAGE_PROVIDER)) $criteria->add(MedicalPeer::COVERAGE_PROVIDER, $this->coverage_provider);
		if ($this->isColumnModified(MedicalPeer::POLICY_NUMBER)) $criteria->add(MedicalPeer::POLICY_NUMBER, $this->policy_number);
		if ($this->isColumnModified(MedicalPeer::OTHER_INSURANCE_INFORMATION)) $criteria->add(MedicalPeer::OTHER_INSURANCE_INFORMATION, $this->other_insurance_information);
		if ($this->isColumnModified(MedicalPeer::DOCTORS_NAME)) $criteria->add(MedicalPeer::DOCTORS_NAME, $this->doctors_name);
		if ($this->isColumnModified(MedicalPeer::DOCTORS_CONTACT_INFO)) $criteria->add(MedicalPeer::DOCTORS_CONTACT_INFO, $this->doctors_contact_info);
		if ($this->isColumnModified(MedicalPeer::RELEASE_OF_LIABILITY)) $criteria->add(MedicalPeer::RELEASE_OF_LIABILITY, $this->release_of_liability);
		if ($this->isColumnModified(MedicalPeer::CREATED_AT)) $criteria->add(MedicalPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(MedicalPeer::UPDATED_AT)) $criteria->add(MedicalPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(MedicalPeer::EXTRA1)) $criteria->add(MedicalPeer::EXTRA1, $this->extra1);
		if ($this->isColumnModified(MedicalPeer::EXTRA2)) $criteria->add(MedicalPeer::EXTRA2, $this->extra2);
		if ($this->isColumnModified(MedicalPeer::EXTRA3)) $criteria->add(MedicalPeer::EXTRA3, $this->extra3);
		if ($this->isColumnModified(MedicalPeer::EXTRA4)) $criteria->add(MedicalPeer::EXTRA4, $this->extra4);
		if ($this->isColumnModified(MedicalPeer::EXTRA5)) $criteria->add(MedicalPeer::EXTRA5, $this->extra5);
		if ($this->isColumnModified(MedicalPeer::EXTRA6)) $criteria->add(MedicalPeer::EXTRA6, $this->extra6);
		if ($this->isColumnModified(MedicalPeer::EXTRA7)) $criteria->add(MedicalPeer::EXTRA7, $this->extra7);
		if ($this->isColumnModified(MedicalPeer::EXTRA8)) $criteria->add(MedicalPeer::EXTRA8, $this->extra8);
		if ($this->isColumnModified(MedicalPeer::EXTRA9)) $criteria->add(MedicalPeer::EXTRA9, $this->extra9);
		if ($this->isColumnModified(MedicalPeer::EXTRA10)) $criteria->add(MedicalPeer::EXTRA10, $this->extra10);
		if ($this->isColumnModified(MedicalPeer::EXTRA11)) $criteria->add(MedicalPeer::EXTRA11, $this->extra11);
		if ($this->isColumnModified(MedicalPeer::EXTRA12)) $criteria->add(MedicalPeer::EXTRA12, $this->extra12);
		if ($this->isColumnModified(MedicalPeer::EXTRA13)) $criteria->add(MedicalPeer::EXTRA13, $this->extra13);
		if ($this->isColumnModified(MedicalPeer::EXTRA14)) $criteria->add(MedicalPeer::EXTRA14, $this->extra14);
		if ($this->isColumnModified(MedicalPeer::EXTRA15)) $criteria->add(MedicalPeer::EXTRA15, $this->extra15);
		if ($this->isColumnModified(MedicalPeer::EXTRA16)) $criteria->add(MedicalPeer::EXTRA16, $this->extra16);
		if ($this->isColumnModified(MedicalPeer::EXTRA17)) $criteria->add(MedicalPeer::EXTRA17, $this->extra17);
		if ($this->isColumnModified(MedicalPeer::EXTRA18)) $criteria->add(MedicalPeer::EXTRA18, $this->extra18);
		if ($this->isColumnModified(MedicalPeer::EXTRA19)) $criteria->add(MedicalPeer::EXTRA19, $this->extra19);
		if ($this->isColumnModified(MedicalPeer::EXTRA20)) $criteria->add(MedicalPeer::EXTRA20, $this->extra20);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MedicalPeer::DATABASE_NAME);

		$criteria->add(MedicalPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Medical (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProfileId($this->profile_id);

		$copyObj->setHeight($this->height);

		$copyObj->setWeight($this->weight);

		$copyObj->setConditionsPhysical($this->conditions_physical);

		$copyObj->setConditionsPsychological($this->conditions_psychological);

		$copyObj->setAccommodations($this->accommodations);

		$copyObj->setHead($this->head);

		$copyObj->setNeck($this->neck);

		$copyObj->setWhiplash($this->whiplash);

		$copyObj->setShoulders($this->shoulders);

		$copyObj->setArms($this->arms);

		$copyObj->setWrists($this->wrists);

		$copyObj->setHands($this->hands);

		$copyObj->setUpperBack($this->upper_back);

		$copyObj->setLowerBack($this->lower_back);

		$copyObj->setPelvis($this->pelvis);

		$copyObj->setGroin($this->groin);

		$copyObj->setDislocations($this->dislocations);

		$copyObj->setDislocationsWhere($this->dislocations_where);

		$copyObj->setAsthma($this->asthma);

		$copyObj->setDoYouSmoke($this->do_you_smoke);

		$copyObj->setHaveYouEverSmoked($this->have_you_ever_smoked);

		$copyObj->setAreYouCurrentlyPregnant($this->are_you_currently_pregnant);

		$copyObj->setDueDate($this->due_date);

		$copyObj->setLowerLegs($this->lower_legs);

		$copyObj->setThighs($this->thighs);

		$copyObj->setKnees($this->knees);

		$copyObj->setAnkles($this->ankles);

		$copyObj->setFeet($this->feet);

		$copyObj->setInternalOrgans($this->internal_organs);

		$copyObj->setHeart($this->heart);

		$copyObj->setLungs($this->lungs);

		$copyObj->setEars($this->ears);

		$copyObj->setEyes($this->eyes);

		$copyObj->setContactLenses($this->contact_lenses);

		$copyObj->setDizziness($this->dizziness);

		$copyObj->setHighBloodPressure($this->high_blood_pressure);

		$copyObj->setHeartAttack($this->heart_attack);

		$copyObj->setDiabetes($this->diabetes);

		$copyObj->setEpilepsySeizures($this->epilepsy_seizures);

		$copyObj->setOtherSeriousIllness($this->other_serious_illness);

		$copyObj->setExplanation($this->explanation);

		$copyObj->setAllergies($this->allergies);

		$copyObj->setMedications($this->medications);

		$copyObj->setNameOfMedications($this->name_of_medications);

		$copyObj->setWhatAreMedicationsFor($this->what_are_medications_for);

		$copyObj->setMedicationDosages($this->medication_dosages);

		$copyObj->setEmergencyContactName($this->emergency_contact_name);

		$copyObj->setEmergencyRelationship($this->emergency_relationship);

		$copyObj->setEmergencyAddress($this->emergency_address);

		$copyObj->setEmergencyWorkPhone($this->emergency_work_phone);

		$copyObj->setEmergencyHomePhone($this->emergency_home_phone);

		$copyObj->setEmergencyOtherPhone($this->emergency_other_phone);

		$copyObj->setCoverageProvider($this->coverage_provider);

		$copyObj->setPolicyNumber($this->policy_number);

		$copyObj->setOtherInsuranceInformation($this->other_insurance_information);

		$copyObj->setDoctorsName($this->doctors_name);

		$copyObj->setDoctorsContactInfo($this->doctors_contact_info);

		$copyObj->setReleaseOfLiability($this->release_of_liability);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setExtra1($this->extra1);

		$copyObj->setExtra2($this->extra2);

		$copyObj->setExtra3($this->extra3);

		$copyObj->setExtra4($this->extra4);

		$copyObj->setExtra5($this->extra5);

		$copyObj->setExtra6($this->extra6);

		$copyObj->setExtra7($this->extra7);

		$copyObj->setExtra8($this->extra8);

		$copyObj->setExtra9($this->extra9);

		$copyObj->setExtra10($this->extra10);

		$copyObj->setExtra11($this->extra11);

		$copyObj->setExtra12($this->extra12);

		$copyObj->setExtra13($this->extra13);

		$copyObj->setExtra14($this->extra14);

		$copyObj->setExtra15($this->extra15);

		$copyObj->setExtra16($this->extra16);

		$copyObj->setExtra17($this->extra17);

		$copyObj->setExtra18($this->extra18);

		$copyObj->setExtra19($this->extra19);

		$copyObj->setExtra20($this->extra20);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Medical Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MedicalPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MedicalPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Profile object.
	 *
	 * @param      Profile $v
	 * @return     Medical The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProfile(Profile $v = null)
	{
		if ($v === null) {
			$this->setProfileId(NULL);
		} else {
			$this->setProfileId($v->getId());
		}

		$this->aProfile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Profile object, it will not be re-added.
		if ($v !== null) {
			$v->addMedical($this);
		}

		return $this;
	}


	/**
	 * Get the associated Profile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Profile The associated Profile object.
	 * @throws     PropelException
	 */
	public function getProfile(PropelPDO $con = null)
	{
		if ($this->aProfile === null && ($this->profile_id !== null)) {
			$this->aProfile = ProfilePeer::retrieveByPk($this->profile_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProfile->addMedicals($this);
			 */
		}
		return $this->aProfile;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aProfile = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseMedical:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseMedical::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseMedical
